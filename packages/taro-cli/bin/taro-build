#!/usr/bin/env node
const path = require('path')
const fs = require('fs-extra')
const program = require('commander')
const chalk = require('chalk')
const _ = require('lodash')

const Builder = require('../dist/build').default
const { PROJECT_CONFIG, BUILD_TYPES } = require('../dist/util/constants')
const appPath = process.cwd()
const projectConfPath = path.join(appPath, PROJECT_CONFIG)

program
  .option('--type [typeName]', 'Build type, weapp/swan/alipay/tt/h5/quickapp/rn/qq/jd')
  .option('--watch', 'Watch mode')
  .option('--page [pagePath]', 'Build one page')
  .option('--component [pagePath]', 'Build one component')
  .option('--env [env]', 'Env type')
  .option('--ui', 'Build Taro UI library')
  .option('--ui-index [uiIndexPath]', 'Index file for build Taro UI library')
  .option('--plugin [typeName]', 'Build Taro plugin project, weapp')
  .option('--port [port]', 'Specified port')
  .option('--release', 'Release quickapp')
  .parse(process.argv)

const { type, watch, ui, port, release, page, component, uiIndex } = program
let { env, plugin } = program

env = process.env.NODE_ENV || env

if (env) {
  process.env.NODE_ENV = env
} else {
  if (watch) {
    process.env.NODE_ENV = 'development'
  } else {
    process.env.NODE_ENV = 'production'
  }
}
process.env.TARO_ENV = type

const builder = new Builder(appPath)

if (ui) {
  console.log(chalk.green(`开始编译 UI 库`))
  builder.build({
    type: 'ui',
    watch,
    uiIndex
  })
  return
}

if (plugin) {
  if (typeof plugin === 'boolean') {
    plugin = BUILD_TYPES.WEAPP
  }
  builder.build({
    type: BUILD_TYPES.PLUGIN,
    platform: plugin,
    watch
  })
  return
}

if (!fs.existsSync(projectConfPath)) {
  console.log(chalk.red(`找不到项目配置文件${PROJECT_CONFIG}，请确定当前目录是Taro项目根目录!`))
  process.exit(1)
}

const projectConf = require(projectConfPath)(_.merge)
if (typeof page === 'string') {
  console.log(chalk.green(`开始编译页面 ${chalk.bold(page)}`))
} else if (typeof component === 'string') {
  console.log(chalk.green(`开始编译组件 ${chalk.bold(component)}`))
} else {
  console.log(chalk.green(`开始编译项目 ${chalk.bold(projectConf.projectName)}`))
}

builder.build({
  type,
  watch,
  port: typeof port === 'string' ? port : undefined,
  release: !!release,
  page,
  component
})
