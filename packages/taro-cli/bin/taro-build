#!/usr/bin/env node
const path = require('path')
const fs = require('fs-extra')
const program = require('commander')
const chalk = require('chalk')
const _ = require('lodash')

const build = require('../dist/build').default
const { PROJECT_CONFIG, BUILD_TYPES } = require('../dist/util/constants')
const projectConfPath = path.join(process.cwd(), PROJECT_CONFIG)
const { injectLogLevel } = require('../dist/util');
program
  .option('--log [logLevel]', 'print log level, info/warning/error')
  .option('--type [typeName]', 'Build type, weapp/swan/alipay/tt/h5/quickapp/rn/qq')
  .option('--watch', 'Watch mode')
  .option('--env [env]', 'Env type')
  .option('--ui', 'Build Taro UI library')
  .option('--plugin [typeName]', 'Build Taro plugin project, weapp')
  .option('--port [port]', 'Specified port')
  .parse(process.argv)

const args = program.args
const { type, watch, ui, port, log } = program
let { env, plugin } = program

env = process.env.NODE_ENV || env
injectLogLevel(log)
if (ui) {
  console.log(chalk.green(`开始编译 UI 库`))
  build(args, {
    type: 'ui',
    watch
  })
  return
}

if (plugin) {
  if (typeof plugin === 'boolean') {
    plugin = BUILD_TYPES.WEAPP
  }
  build(args, {
    type: BUILD_TYPES.PLUGIN,
    platform: plugin,
    watch
  })
  return
}

if (!fs.existsSync(projectConfPath)) {
  console.log(chalk.red(`找不到项目配置文件${PROJECT_CONFIG}，请确定当前目录是Taro项目根目录!`))
  process.exit(1)
}

if (env) {
  process.env.NODE_ENV = env
} else {
  if (watch) {
    process.env.NODE_ENV = 'development'
  } else {
    process.env.NODE_ENV = 'production'
  }
}

process.env.TARO_ENV = type

const projectConf = require(projectConfPath)(_.merge)
console.log(chalk.green(`开始编译项目 ${chalk.bold(projectConf.projectName)}`))

build(args, {
  type,
  watch,
  port: typeof port === 'string' ? port: undefined
})
