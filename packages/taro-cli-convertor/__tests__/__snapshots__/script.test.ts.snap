// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`page 页面转换 template 组件名转换 1`] = `
import withWeapp, { cacheOptions } from "@tarojs/with-weapp";
import { Block } from "@tarojs/components";
import React from "react";
import Taro from "@tarojs/taro";
import AnFishTmpl from 'taroConvert/src/imports/AnFishTmpl.js';
import ATmpl from 'taroConvert/src/imports/ATmpl.js';
import AshMerTmpl from 'taroConvert/src/imports/AshMerTmpl.js';
import AolTmpl from 'taroConvert/src/imports/AolTmpl.js';
import AshTmpl from 'taroConvert/src/imports/AshTmpl.js';
cacheOptions.setOptionsToCache({});
@withWeapp(cacheOptions.getOptionsFromCache())
class _C extends React.Component {
  render() {
    return <Block><AshTmpl></AshTmpl>{
        /*  template 的 name 值为首字母大写且单个单词  */
      }<AolTmpl></AolTmpl>{
        /*  template 的 name 值为首字母大写且多个单词  */
      }<AshMerTmpl></AshMerTmpl>{
        /*  template 的 name 值为单字母  */
      }<ATmpl></ATmpl>{
        /*  template 的 name 值为小驼峰  */
      }<AnFishTmpl></AnFishTmpl></Block>;
  }
}
export default _C;
`;

exports[`语法转换 使用新建的 setData 替换组件中 this.data.xx，实现 this.data.xx 的转换 1`] = `
import withWeapp, { cacheOptions } from "@tarojs/with-weapp";
import { Block } from "@tarojs/components";
import React from "react";
import Taro from "@tarojs/taro";
this.setData({
  intData: 1024
});
cacheOptions.setOptionsToCache({});
@withWeapp(cacheOptions.getOptionsFromCache())
class _C extends React.Component {
  render() {
    return null;
  }
}
export default _C;
`;

exports[`语法转换 支持 export from 语法，情况一：部分导入 1`] = `export { var1, func1 } from "./tools1.js";`;

exports[`语法转换 支持 export from 语法，情况二：全部导入 1`] = `export * from "./tools1.js";`;

exports[`语法转换 模版的动态名称转换 1`] = `
import withWeapp, { cacheOptions } from "@tarojs/with-weapp";
import { Block, View } from "@tarojs/components";
import React from "react";
import Taro from "@tarojs/taro";
this.setData({
  intData: 1024
});
cacheOptions.setOptionsToCache({});
const ComponentMap = {};
@withWeapp(cacheOptions.getOptionsFromCache())
class _C extends React.Component {
  render() {
    const {
      infoList
    } = this.data;
    return infoList.map((item, index) => {
      let ComponentName = ComponentMap["info-" + item.tempName];
      return <View key={item.infoId}><ComponentName data={{
          item: item
        }}></ComponentName></View>;
    });
  }
}
export default _C;
`;
