// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`小程序转换生成配置文件 配置文件生成 1`] = `
Map {
  /wxProject/taroConvert/package.json => {
  "name": "taroConvert",
  "version": "1.0.0",
  "private": true,
  "description": "",
  "templateInfo": {
    "name": "default",
    "typescript": false,
    "css": "sass"
  },
  "scripts": {
    "build:weapp": "taro build --type weapp",
    "build:swan": "taro build --type swan",
    "build:alipay": "taro build --type alipay",
    "build:tt": "taro build --type tt",
    "build:h5": "taro build --type h5",
    "build:rn": "taro build --type rn",
    "build:qq": "taro build --type qq",
    "build:jd": "taro build --type jd",
    "build:quickapp": "taro build --type quickapp",
    "build:mpharmony": "taro build --type mpharmony",
    "build:mpandroid": "taro build --type mpandroid",
    "dev:weapp": "npm run build:weapp -- --watch",
    "dev:swan": "npm run build:swan -- --watch",
    "dev:alipay": "npm run build:alipay -- --watch",
    "dev:tt": "npm run build:tt -- --watch",
    "dev:h5": "npm run build:h5 -- --watch",
    "dev:rn": "npm run build:rn -- --watch",
    "dev:qq": "npm run build:qq -- --watch",
    "dev:jd": "npm run build:jd -- --watch",
    "dev:quickapp": "npm run build:quickapp -- --watch",
    "dev:mpharmony": "npm run build:mpharmony -- --watch",
    "dev:mpandroid": "npm run build:mpandroid -- --watch",
    "test": "jest"
  },
  "browserslist": [
    "last 3 versions",
    "Android >= 4.1",
    "ios >= 8"
  ],
  "author": "",
  "dependencies": {
    "@babel/runtime": "^7.21.5",
    "@tarojs/components": "3.6.15",
    "@tarojs/helper": "3.6.15",
    "@tarojs/plugin-platform-weapp": "3.6.15",
    "@tarojs/plugin-platform-alipay": "3.6.15",
    "@tarojs/plugin-platform-tt": "3.6.15",
    "@tarojs/plugin-platform-swan": "3.6.15",
    "@tarojs/plugin-platform-jd": "3.6.15",
    "@tarojs/plugin-platform-qq": "3.6.15",
    "@tarojs/plugin-platform-h5": "3.6.15",
    "@tarojs/plugin-platform-mpharmony": "3.6.15",
    "@tarojs/plugin-platform-mpandroid": "3.6.15",
    "@tarojs/runtime": "3.6.15",
    "@tarojs/shared": "3.6.15",
    "@tarojs/taro": "3.6.15",
    "@tarojs/plugin-framework-react": "3.6.15",
    "@tarojs/react": "3.6.15",
    "react-dom": "^18.0.0",
    "react": "^18.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.8.0",
    "@tarojs/cli": "3.6.15",
    "@types/webpack-env": "^1.13.6",
    "@tarojs/test-utils-react": "^0.1.1",
    "@types/react": "^18.0.0",
    "webpack": "5.78.0",
    "@tarojs/taro-loader": "3.6.15",
    "@tarojs/webpack5-runner": "3.6.15",
    "babel-preset-taro": "3.6.15",
    "eslint-config-taro": "3.6.15",
    "eslint": "^8.12.0",
    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.5",
    "react-refresh": "^0.11.0",
    "eslint-plugin-react": "^7.8.2",
    "eslint-plugin-import": "^2.12.0",
    "eslint-plugin-react-hooks": "^4.2.0",
    "stylelint": "^14.4.0",
    "postcss": "^8.4.18",
    "ts-node": "^10.9.1",
    "@types/node": "^18.15.11",
    "@types/jest": "^29.3.1",
    "jest": "^29.3.1",
    "jest-environment-jsdom": "^29.5.0"
  }
}
,
  /wxProject/taroConvert/config/index.js => import { defineConfig } from '@tarojs/cli'

import devConfig from './dev'
import prodConfig from './prod'

// https://taro-docs.jd.com/docs/next/config#defineconfig-辅助函数
export default defineConfig(async (merge, { command, mode }) => {
  const baseConfig = {
    projectName: 'taroConvert',
    date: '2023-12-28',
    designWidth: 750,
    deviceRatio: {
      640: 2.34 / 2,
      750: 1,
      375: 2,
      828: 1.81 / 2
    },
    sourceRoot: 'src',
    outputRoot: 'dist',
    plugins: [],
    defineConstants: {
    },
    copy: {
      patterns: [
      ],
      options: {
      }
    },
    framework: 'react',
    compiler: 'webpack5',
    cache: {
      enable: false // Webpack 持久化缓存配置，建议开启。默认配置请参考：https://docs.taro.zone/docs/config-detail#cache
    },
    mini: {
      postcss: {
        pxtransform: {
          enable: true,
          config: {

          }
        },
        url: {
          enable: true,
          config: {
            limit: 1024 // 设定转换尺寸上限
          }
        },
        cssModules: {
          enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true
          config: {
            namingPattern: 'module', // 转换模式，取值为 global/module
            generateScopedName: '[name]__[local]___[hash:base64:5]'
          }
        }
      }
    },
    h5: {
      publicPath: '/',
      staticDirectory: 'static',
      output: {
        filename: 'js/[name].[hash:8].js',
        chunkFilename: 'js/[name].[chunkhash:8].js'
      },
      miniCssExtractPluginOption: {
        ignoreOrder: true,
        filename: 'css/[name].[hash].css',
        chunkFilename: 'css/[name].[chunkhash].css'
      },
      postcss: {
        autoprefixer: {
          enable: true,
          config: {}
        },
        cssModules: {
          enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true
          config: {
            namingPattern: 'module', // 转换模式，取值为 global/module
            generateScopedName: '[name]__[local]___[hash:base64:5]'
          }
        }
      }
    },
    rn: {
      appName: 'taroDemo',
      postcss: {
        cssModules: {
          enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true
        }
      }
    }
  }
  if (process.env.NODE_ENV === 'development') {
    // 本地开发构建配置（不混淆压缩）
    return merge({}, baseConfig, devConfig)
  }
  // 生产构建配置（默认开启压缩混淆等）
  return merge({}, baseConfig, prodConfig)
})
,
}
`;
