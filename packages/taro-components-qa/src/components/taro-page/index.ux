<!--
Licensed to the O2Team under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<template>
  <div style="width:100%; padding-bottom: {{showTabBar ? '110px': '0px'}};">
    <block if="enablepulldownrefresh">
      <refresh refreshing="{{isPageRefreshing}}" @refresh="onPullDownRefresh">
        <list @scroll="onPageScroll" @scrollbottom="onReachBottom">
          <list-item type='a'>
            <slot></slot>
          </list-item>
        </list>
      </refresh>
    </block>
    <block else>
        <block if="enablepagescroll">
          <list @scroll="onPageScroll" @scrollbottom="onReachBottom">
            <list-item type='a'>
              <slot></slot>
            </list-item>
          </list>
        </block>
        <block else>
          <slot></slot>
        </block>
    </block>
    <div class="taro-tabbar" if="{{showTabBar}}" style="background-color:{{tabBarData.backgroundColor ? tabBarData.backgroundColor : '#ffffff'}}">
      <div class="taro-tabbar_item" for="(index, item) in tabBarData.list" @click="onSelected(item, index)">
        <image src="{{ item.selected ? item.selectedIconPath : item.iconPath }}" />
        <text style="color:{{ item.selected ? tabBarData.selectedColor: tabBarData.color }};font-size: 20px;">
          {{item.text}}
        </text>
      </div>
    </div>
  </div>
</template>

<style>
  .taro-tabbar {
    border-style: solid;
    border-color: #ddd;
    border-top-width: 1px;
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 110px;
  }

  .taro-tabbar .taro-tabbar_item {
    flex: 1;
    margin: 10px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .taro-tabbar .taro-tabbar_item image {
    width: 45px;
    height: 45px;
  }

  .taro-tabbar .taro-tabbar_item a {
    margin: 10px;
    border: 1px solid #eeeeee;
  }
</style>

<script>
  import Taro from '@tarojs/taro-quickapp'

  const appGlobal = global || {}
  let globalRef = Object.getPrototypeOf(appGlobal) || appGlobal
  if (!Object.keys(appGlobal).length) {
    globalRef = Object.getPrototypeOf(globalRef)
  }
  globalRef.eventCenter = Taro.eventCenter
  function addLeadingSlash (str) {
    return str[0] === '/' ? str : `/${str}`
  }
  export default {
    props: {
      tabbar: {
        type: Object,
        required: false,
        default: null
      },
      pagepath: {
        type: String,
        required: false,
        default: ''
      },
      enablepulldownrefresh: {
        type: Boolean,
        required: false,
        default: false
      },
      enablepagescroll: {
        type: Boolean,
        required: false,
        default: false
      }
    },
    data () {
      let showTabBar = false
      if (this.tabbar && this.tabbar.list.length) {
        this.tabbar.list.forEach(item => {
          if (addLeadingSlash(item.pagePath) === addLeadingSlash(this.pagepath)) {
            showTabBar = true
          }
        })
      }
      return {
        showTabBar,
        isPageRefreshing: false,
        tabBarData: {}
      }
    },

    onInit () {
      globalRef.eventCenter.on('TaroPage:stopPullDownRefresh', () => {
        this.isPageRefreshing = false
      })
      globalRef.eventCenter.on('TaroPage:startPullDownRefresh', () => {
        this.isPageRefreshing = true
      })
      this.setTabBarData()
    },

    onShow () {
      this.setTabBarData()
    },

    setTabBarData () {
      const tabBarData = Object.assign({}, this.tabbar)
      if (this.tabbar && this.tabbar.list && this.tabbar.list.length) {
        tabBarData.backgroundColor = tabBarData.backgroundColor || '#fff'
        tabBarData.color = tabBarData.color || '#333'
        tabBarData.selectedColor = tabBarData.selectedColor || '#48adc4'
        tabBarData.list.forEach(item => {
          item.selected = false
          if (addLeadingSlash(item.pagePath) === addLeadingSlash(this.pagepath)) {
            item.selected = true
          }
          if (item.selectedIconPath) {
            item.selectedIconPath = addLeadingSlash(item.selectedIconPath.replace(/^[\.]?/, ''))
          }
          if (item.iconPath) {
            item.iconPath = addLeadingSlash(item.iconPath.replace(/^[\.]?/, ''))
          }
        })
        this.tabBarData = tabBarData
      }
    },

    onPullDownRefresh (e) {
      const pageInstance = this.$app.pageInstaceMap[this.pagepath]
      this.isPageRefreshing = e.refreshing
      if (pageInstance && pageInstance.onPullDownRefresh) {
        pageInstance.onPullDownRefresh(this)
      }
    },

    onPageScroll (e) {
      const pageInstance = this.$app.pageInstaceMap[this.pagepath]
      if (pageInstance && pageInstance.onPageScroll) {
        pageInstance.onPageScroll(e.scrollY)
      }
    },

    onReachBottom () {
      const pageInstance = this.$app.pageInstaceMap[this.pagepath]
      if (pageInstance && pageInstance.onReachBottom) {
        pageInstance.onReachBottom()
      }
    },

    onSelected (item, index) {
      const pageInstance = this.$app.pageInstaceMap[this.pagepath]
      if (pageInstance && pageInstance.onTabItemTap) {
        pageInstance.onTabItemTap({
          pagePath: item.pagePath,
          text: this.tabbar.list[index].text,
          index
        })
      }
      this.pagepath = item.pagePath
      Taro.redirectTo({
        url: item.pagePath
      })
    }
  }
</script>
