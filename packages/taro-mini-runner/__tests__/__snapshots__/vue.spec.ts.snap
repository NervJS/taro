// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vue should build vue app 1`] = `14`;

exports[`vue should build vue app 2`] = `
"
/** filePath: dist/app.js **/
/*! For license information please see app.js.LICENSE.txt */
require(\\"./runtime\\");

require(\\"./vendors\\");

require(\\"./taro\\");

(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 3 ], [ , , , , , , , , , , , function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    (function(window, global, document, setImmediate) {
        var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
        var emptyObject = Object.freeze({});
        function isUndef(v) {
            return v === undefined || v === null;
        }
        function isDef(v) {
            return v !== undefined && v !== null;
        }
        function isTrue(v) {
            return v === true;
        }
        function isFalse(v) {
            return v === false;
        }
        function isPrimitive(value) {
            return typeof value === \\"string\\" || typeof value === \\"number\\" || Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(value) === \\"symbol\\" || typeof value === \\"boolean\\";
        }
        function isObject(obj) {
            return obj !== null && Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(obj) === \\"object\\";
        }
        var _toString = Object.prototype.toString;
        function toRawType(value) {
            return _toString.call(value).slice(8, -1);
        }
        function isPlainObject(obj) {
            return _toString.call(obj) === \\"[object Object]\\";
        }
        function isRegExp(v) {
            return _toString.call(v) === \\"[object RegExp]\\";
        }
        function isValidArrayIndex(val) {
            var n = parseFloat(String(val));
            return n >= 0 && Math.floor(n) === n && isFinite(val);
        }
        function isPromise(val) {
            return isDef(val) && typeof val.then === \\"function\\" && typeof val.catch === \\"function\\";
        }
        function toString(val) {
            return val == null ? \\"\\" : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
        }
        function toNumber(val) {
            var n = parseFloat(val);
            return isNaN(n) ? val : n;
        }
        function makeMap(str, expectsLowerCase) {
            var map = Object.create(null);
            var list = str.split(\\",\\");
            for (var i = 0; i < list.length; i++) {
                map[list[i]] = true;
            }
            return expectsLowerCase ? function(val) {
                return map[val.toLowerCase()];
            } : function(val) {
                return map[val];
            };
        }
        var isBuiltInTag = makeMap(\\"slot,component\\", true);
        var isReservedAttribute = makeMap(\\"key,ref,slot,slot-scope,is\\");
        function remove(arr, item) {
            if (arr.length) {
                var index = arr.indexOf(item);
                if (index > -1) {
                    return arr.splice(index, 1);
                }
            }
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function hasOwn(obj, key) {
            return hasOwnProperty.call(obj, key);
        }
        function cached(fn) {
            var cache = Object.create(null);
            return function cachedFn(str) {
                var hit = cache[str];
                return hit || (cache[str] = fn(str));
            };
        }
        var camelizeRE = /-(\\\\w)/g;
        var camelize = cached((function(str) {
            return str.replace(camelizeRE, (function(_, c) {
                return c ? c.toUpperCase() : \\"\\";
            }));
        }));
        var capitalize = cached((function(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }));
        var hyphenateRE = /\\\\B([A-Z])/g;
        var hyphenate = cached((function(str) {
            return str.replace(hyphenateRE, \\"-$1\\").toLowerCase();
        }));
        function polyfillBind(fn, ctx) {
            function boundFn(a) {
                var l = arguments.length;
                return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
            }
            boundFn._length = fn.length;
            return boundFn;
        }
        function nativeBind(fn, ctx) {
            return fn.bind(ctx);
        }
        var bind = Function.prototype.bind ? nativeBind : polyfillBind;
        function toArray(list, start) {
            start = start || 0;
            var i = list.length - start;
            var ret = new Array(i);
            while (i--) {
                ret[i] = list[i + start];
            }
            return ret;
        }
        function extend(to, _from) {
            for (var key in _from) {
                to[key] = _from[key];
            }
            return to;
        }
        function toObject(arr) {
            var res = {};
            for (var i = 0; i < arr.length; i++) {
                if (arr[i]) {
                    extend(res, arr[i]);
                }
            }
            return res;
        }
        function noop(a, b, c) {}
        var no = function no(a, b, c) {
            return false;
        };
        var identity = function identity(_) {
            return _;
        };
        function looseEqual(a, b) {
            if (a === b) {
                return true;
            }
            var isObjectA = isObject(a);
            var isObjectB = isObject(b);
            if (isObjectA && isObjectB) {
                try {
                    var isArrayA = Array.isArray(a);
                    var isArrayB = Array.isArray(b);
                    if (isArrayA && isArrayB) {
                        return a.length === b.length && a.every((function(e, i) {
                            return looseEqual(e, b[i]);
                        }));
                    } else if (a instanceof Date && b instanceof Date) {
                        return a.getTime() === b.getTime();
                    } else if (!isArrayA && !isArrayB) {
                        var keysA = Object.keys(a);
                        var keysB = Object.keys(b);
                        return keysA.length === keysB.length && keysA.every((function(key) {
                            return looseEqual(a[key], b[key]);
                        }));
                    } else {
                        return false;
                    }
                } catch (e) {
                    return false;
                }
            } else if (!isObjectA && !isObjectB) {
                return String(a) === String(b);
            } else {
                return false;
            }
        }
        function looseIndexOf(arr, val) {
            for (var i = 0; i < arr.length; i++) {
                if (looseEqual(arr[i], val)) {
                    return i;
                }
            }
            return -1;
        }
        function once(fn) {
            var called = false;
            return function() {
                if (!called) {
                    called = true;
                    fn.apply(this, arguments);
                }
            };
        }
        var SSR_ATTR = \\"data-server-rendered\\";
        var ASSET_TYPES = [ \\"component\\", \\"directive\\", \\"filter\\" ];
        var LIFECYCLE_HOOKS = [ \\"beforeCreate\\", \\"created\\", \\"beforeMount\\", \\"mounted\\", \\"beforeUpdate\\", \\"updated\\", \\"beforeDestroy\\", \\"destroyed\\", \\"activated\\", \\"deactivated\\", \\"errorCaptured\\", \\"serverPrefetch\\" ];
        var config = {
            optionMergeStrategies: Object.create(null),
            silent: false,
            productionTip: \\"production\\" !== \\"production\\",
            devtools: \\"production\\" !== \\"production\\",
            performance: false,
            errorHandler: null,
            warnHandler: null,
            ignoredElements: [],
            keyCodes: Object.create(null),
            isReservedTag: no,
            isReservedAttr: no,
            isUnknownElement: no,
            getTagNamespace: noop,
            parsePlatformTagName: identity,
            mustUseProp: no,
            async: true,
            _lifecycleHooks: LIFECYCLE_HOOKS
        };
        var unicodeRegExp = /a-zA-Z\\\\u00B7\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u203F-\\\\u2040\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD/;
        function isReserved(str) {
            var c = (str + \\"\\").charCodeAt(0);
            return c === 36 || c === 95;
        }
        function def(obj, key, val, enumerable) {
            Object.defineProperty(obj, key, {
                value: val,
                enumerable: !!enumerable,
                writable: true,
                configurable: true
            });
        }
        var bailRE = new RegExp(\\"[^\\" + unicodeRegExp.source + \\".$_\\\\\\\\d]\\");
        function parsePath(path) {
            if (bailRE.test(path)) {
                return;
            }
            var segments = path.split(\\".\\");
            return function(obj) {
                for (var i = 0; i < segments.length; i++) {
                    if (!obj) {
                        return;
                    }
                    obj = obj[segments[i]];
                }
                return obj;
            };
        }
        var hasProto = \\"__proto__\\" in {};
        var inBrowser = typeof window !== \\"undefined\\";
        var inWeex = typeof WXEnvironment !== \\"undefined\\" && !!WXEnvironment.platform;
        var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
        var UA = inBrowser && window.navigator.userAgent.toLowerCase();
        var isIE = UA && /msie|trident/.test(UA);
        var isIE9 = UA && UA.indexOf(\\"msie 9.0\\") > 0;
        var isEdge = UA && UA.indexOf(\\"edge/\\") > 0;
        var isAndroid = UA && UA.indexOf(\\"android\\") > 0 || weexPlatform === \\"android\\";
        var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === \\"ios\\";
        var isChrome = UA && /chrome\\\\/\\\\d+/.test(UA) && !isEdge;
        var isPhantomJS = UA && /phantomjs/.test(UA);
        var isFF = UA && UA.match(/firefox\\\\/(\\\\d+)/);
        var nativeWatch = {}.watch;
        var supportsPassive = false;
        if (inBrowser) {
            try {
                var opts = {};
                Object.defineProperty(opts, \\"passive\\", {
                    get: function get() {
                        supportsPassive = true;
                    }
                });
                window.addEventListener(\\"test-passive\\", null, opts);
            } catch (e) {}
        }
        var _isServer;
        var isServerRendering = function isServerRendering() {
            if (_isServer === undefined) {
                if (!inBrowser && !inWeex && typeof global !== \\"undefined\\") {
                    _isServer = global[\\"process\\"] && global[\\"process\\"].env.VUE_ENV === \\"server\\";
                } else {
                    _isServer = false;
                }
            }
            return _isServer;
        };
        var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
        function isNative(Ctor) {
            return typeof Ctor === \\"function\\" && /native code/.test(Ctor.toString());
        }
        var hasSymbol = typeof Symbol !== \\"undefined\\" && isNative(Symbol) && typeof Reflect !== \\"undefined\\" && isNative(Reflect.ownKeys);
        var _Set;
        if (typeof Set !== \\"undefined\\" && isNative(Set)) {
            _Set = Set;
        } else {
            _Set = function() {
                function Set() {
                    this.set = Object.create(null);
                }
                Set.prototype.has = function has(key) {
                    return this.set[key] === true;
                };
                Set.prototype.add = function add(key) {
                    this.set[key] = true;
                };
                Set.prototype.clear = function clear() {
                    this.set = Object.create(null);
                };
                return Set;
            }();
        }
        var warn = noop;
        var tip = noop;
        var generateComponentTrace = noop;
        var formatComponentName = noop;
        if (false) {
            var repeat, classify, classifyRE, hasConsole;
        }
        var uid = 0;
        var Dep = function Dep() {
            this.id = uid++;
            this.subs = [];
        };
        Dep.prototype.addSub = function addSub(sub) {
            this.subs.push(sub);
        };
        Dep.prototype.removeSub = function removeSub(sub) {
            remove(this.subs, sub);
        };
        Dep.prototype.depend = function depend() {
            if (Dep.target) {
                Dep.target.addDep(this);
            }
        };
        Dep.prototype.notify = function notify() {
            var subs = this.subs.slice();
            if (false) {}
            for (var i = 0, l = subs.length; i < l; i++) {
                subs[i].update();
            }
        };
        Dep.target = null;
        var targetStack = [];
        function pushTarget(target) {
            targetStack.push(target);
            Dep.target = target;
        }
        function popTarget() {
            targetStack.pop();
            Dep.target = targetStack[targetStack.length - 1];
        }
        var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
            this.tag = tag;
            this.data = data;
            this.children = children;
            this.text = text;
            this.elm = elm;
            this.ns = undefined;
            this.context = context;
            this.fnContext = undefined;
            this.fnOptions = undefined;
            this.fnScopeId = undefined;
            this.key = data && data.key;
            this.componentOptions = componentOptions;
            this.componentInstance = undefined;
            this.parent = undefined;
            this.raw = false;
            this.isStatic = false;
            this.isRootInsert = true;
            this.isComment = false;
            this.isCloned = false;
            this.isOnce = false;
            this.asyncFactory = asyncFactory;
            this.asyncMeta = undefined;
            this.isAsyncPlaceholder = false;
        };
        var prototypeAccessors = {
            child: {
                configurable: true
            }
        };
        prototypeAccessors.child.get = function() {
            return this.componentInstance;
        };
        Object.defineProperties(VNode.prototype, prototypeAccessors);
        var createEmptyVNode = function createEmptyVNode(text) {
            if (text === void 0) text = \\"\\";
            var node = new VNode;
            node.text = text;
            node.isComment = true;
            return node;
        };
        function createTextVNode(val) {
            return new VNode(undefined, undefined, undefined, String(val));
        }
        function cloneVNode(vnode) {
            var cloned = new VNode(vnode.tag, vnode.data, vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
            cloned.ns = vnode.ns;
            cloned.isStatic = vnode.isStatic;
            cloned.key = vnode.key;
            cloned.isComment = vnode.isComment;
            cloned.fnContext = vnode.fnContext;
            cloned.fnOptions = vnode.fnOptions;
            cloned.fnScopeId = vnode.fnScopeId;
            cloned.asyncMeta = vnode.asyncMeta;
            cloned.isCloned = true;
            return cloned;
        }
        var arrayProto = Array.prototype;
        var arrayMethods = Object.create(arrayProto);
        var methodsToPatch = [ \\"push\\", \\"pop\\", \\"shift\\", \\"unshift\\", \\"splice\\", \\"sort\\", \\"reverse\\" ];
        methodsToPatch.forEach((function(method) {
            var original = arrayProto[method];
            def(arrayMethods, method, (function mutator() {
                var args = [], len = arguments.length;
                while (len--) {
                    args[len] = arguments[len];
                }
                var result = original.apply(this, args);
                var ob = this.__ob__;
                var inserted;
                switch (method) {
                  case \\"push\\":
                  case \\"unshift\\":
                    inserted = args;
                    break;

                  case \\"splice\\":
                    inserted = args.slice(2);
                    break;
                }
                if (inserted) {
                    ob.observeArray(inserted);
                }
                ob.dep.notify();
                return result;
            }));
        }));
        var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
        var shouldObserve = true;
        function toggleObserving(value) {
            shouldObserve = value;
        }
        var Observer = function Observer(value) {
            this.value = value;
            this.dep = new Dep;
            this.vmCount = 0;
            def(value, \\"__ob__\\", this);
            if (Array.isArray(value)) {
                if (hasProto) {
                    protoAugment(value, arrayMethods);
                } else {
                    copyAugment(value, arrayMethods, arrayKeys);
                }
                this.observeArray(value);
            } else {
                this.walk(value);
            }
        };
        Observer.prototype.walk = function walk(obj) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length; i++) {
                defineReactive$$1(obj, keys[i]);
            }
        };
        Observer.prototype.observeArray = function observeArray(items) {
            for (var i = 0, l = items.length; i < l; i++) {
                observe(items[i]);
            }
        };
        function protoAugment(target, src) {
            target.__proto__ = src;
        }
        function copyAugment(target, src, keys) {
            for (var i = 0, l = keys.length; i < l; i++) {
                var key = keys[i];
                def(target, key, src[key]);
            }
        }
        function observe(value, asRootData) {
            if (!isObject(value) || value instanceof VNode) {
                return;
            }
            var ob;
            if (hasOwn(value, \\"__ob__\\") && value.__ob__ instanceof Observer) {
                ob = value.__ob__;
            } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
                ob = new Observer(value);
            }
            if (asRootData && ob) {
                ob.vmCount++;
            }
            return ob;
        }
        function defineReactive$$1(obj, key, val, customSetter, shallow) {
            var dep = new Dep;
            var property = Object.getOwnPropertyDescriptor(obj, key);
            if (property && property.configurable === false) {
                return;
            }
            var getter = property && property.get;
            var setter = property && property.set;
            if ((!getter || setter) && arguments.length === 2) {
                val = obj[key];
            }
            var childOb = !shallow && observe(val);
            Object.defineProperty(obj, key, {
                enumerable: true,
                configurable: true,
                get: function reactiveGetter() {
                    var value = getter ? getter.call(obj) : val;
                    if (Dep.target) {
                        dep.depend();
                        if (childOb) {
                            childOb.dep.depend();
                            if (Array.isArray(value)) {
                                dependArray(value);
                            }
                        }
                    }
                    return value;
                },
                set: function reactiveSetter(newVal) {
                    var value = getter ? getter.call(obj) : val;
                    if (newVal === value || newVal !== newVal && value !== value) {
                        return;
                    }
                    if (false) {}
                    if (getter && !setter) {
                        return;
                    }
                    if (setter) {
                        setter.call(obj, newVal);
                    } else {
                        val = newVal;
                    }
                    childOb = !shallow && observe(newVal);
                    dep.notify();
                }
            });
        }
        function set(target, key, val) {
            if (false) {}
            if (Array.isArray(target) && isValidArrayIndex(key)) {
                target.length = Math.max(target.length, key);
                target.splice(key, 1, val);
                return val;
            }
            if (key in target && !(key in Object.prototype)) {
                target[key] = val;
                return val;
            }
            var ob = target.__ob__;
            if (target._isVue || ob && ob.vmCount) {
                false && false;
                return val;
            }
            if (!ob) {
                target[key] = val;
                return val;
            }
            defineReactive$$1(ob.value, key, val);
            ob.dep.notify();
            return val;
        }
        function del(target, key) {
            if (false) {}
            if (Array.isArray(target) && isValidArrayIndex(key)) {
                target.splice(key, 1);
                return;
            }
            var ob = target.__ob__;
            if (target._isVue || ob && ob.vmCount) {
                false && false;
                return;
            }
            if (!hasOwn(target, key)) {
                return;
            }
            delete target[key];
            if (!ob) {
                return;
            }
            ob.dep.notify();
        }
        function dependArray(value) {
            for (var e = void 0, i = 0, l = value.length; i < l; i++) {
                e = value[i];
                e && e.__ob__ && e.__ob__.dep.depend();
                if (Array.isArray(e)) {
                    dependArray(e);
                }
            }
        }
        var strats = config.optionMergeStrategies;
        if (false) {}
        function mergeData(to, from) {
            if (!from) {
                return to;
            }
            var key, toVal, fromVal;
            var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);
            for (var i = 0; i < keys.length; i++) {
                key = keys[i];
                if (key === \\"__ob__\\") {
                    continue;
                }
                toVal = to[key];
                fromVal = from[key];
                if (!hasOwn(to, key)) {
                    set(to, key, fromVal);
                } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
                    mergeData(toVal, fromVal);
                }
            }
            return to;
        }
        function mergeDataOrFn(parentVal, childVal, vm) {
            if (!vm) {
                if (!childVal) {
                    return parentVal;
                }
                if (!parentVal) {
                    return childVal;
                }
                return function mergedDataFn() {
                    return mergeData(typeof childVal === \\"function\\" ? childVal.call(this, this) : childVal, typeof parentVal === \\"function\\" ? parentVal.call(this, this) : parentVal);
                };
            } else {
                return function mergedInstanceDataFn() {
                    var instanceData = typeof childVal === \\"function\\" ? childVal.call(vm, vm) : childVal;
                    var defaultData = typeof parentVal === \\"function\\" ? parentVal.call(vm, vm) : parentVal;
                    if (instanceData) {
                        return mergeData(instanceData, defaultData);
                    } else {
                        return defaultData;
                    }
                };
            }
        }
        strats.data = function(parentVal, childVal, vm) {
            if (!vm) {
                if (childVal && typeof childVal !== \\"function\\") {
                    false && false;
                    return parentVal;
                }
                return mergeDataOrFn(parentVal, childVal);
            }
            return mergeDataOrFn(parentVal, childVal, vm);
        };
        function mergeHook(parentVal, childVal) {
            var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [ childVal ] : parentVal;
            return res ? dedupeHooks(res) : res;
        }
        function dedupeHooks(hooks) {
            var res = [];
            for (var i = 0; i < hooks.length; i++) {
                if (res.indexOf(hooks[i]) === -1) {
                    res.push(hooks[i]);
                }
            }
            return res;
        }
        LIFECYCLE_HOOKS.forEach((function(hook) {
            strats[hook] = mergeHook;
        }));
        function mergeAssets(parentVal, childVal, vm, key) {
            var res = Object.create(parentVal || null);
            if (childVal) {
                false && false;
                return extend(res, childVal);
            } else {
                return res;
            }
        }
        ASSET_TYPES.forEach((function(type) {
            strats[type + \\"s\\"] = mergeAssets;
        }));
        strats.watch = function(parentVal, childVal, vm, key) {
            if (parentVal === nativeWatch) {
                parentVal = undefined;
            }
            if (childVal === nativeWatch) {
                childVal = undefined;
            }
            if (!childVal) {
                return Object.create(parentVal || null);
            }
            if (false) {}
            if (!parentVal) {
                return childVal;
            }
            var ret = {};
            extend(ret, parentVal);
            for (var key$1 in childVal) {
                var parent = ret[key$1];
                var child = childVal[key$1];
                if (parent && !Array.isArray(parent)) {
                    parent = [ parent ];
                }
                ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [ child ];
            }
            return ret;
        };
        strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
            if (childVal && \\"production\\" !== \\"production\\") {
                assertObjectType(key, childVal, vm);
            }
            if (!parentVal) {
                return childVal;
            }
            var ret = Object.create(null);
            extend(ret, parentVal);
            if (childVal) {
                extend(ret, childVal);
            }
            return ret;
        };
        strats.provide = mergeDataOrFn;
        var defaultStrat = function defaultStrat(parentVal, childVal) {
            return childVal === undefined ? parentVal : childVal;
        };
        function checkComponents(options) {
            for (var key in options.components) {
                validateComponentName(key);
            }
        }
        function validateComponentName(name) {
            if (!new RegExp(\\"^[a-zA-Z][\\\\\\\\-\\\\\\\\.0-9_\\" + unicodeRegExp.source + \\"]*$\\").test(name)) {
                warn('Invalid component name: \\"' + name + '\\". Component names ' + \\"should conform to valid custom element name in html5 specification.\\");
            }
            if (isBuiltInTag(name) || config.isReservedTag(name)) {
                warn(\\"Do not use built-in or reserved HTML elements as component \\" + \\"id: \\" + name);
            }
        }
        function normalizeProps(options, vm) {
            var props = options.props;
            if (!props) {
                return;
            }
            var res = {};
            var i, val, name;
            if (Array.isArray(props)) {
                i = props.length;
                while (i--) {
                    val = props[i];
                    if (typeof val === \\"string\\") {
                        name = camelize(val);
                        res[name] = {
                            type: null
                        };
                    } else if (false) {}
                }
            } else if (isPlainObject(props)) {
                for (var key in props) {
                    val = props[key];
                    name = camelize(key);
                    res[name] = isPlainObject(val) ? val : {
                        type: val
                    };
                }
            } else if (false) {}
            options.props = res;
        }
        function normalizeInject(options, vm) {
            var inject = options.inject;
            if (!inject) {
                return;
            }
            var normalized = options.inject = {};
            if (Array.isArray(inject)) {
                for (var i = 0; i < inject.length; i++) {
                    normalized[inject[i]] = {
                        from: inject[i]
                    };
                }
            } else if (isPlainObject(inject)) {
                for (var key in inject) {
                    var val = inject[key];
                    normalized[key] = isPlainObject(val) ? extend({
                        from: key
                    }, val) : {
                        from: val
                    };
                }
            } else if (false) {}
        }
        function normalizeDirectives(options) {
            var dirs = options.directives;
            if (dirs) {
                for (var key in dirs) {
                    var def$$1 = dirs[key];
                    if (typeof def$$1 === \\"function\\") {
                        dirs[key] = {
                            bind: def$$1,
                            update: def$$1
                        };
                    }
                }
            }
        }
        function assertObjectType(name, value, vm) {
            if (!isPlainObject(value)) {
                warn('Invalid value for option \\"' + name + '\\": expected an Object, ' + \\"but got \\" + toRawType(value) + \\".\\", vm);
            }
        }
        function mergeOptions(parent, child, vm) {
            if (false) {}
            if (typeof child === \\"function\\") {
                child = child.options;
            }
            normalizeProps(child, vm);
            normalizeInject(child, vm);
            normalizeDirectives(child);
            if (!child._base) {
                if (child.extends) {
                    parent = mergeOptions(parent, child.extends, vm);
                }
                if (child.mixins) {
                    for (var i = 0, l = child.mixins.length; i < l; i++) {
                        parent = mergeOptions(parent, child.mixins[i], vm);
                    }
                }
            }
            var options = {};
            var key;
            for (key in parent) {
                mergeField(key);
            }
            for (key in child) {
                if (!hasOwn(parent, key)) {
                    mergeField(key);
                }
            }
            function mergeField(key) {
                var strat = strats[key] || defaultStrat;
                options[key] = strat(parent[key], child[key], vm, key);
            }
            return options;
        }
        function resolveAsset(options, type, id, warnMissing) {
            if (typeof id !== \\"string\\") {
                return;
            }
            var assets = options[type];
            if (hasOwn(assets, id)) {
                return assets[id];
            }
            var camelizedId = camelize(id);
            if (hasOwn(assets, camelizedId)) {
                return assets[camelizedId];
            }
            var PascalCaseId = capitalize(camelizedId);
            if (hasOwn(assets, PascalCaseId)) {
                return assets[PascalCaseId];
            }
            var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
            if (false) {}
            return res;
        }
        function validateProp(key, propOptions, propsData, vm) {
            var prop = propOptions[key];
            var absent = !hasOwn(propsData, key);
            var value = propsData[key];
            var booleanIndex = getTypeIndex(Boolean, prop.type);
            if (booleanIndex > -1) {
                if (absent && !hasOwn(prop, \\"default\\")) {
                    value = false;
                } else if (value === \\"\\" || value === hyphenate(key)) {
                    var stringIndex = getTypeIndex(String, prop.type);
                    if (stringIndex < 0 || booleanIndex < stringIndex) {
                        value = true;
                    }
                }
            }
            if (value === undefined) {
                value = getPropDefaultValue(vm, prop, key);
                var prevShouldObserve = shouldObserve;
                toggleObserving(true);
                observe(value);
                toggleObserving(prevShouldObserve);
            }
            if (false) {}
            return value;
        }
        function getPropDefaultValue(vm, prop, key) {
            if (!hasOwn(prop, \\"default\\")) {
                return undefined;
            }
            var def = prop.default;
            if (false) {}
            if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
                return vm._props[key];
            }
            return typeof def === \\"function\\" && getType(prop.type) !== \\"Function\\" ? def.call(vm) : def;
        }
        function assertProp(prop, name, value, vm, absent) {
            if (prop.required && absent) {
                warn('Missing required prop: \\"' + name + '\\"', vm);
                return;
            }
            if (value == null && !prop.required) {
                return;
            }
            var type = prop.type;
            var valid = !type || type === true;
            var expectedTypes = [];
            if (type) {
                if (!Array.isArray(type)) {
                    type = [ type ];
                }
                for (var i = 0; i < type.length && !valid; i++) {
                    var assertedType = assertType(value, type[i]);
                    expectedTypes.push(assertedType.expectedType || \\"\\");
                    valid = assertedType.valid;
                }
            }
            if (!valid) {
                warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
                return;
            }
            var validator = prop.validator;
            if (validator) {
                if (!validator(value)) {
                    warn('Invalid prop: custom validator check failed for prop \\"' + name + '\\".', vm);
                }
            }
        }
        var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;
        function assertType(value, type) {
            var valid;
            var expectedType = getType(type);
            if (simpleCheckRE.test(expectedType)) {
                var t = Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(value);
                valid = t === expectedType.toLowerCase();
                if (!valid && t === \\"object\\") {
                    valid = value instanceof type;
                }
            } else if (expectedType === \\"Object\\") {
                valid = isPlainObject(value);
            } else if (expectedType === \\"Array\\") {
                valid = Array.isArray(value);
            } else {
                valid = value instanceof type;
            }
            return {
                valid: valid,
                expectedType: expectedType
            };
        }
        function getType(fn) {
            var match = fn && fn.toString().match(/^\\\\s*function (\\\\w+)/);
            return match ? match[1] : \\"\\";
        }
        function isSameType(a, b) {
            return getType(a) === getType(b);
        }
        function getTypeIndex(type, expectedTypes) {
            if (!Array.isArray(expectedTypes)) {
                return isSameType(expectedTypes, type) ? 0 : -1;
            }
            for (var i = 0, len = expectedTypes.length; i < len; i++) {
                if (isSameType(expectedTypes[i], type)) {
                    return i;
                }
            }
            return -1;
        }
        function getInvalidTypeMessage(name, value, expectedTypes) {
            var message = 'Invalid prop: type check failed for prop \\"' + name + '\\".' + \\" Expected \\" + expectedTypes.map(capitalize).join(\\", \\");
            var expectedType = expectedTypes[0];
            var receivedType = toRawType(value);
            var expectedValue = styleValue(value, expectedType);
            var receivedValue = styleValue(value, receivedType);
            if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
                message += \\" with value \\" + expectedValue;
            }
            message += \\", got \\" + receivedType + \\" \\";
            if (isExplicable(receivedType)) {
                message += \\"with value \\" + receivedValue + \\".\\";
            }
            return message;
        }
        function styleValue(value, type) {
            if (type === \\"String\\") {
                return '\\"' + value + '\\"';
            } else if (type === \\"Number\\") {
                return \\"\\" + Number(value);
            } else {
                return \\"\\" + value;
            }
        }
        function isExplicable(value) {
            var explicitTypes = [ \\"string\\", \\"number\\", \\"boolean\\" ];
            return explicitTypes.some((function(elem) {
                return value.toLowerCase() === elem;
            }));
        }
        function isBoolean() {
            var args = [], len = arguments.length;
            while (len--) {
                args[len] = arguments[len];
            }
            return args.some((function(elem) {
                return elem.toLowerCase() === \\"boolean\\";
            }));
        }
        function handleError(err, vm, info) {
            pushTarget();
            try {
                if (vm) {
                    var cur = vm;
                    while (cur = cur.$parent) {
                        var hooks = cur.$options.errorCaptured;
                        if (hooks) {
                            for (var i = 0; i < hooks.length; i++) {
                                try {
                                    var capture = hooks[i].call(cur, err, vm, info) === false;
                                    if (capture) {
                                        return;
                                    }
                                } catch (e) {
                                    globalHandleError(e, cur, \\"errorCaptured hook\\");
                                }
                            }
                        }
                    }
                }
                globalHandleError(err, vm, info);
            } finally {
                popTarget();
            }
        }
        function invokeWithErrorHandling(handler, context, args, vm, info) {
            var res;
            try {
                res = args ? handler.apply(context, args) : handler.call(context);
                if (res && !res._isVue && isPromise(res) && !res._handled) {
                    res.catch((function(e) {
                        return handleError(e, vm, info + \\" (Promise/async)\\");
                    }));
                    res._handled = true;
                }
            } catch (e) {
                handleError(e, vm, info);
            }
            return res;
        }
        function globalHandleError(err, vm, info) {
            if (config.errorHandler) {
                try {
                    return config.errorHandler.call(null, err, vm, info);
                } catch (e) {
                    if (e !== err) {
                        logError(e, null, \\"config.errorHandler\\");
                    }
                }
            }
            logError(err, vm, info);
        }
        function logError(err, vm, info) {
            if (false) {}
            if ((inBrowser || inWeex) && typeof console !== \\"undefined\\") {
                console.error(err);
            } else {
                throw err;
            }
        }
        var isUsingMicroTask = false;
        var callbacks = [];
        var pending = false;
        function flushCallbacks() {
            pending = false;
            var copies = callbacks.slice(0);
            callbacks.length = 0;
            for (var i = 0; i < copies.length; i++) {
                copies[i]();
            }
        }
        var timerFunc;
        if (typeof Promise !== \\"undefined\\" && isNative(Promise)) {
            var p = Promise.resolve();
            timerFunc = function timerFunc() {
                p.then(flushCallbacks);
                if (isIOS) {
                    setTimeout(noop);
                }
            };
            isUsingMicroTask = true;
        } else if (!isIE && typeof MutationObserver !== \\"undefined\\" && (isNative(MutationObserver) || MutationObserver.toString() === \\"[object MutationObserverConstructor]\\")) {
            var counter = 1;
            var observer = new MutationObserver(flushCallbacks);
            var textNode = document.createTextNode(String(counter));
            observer.observe(textNode, {
                characterData: true
            });
            timerFunc = function timerFunc() {
                counter = (counter + 1) % 2;
                textNode.data = String(counter);
            };
            isUsingMicroTask = true;
        } else if (typeof setImmediate !== \\"undefined\\" && isNative(setImmediate)) {
            timerFunc = function timerFunc() {
                setImmediate(flushCallbacks);
            };
        } else {
            timerFunc = function timerFunc() {
                setTimeout(flushCallbacks, 0);
            };
        }
        function nextTick(cb, ctx) {
            var _resolve;
            callbacks.push((function() {
                if (cb) {
                    try {
                        cb.call(ctx);
                    } catch (e) {
                        handleError(e, ctx, \\"nextTick\\");
                    }
                } else if (_resolve) {
                    _resolve(ctx);
                }
            }));
            if (!pending) {
                pending = true;
                timerFunc();
            }
            if (!cb && typeof Promise !== \\"undefined\\") {
                return new Promise((function(resolve) {
                    _resolve = resolve;
                }));
            }
        }
        var initProxy;
        if (false) {
            var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnReservedPrefix, warnNonPresent, allowedGlobals;
        }
        var seenObjects = new _Set;
        function traverse(val) {
            _traverse(val, seenObjects);
            seenObjects.clear();
        }
        function _traverse(val, seen) {
            var i, keys;
            var isA = Array.isArray(val);
            if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
                return;
            }
            if (val.__ob__) {
                var depId = val.__ob__.dep.id;
                if (seen.has(depId)) {
                    return;
                }
                seen.add(depId);
            }
            if (isA) {
                i = val.length;
                while (i--) {
                    _traverse(val[i], seen);
                }
            } else {
                keys = Object.keys(val);
                i = keys.length;
                while (i--) {
                    _traverse(val[keys[i]], seen);
                }
            }
        }
        var mark;
        var measure;
        if (false) {
            var perf;
        }
        var normalizeEvent = cached((function(name) {
            var passive = name.charAt(0) === \\"&\\";
            name = passive ? name.slice(1) : name;
            var once$$1 = name.charAt(0) === \\"~\\";
            name = once$$1 ? name.slice(1) : name;
            var capture = name.charAt(0) === \\"!\\";
            name = capture ? name.slice(1) : name;
            return {
                name: name,
                once: once$$1,
                capture: capture,
                passive: passive
            };
        }));
        function createFnInvoker(fns, vm) {
            function invoker() {
                var arguments$1 = arguments;
                var fns = invoker.fns;
                if (Array.isArray(fns)) {
                    var cloned = fns.slice();
                    for (var i = 0; i < cloned.length; i++) {
                        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \\"v-on handler\\");
                    }
                } else {
                    return invokeWithErrorHandling(fns, null, arguments, vm, \\"v-on handler\\");
                }
            }
            invoker.fns = fns;
            return invoker;
        }
        function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
            var name, def$$1, cur, old, event;
            for (name in on) {
                def$$1 = cur = on[name];
                old = oldOn[name];
                event = normalizeEvent(name);
                if (isUndef(cur)) {
                    false && false;
                } else if (isUndef(old)) {
                    if (isUndef(cur.fns)) {
                        cur = on[name] = createFnInvoker(cur, vm);
                    }
                    if (isTrue(event.once)) {
                        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
                    }
                    add(event.name, cur, event.capture, event.passive, event.params);
                } else if (cur !== old) {
                    old.fns = cur;
                    on[name] = old;
                }
            }
            for (name in oldOn) {
                if (isUndef(on[name])) {
                    event = normalizeEvent(name);
                    remove$$1(event.name, oldOn[name], event.capture);
                }
            }
        }
        function mergeVNodeHook(def, hookKey, hook) {
            if (def instanceof VNode) {
                def = def.data.hook || (def.data.hook = {});
            }
            var invoker;
            var oldHook = def[hookKey];
            function wrappedHook() {
                hook.apply(this, arguments);
                remove(invoker.fns, wrappedHook);
            }
            if (isUndef(oldHook)) {
                invoker = createFnInvoker([ wrappedHook ]);
            } else {
                if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
                    invoker = oldHook;
                    invoker.fns.push(wrappedHook);
                } else {
                    invoker = createFnInvoker([ oldHook, wrappedHook ]);
                }
            }
            invoker.merged = true;
            def[hookKey] = invoker;
        }
        function extractPropsFromVNodeData(data, Ctor, tag) {
            var propOptions = Ctor.options.props;
            if (isUndef(propOptions)) {
                return;
            }
            var res = {};
            var attrs = data.attrs;
            var props = data.props;
            if (isDef(attrs) || isDef(props)) {
                for (var key in propOptions) {
                    var altKey = hyphenate(key);
                    if (false) {
                        var keyInLowerCase;
                    }
                    checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
                }
            }
            return res;
        }
        function checkProp(res, hash, key, altKey, preserve) {
            if (isDef(hash)) {
                if (hasOwn(hash, key)) {
                    res[key] = hash[key];
                    if (!preserve) {
                        delete hash[key];
                    }
                    return true;
                } else if (hasOwn(hash, altKey)) {
                    res[key] = hash[altKey];
                    if (!preserve) {
                        delete hash[altKey];
                    }
                    return true;
                }
            }
            return false;
        }
        function simpleNormalizeChildren(children) {
            for (var i = 0; i < children.length; i++) {
                if (Array.isArray(children[i])) {
                    return Array.prototype.concat.apply([], children);
                }
            }
            return children;
        }
        function normalizeChildren(children) {
            return isPrimitive(children) ? [ createTextVNode(children) ] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
        }
        function isTextNode(node) {
            return isDef(node) && isDef(node.text) && isFalse(node.isComment);
        }
        function normalizeArrayChildren(children, nestedIndex) {
            var res = [];
            var i, c, lastIndex, last;
            for (i = 0; i < children.length; i++) {
                c = children[i];
                if (isUndef(c) || typeof c === \\"boolean\\") {
                    continue;
                }
                lastIndex = res.length - 1;
                last = res[lastIndex];
                if (Array.isArray(c)) {
                    if (c.length > 0) {
                        c = normalizeArrayChildren(c, (nestedIndex || \\"\\") + \\"_\\" + i);
                        if (isTextNode(c[0]) && isTextNode(last)) {
                            res[lastIndex] = createTextVNode(last.text + c[0].text);
                            c.shift();
                        }
                        res.push.apply(res, c);
                    }
                } else if (isPrimitive(c)) {
                    if (isTextNode(last)) {
                        res[lastIndex] = createTextVNode(last.text + c);
                    } else if (c !== \\"\\") {
                        res.push(createTextVNode(c));
                    }
                } else {
                    if (isTextNode(c) && isTextNode(last)) {
                        res[lastIndex] = createTextVNode(last.text + c.text);
                    } else {
                        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
                            c.key = \\"__vlist\\" + nestedIndex + \\"_\\" + i + \\"__\\";
                        }
                        res.push(c);
                    }
                }
            }
            return res;
        }
        function initProvide(vm) {
            var provide = vm.$options.provide;
            if (provide) {
                vm._provided = typeof provide === \\"function\\" ? provide.call(vm) : provide;
            }
        }
        function initInjections(vm) {
            var result = resolveInject(vm.$options.inject, vm);
            if (result) {
                toggleObserving(false);
                Object.keys(result).forEach((function(key) {
                    if (false) {} else {
                        defineReactive$$1(vm, key, result[key]);
                    }
                }));
                toggleObserving(true);
            }
        }
        function resolveInject(inject, vm) {
            if (inject) {
                var result = Object.create(null);
                var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (key === \\"__ob__\\") {
                        continue;
                    }
                    var provideKey = inject[key].from;
                    var source = vm;
                    while (source) {
                        if (source._provided && hasOwn(source._provided, provideKey)) {
                            result[key] = source._provided[provideKey];
                            break;
                        }
                        source = source.$parent;
                    }
                    if (!source) {
                        if (\\"default\\" in inject[key]) {
                            var provideDefault = inject[key].default;
                            result[key] = typeof provideDefault === \\"function\\" ? provideDefault.call(vm) : provideDefault;
                        } else if (false) {}
                    }
                }
                return result;
            }
        }
        function resolveSlots(children, context) {
            if (!children || !children.length) {
                return {};
            }
            var slots = {};
            for (var i = 0, l = children.length; i < l; i++) {
                var child = children[i];
                var data = child.data;
                if (data && data.attrs && data.attrs.slot) {
                    delete data.attrs.slot;
                }
                if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
                    var name = data.slot;
                    var slot = slots[name] || (slots[name] = []);
                    if (child.tag === \\"template\\") {
                        slot.push.apply(slot, child.children || []);
                    } else {
                        slot.push(child);
                    }
                } else {
                    (slots.default || (slots.default = [])).push(child);
                }
            }
            for (var name$1 in slots) {
                if (slots[name$1].every(isWhitespace)) {
                    delete slots[name$1];
                }
            }
            return slots;
        }
        function isWhitespace(node) {
            return node.isComment && !node.asyncFactory || node.text === \\" \\";
        }
        function normalizeScopedSlots(slots, normalSlots, prevSlots) {
            var res;
            var hasNormalSlots = Object.keys(normalSlots).length > 0;
            var isStable = slots ? !!slots.$stable : !hasNormalSlots;
            var key = slots && slots.$key;
            if (!slots) {
                res = {};
            } else if (slots._normalized) {
                return slots._normalized;
            } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
                return prevSlots;
            } else {
                res = {};
                for (var key$1 in slots) {
                    if (slots[key$1] && key$1[0] !== \\"$\\") {
                        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
                    }
                }
            }
            for (var key$2 in normalSlots) {
                if (!(key$2 in res)) {
                    res[key$2] = proxyNormalSlot(normalSlots, key$2);
                }
            }
            if (slots && Object.isExtensible(slots)) {
                slots._normalized = res;
            }
            def(res, \\"$stable\\", isStable);
            def(res, \\"$key\\", key);
            def(res, \\"$hasNormal\\", hasNormalSlots);
            return res;
        }
        function normalizeScopedSlot(normalSlots, key, fn) {
            var normalized = function normalized() {
                var res = arguments.length ? fn.apply(null, arguments) : fn({});
                res = res && Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(res) === \\"object\\" && !Array.isArray(res) ? [ res ] : normalizeChildren(res);
                return res && (res.length === 0 || res.length === 1 && res[0].isComment) ? undefined : res;
            };
            if (fn.proxy) {
                Object.defineProperty(normalSlots, key, {
                    get: normalized,
                    enumerable: true,
                    configurable: true
                });
            }
            return normalized;
        }
        function proxyNormalSlot(slots, key) {
            return function() {
                return slots[key];
            };
        }
        function renderList(val, render) {
            var ret, i, l, keys, key;
            if (Array.isArray(val) || typeof val === \\"string\\") {
                ret = new Array(val.length);
                for (i = 0, l = val.length; i < l; i++) {
                    ret[i] = render(val[i], i);
                }
            } else if (typeof val === \\"number\\") {
                ret = new Array(val);
                for (i = 0; i < val; i++) {
                    ret[i] = render(i + 1, i);
                }
            } else if (isObject(val)) {
                if (hasSymbol && val[Symbol.iterator]) {
                    ret = [];
                    var iterator = val[Symbol.iterator]();
                    var result = iterator.next();
                    while (!result.done) {
                        ret.push(render(result.value, ret.length));
                        result = iterator.next();
                    }
                } else {
                    keys = Object.keys(val);
                    ret = new Array(keys.length);
                    for (i = 0, l = keys.length; i < l; i++) {
                        key = keys[i];
                        ret[i] = render(val[key], key, i);
                    }
                }
            }
            if (!isDef(ret)) {
                ret = [];
            }
            ret._isVList = true;
            return ret;
        }
        function renderSlot(name, fallback, props, bindObject) {
            var scopedSlotFn = this.$scopedSlots[name];
            var nodes;
            if (scopedSlotFn) {
                props = props || {};
                if (bindObject) {
                    if (false) {}
                    props = extend(extend({}, bindObject), props);
                }
                nodes = scopedSlotFn(props) || fallback;
            } else {
                nodes = this.$slots[name] || fallback;
            }
            var target = props && props.slot;
            if (target) {
                return this.$createElement(\\"template\\", {
                    slot: target
                }, nodes);
            } else {
                return nodes;
            }
        }
        function resolveFilter(id) {
            return resolveAsset(this.$options, \\"filters\\", id, true) || identity;
        }
        function isKeyNotMatch(expect, actual) {
            if (Array.isArray(expect)) {
                return expect.indexOf(actual) === -1;
            } else {
                return expect !== actual;
            }
        }
        function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
            var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
            if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
                return isKeyNotMatch(builtInKeyName, eventKeyName);
            } else if (mappedKeyCode) {
                return isKeyNotMatch(mappedKeyCode, eventKeyCode);
            } else if (eventKeyName) {
                return hyphenate(eventKeyName) !== key;
            }
        }
        function bindObjectProps(data, tag, value, asProp, isSync) {
            if (value) {
                if (!isObject(value)) {
                    false && false;
                } else {
                    if (Array.isArray(value)) {
                        value = toObject(value);
                    }
                    var hash;
                    var loop = function loop(key) {
                        if (key === \\"class\\" || key === \\"style\\" || isReservedAttribute(key)) {
                            hash = data;
                        } else {
                            var type = data.attrs && data.attrs.type;
                            hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
                        }
                        var camelizedKey = camelize(key);
                        var hyphenatedKey = hyphenate(key);
                        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
                            hash[key] = value[key];
                            if (isSync) {
                                var on = data.on || (data.on = {});
                                on[\\"update:\\" + key] = function($event) {
                                    value[key] = $event;
                                };
                            }
                        }
                    };
                    for (var key in value) {
                        loop(key);
                    }
                }
            }
            return data;
        }
        function renderStatic(index, isInFor) {
            var cached = this._staticTrees || (this._staticTrees = []);
            var tree = cached[index];
            if (tree && !isInFor) {
                return tree;
            }
            tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this);
            markStatic(tree, \\"__static__\\" + index, false);
            return tree;
        }
        function markOnce(tree, index, key) {
            markStatic(tree, \\"__once__\\" + index + (key ? \\"_\\" + key : \\"\\"), true);
            return tree;
        }
        function markStatic(tree, key, isOnce) {
            if (Array.isArray(tree)) {
                for (var i = 0; i < tree.length; i++) {
                    if (tree[i] && typeof tree[i] !== \\"string\\") {
                        markStaticNode(tree[i], key + \\"_\\" + i, isOnce);
                    }
                }
            } else {
                markStaticNode(tree, key, isOnce);
            }
        }
        function markStaticNode(node, key, isOnce) {
            node.isStatic = true;
            node.key = key;
            node.isOnce = isOnce;
        }
        function bindObjectListeners(data, value) {
            if (value) {
                if (!isPlainObject(value)) {
                    false && false;
                } else {
                    var on = data.on = data.on ? extend({}, data.on) : {};
                    for (var key in value) {
                        var existing = on[key];
                        var ours = value[key];
                        on[key] = existing ? [].concat(existing, ours) : ours;
                    }
                }
            }
            return data;
        }
        function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
            res = res || {
                $stable: !hasDynamicKeys
            };
            for (var i = 0; i < fns.length; i++) {
                var slot = fns[i];
                if (Array.isArray(slot)) {
                    resolveScopedSlots(slot, res, hasDynamicKeys);
                } else if (slot) {
                    if (slot.proxy) {
                        slot.fn.proxy = true;
                    }
                    res[slot.key] = slot.fn;
                }
            }
            if (contentHashKey) {
                res.$key = contentHashKey;
            }
            return res;
        }
        function bindDynamicKeys(baseObj, values) {
            for (var i = 0; i < values.length; i += 2) {
                var key = values[i];
                if (typeof key === \\"string\\" && key) {
                    baseObj[values[i]] = values[i + 1];
                } else if (false) {}
            }
            return baseObj;
        }
        function prependModifier(value, symbol) {
            return typeof value === \\"string\\" ? symbol + value : value;
        }
        function installRenderHelpers(target) {
            target._o = markOnce;
            target._n = toNumber;
            target._s = toString;
            target._l = renderList;
            target._t = renderSlot;
            target._q = looseEqual;
            target._i = looseIndexOf;
            target._m = renderStatic;
            target._f = resolveFilter;
            target._k = checkKeyCodes;
            target._b = bindObjectProps;
            target._v = createTextVNode;
            target._e = createEmptyVNode;
            target._u = resolveScopedSlots;
            target._g = bindObjectListeners;
            target._d = bindDynamicKeys;
            target._p = prependModifier;
        }
        function FunctionalRenderContext(data, props, children, parent, Ctor) {
            var this$1 = this;
            var options = Ctor.options;
            var contextVm;
            if (hasOwn(parent, \\"_uid\\")) {
                contextVm = Object.create(parent);
                contextVm._original = parent;
            } else {
                contextVm = parent;
                parent = parent._original;
            }
            var isCompiled = isTrue(options._compiled);
            var needNormalization = !isCompiled;
            this.data = data;
            this.props = props;
            this.children = children;
            this.parent = parent;
            this.listeners = data.on || emptyObject;
            this.injections = resolveInject(options.inject, parent);
            this.slots = function() {
                if (!this$1.$slots) {
                    normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
                }
                return this$1.$slots;
            };
            Object.defineProperty(this, \\"scopedSlots\\", {
                enumerable: true,
                get: function get() {
                    return normalizeScopedSlots(data.scopedSlots, this.slots());
                }
            });
            if (isCompiled) {
                this.$options = options;
                this.$slots = this.slots();
                this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
            }
            if (options._scopeId) {
                this._c = function(a, b, c, d) {
                    var vnode = createElement(contextVm, a, b, c, d, needNormalization);
                    if (vnode && !Array.isArray(vnode)) {
                        vnode.fnScopeId = options._scopeId;
                        vnode.fnContext = parent;
                    }
                    return vnode;
                };
            } else {
                this._c = function(a, b, c, d) {
                    return createElement(contextVm, a, b, c, d, needNormalization);
                };
            }
        }
        installRenderHelpers(FunctionalRenderContext.prototype);
        function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
            var options = Ctor.options;
            var props = {};
            var propOptions = options.props;
            if (isDef(propOptions)) {
                for (var key in propOptions) {
                    props[key] = validateProp(key, propOptions, propsData || emptyObject);
                }
            } else {
                if (isDef(data.attrs)) {
                    mergeProps(props, data.attrs);
                }
                if (isDef(data.props)) {
                    mergeProps(props, data.props);
                }
            }
            var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
            var vnode = options.render.call(null, renderContext._c, renderContext);
            if (vnode instanceof VNode) {
                return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
            } else if (Array.isArray(vnode)) {
                var vnodes = normalizeChildren(vnode) || [];
                var res = new Array(vnodes.length);
                for (var i = 0; i < vnodes.length; i++) {
                    res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
                }
                return res;
            }
        }
        function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
            var clone = cloneVNode(vnode);
            clone.fnContext = contextVm;
            clone.fnOptions = options;
            if (false) {}
            if (data.slot) {
                (clone.data || (clone.data = {})).slot = data.slot;
            }
            return clone;
        }
        function mergeProps(to, from) {
            for (var key in from) {
                to[camelize(key)] = from[key];
            }
        }
        var componentVNodeHooks = {
            init: function init(vnode, hydrating) {
                if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
                    var mountedNode = vnode;
                    componentVNodeHooks.prepatch(mountedNode, mountedNode);
                } else {
                    var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
                    child.$mount(hydrating ? vnode.elm : undefined, hydrating);
                }
            },
            prepatch: function prepatch(oldVnode, vnode) {
                var options = vnode.componentOptions;
                var child = vnode.componentInstance = oldVnode.componentInstance;
                updateChildComponent(child, options.propsData, options.listeners, vnode, options.children);
            },
            insert: function insert(vnode) {
                var context = vnode.context;
                var componentInstance = vnode.componentInstance;
                if (!componentInstance._isMounted) {
                    componentInstance._isMounted = true;
                    callHook(componentInstance, \\"mounted\\");
                }
                if (vnode.data.keepAlive) {
                    if (context._isMounted) {
                        queueActivatedComponent(componentInstance);
                    } else {
                        activateChildComponent(componentInstance, true);
                    }
                }
            },
            destroy: function destroy(vnode) {
                var componentInstance = vnode.componentInstance;
                if (!componentInstance._isDestroyed) {
                    if (!vnode.data.keepAlive) {
                        componentInstance.$destroy();
                    } else {
                        deactivateChildComponent(componentInstance, true);
                    }
                }
            }
        };
        var hooksToMerge = Object.keys(componentVNodeHooks);
        function createComponent(Ctor, data, context, children, tag) {
            if (isUndef(Ctor)) {
                return;
            }
            var baseCtor = context.$options._base;
            if (isObject(Ctor)) {
                Ctor = baseCtor.extend(Ctor);
            }
            if (typeof Ctor !== \\"function\\") {
                if (false) {}
                return;
            }
            var asyncFactory;
            if (isUndef(Ctor.cid)) {
                asyncFactory = Ctor;
                Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
                if (Ctor === undefined) {
                    return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
                }
            }
            data = data || {};
            resolveConstructorOptions(Ctor);
            if (isDef(data.model)) {
                transformModel(Ctor.options, data);
            }
            var propsData = extractPropsFromVNodeData(data, Ctor, tag);
            if (isTrue(Ctor.options.functional)) {
                return createFunctionalComponent(Ctor, propsData, data, context, children);
            }
            var listeners = data.on;
            data.on = data.nativeOn;
            if (isTrue(Ctor.options.abstract)) {
                var slot = data.slot;
                data = {};
                if (slot) {
                    data.slot = slot;
                }
            }
            installComponentHooks(data);
            var name = Ctor.options.name || tag;
            var vnode = new VNode(\\"vue-component-\\" + Ctor.cid + (name ? \\"-\\" + name : \\"\\"), data, undefined, undefined, undefined, context, {
                Ctor: Ctor,
                propsData: propsData,
                listeners: listeners,
                tag: tag,
                children: children
            }, asyncFactory);
            return vnode;
        }
        function createComponentInstanceForVnode(vnode, parent) {
            var options = {
                _isComponent: true,
                _parentVnode: vnode,
                parent: parent
            };
            var inlineTemplate = vnode.data.inlineTemplate;
            if (isDef(inlineTemplate)) {
                options.render = inlineTemplate.render;
                options.staticRenderFns = inlineTemplate.staticRenderFns;
            }
            return new vnode.componentOptions.Ctor(options);
        }
        function installComponentHooks(data) {
            var hooks = data.hook || (data.hook = {});
            for (var i = 0; i < hooksToMerge.length; i++) {
                var key = hooksToMerge[i];
                var existing = hooks[key];
                var toMerge = componentVNodeHooks[key];
                if (existing !== toMerge && !(existing && existing._merged)) {
                    hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
                }
            }
        }
        function mergeHook$1(f1, f2) {
            var merged = function merged(a, b) {
                f1(a, b);
                f2(a, b);
            };
            merged._merged = true;
            return merged;
        }
        function transformModel(options, data) {
            var prop = options.model && options.model.prop || \\"value\\";
            var event = options.model && options.model.event || \\"input\\";
            (data.attrs || (data.attrs = {}))[prop] = data.model.value;
            var on = data.on || (data.on = {});
            var existing = on[event];
            var callback = data.model.callback;
            if (isDef(existing)) {
                if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
                    on[event] = [ callback ].concat(existing);
                }
            } else {
                on[event] = callback;
            }
        }
        var SIMPLE_NORMALIZE = 1;
        var ALWAYS_NORMALIZE = 2;
        function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
            if (Array.isArray(data) || isPrimitive(data)) {
                normalizationType = children;
                children = data;
                data = undefined;
            }
            if (isTrue(alwaysNormalize)) {
                normalizationType = ALWAYS_NORMALIZE;
            }
            return _createElement(context, tag, data, children, normalizationType);
        }
        function _createElement(context, tag, data, children, normalizationType) {
            if (isDef(data) && isDef(data.__ob__)) {
                false && false;
                return createEmptyVNode();
            }
            if (isDef(data) && isDef(data.is)) {
                tag = data.is;
            }
            if (!tag) {
                return createEmptyVNode();
            }
            if (false) {}
            if (Array.isArray(children) && typeof children[0] === \\"function\\") {
                data = data || {};
                data.scopedSlots = {
                    default: children[0]
                };
                children.length = 0;
            }
            if (normalizationType === ALWAYS_NORMALIZE) {
                children = normalizeChildren(children);
            } else if (normalizationType === SIMPLE_NORMALIZE) {
                children = simpleNormalizeChildren(children);
            }
            var vnode, ns;
            if (typeof tag === \\"string\\") {
                var Ctor;
                ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
                if (config.isReservedTag(tag)) {
                    if (false) {}
                    vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
                } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, \\"components\\", tag))) {
                    vnode = createComponent(Ctor, data, context, children, tag);
                } else {
                    vnode = new VNode(tag, data, children, undefined, undefined, context);
                }
            } else {
                vnode = createComponent(tag, data, context, children);
            }
            if (Array.isArray(vnode)) {
                return vnode;
            } else if (isDef(vnode)) {
                if (isDef(ns)) {
                    applyNS(vnode, ns);
                }
                if (isDef(data)) {
                    registerDeepBindings(data);
                }
                return vnode;
            } else {
                return createEmptyVNode();
            }
        }
        function applyNS(vnode, ns, force) {
            vnode.ns = ns;
            if (vnode.tag === \\"foreignObject\\") {
                ns = undefined;
                force = true;
            }
            if (isDef(vnode.children)) {
                for (var i = 0, l = vnode.children.length; i < l; i++) {
                    var child = vnode.children[i];
                    if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== \\"svg\\")) {
                        applyNS(child, ns, force);
                    }
                }
            }
        }
        function registerDeepBindings(data) {
            if (isObject(data.style)) {
                traverse(data.style);
            }
            if (isObject(data.class)) {
                traverse(data.class);
            }
        }
        function initRender(vm) {
            vm._vnode = null;
            vm._staticTrees = null;
            var options = vm.$options;
            var parentVnode = vm.$vnode = options._parentVnode;
            var renderContext = parentVnode && parentVnode.context;
            vm.$slots = resolveSlots(options._renderChildren, renderContext);
            vm.$scopedSlots = emptyObject;
            vm._c = function(a, b, c, d) {
                return createElement(vm, a, b, c, d, false);
            };
            vm.$createElement = function(a, b, c, d) {
                return createElement(vm, a, b, c, d, true);
            };
            var parentData = parentVnode && parentVnode.data;
            if (false) {} else {
                defineReactive$$1(vm, \\"$attrs\\", parentData && parentData.attrs || emptyObject, null, true);
                defineReactive$$1(vm, \\"$listeners\\", options._parentListeners || emptyObject, null, true);
            }
        }
        var currentRenderingInstance = null;
        function renderMixin(Vue) {
            installRenderHelpers(Vue.prototype);
            Vue.prototype.$nextTick = function(fn) {
                return nextTick(fn, this);
            };
            Vue.prototype._render = function() {
                var vm = this;
                var ref = vm.$options;
                var render = ref.render;
                var _parentVnode = ref._parentVnode;
                if (_parentVnode) {
                    vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
                }
                vm.$vnode = _parentVnode;
                var vnode;
                try {
                    currentRenderingInstance = vm;
                    vnode = render.call(vm._renderProxy, vm.$createElement);
                } catch (e) {
                    handleError(e, vm, \\"render\\");
                    if (false) {} else {
                        vnode = vm._vnode;
                    }
                } finally {
                    currentRenderingInstance = null;
                }
                if (Array.isArray(vnode) && vnode.length === 1) {
                    vnode = vnode[0];
                }
                if (!(vnode instanceof VNode)) {
                    if (false) {}
                    vnode = createEmptyVNode();
                }
                vnode.parent = _parentVnode;
                return vnode;
            };
        }
        function ensureCtor(comp, base) {
            if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === \\"Module\\") {
                comp = comp.default;
            }
            return isObject(comp) ? base.extend(comp) : comp;
        }
        function createAsyncPlaceholder(factory, data, context, children, tag) {
            var node = createEmptyVNode();
            node.asyncFactory = factory;
            node.asyncMeta = {
                data: data,
                context: context,
                children: children,
                tag: tag
            };
            return node;
        }
        function resolveAsyncComponent(factory, baseCtor) {
            if (isTrue(factory.error) && isDef(factory.errorComp)) {
                return factory.errorComp;
            }
            if (isDef(factory.resolved)) {
                return factory.resolved;
            }
            var owner = currentRenderingInstance;
            if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
                factory.owners.push(owner);
            }
            if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
                return factory.loadingComp;
            }
            if (owner && !isDef(factory.owners)) {
                var owners = factory.owners = [ owner ];
                var sync = true;
                var timerLoading = null;
                var timerTimeout = null;
                owner.$on(\\"hook:destroyed\\", (function() {
                    return remove(owners, owner);
                }));
                var forceRender = function forceRender(renderCompleted) {
                    for (var i = 0, l = owners.length; i < l; i++) {
                        owners[i].$forceUpdate();
                    }
                    if (renderCompleted) {
                        owners.length = 0;
                        if (timerLoading !== null) {
                            clearTimeout(timerLoading);
                            timerLoading = null;
                        }
                        if (timerTimeout !== null) {
                            clearTimeout(timerTimeout);
                            timerTimeout = null;
                        }
                    }
                };
                var resolve = once((function(res) {
                    factory.resolved = ensureCtor(res, baseCtor);
                    if (!sync) {
                        forceRender(true);
                    } else {
                        owners.length = 0;
                    }
                }));
                var reject = once((function(reason) {
                    false && false;
                    if (isDef(factory.errorComp)) {
                        factory.error = true;
                        forceRender(true);
                    }
                }));
                var res = factory(resolve, reject);
                if (isObject(res)) {
                    if (isPromise(res)) {
                        if (isUndef(factory.resolved)) {
                            res.then(resolve, reject);
                        }
                    } else if (isPromise(res.component)) {
                        res.component.then(resolve, reject);
                        if (isDef(res.error)) {
                            factory.errorComp = ensureCtor(res.error, baseCtor);
                        }
                        if (isDef(res.loading)) {
                            factory.loadingComp = ensureCtor(res.loading, baseCtor);
                            if (res.delay === 0) {
                                factory.loading = true;
                            } else {
                                timerLoading = setTimeout((function() {
                                    timerLoading = null;
                                    if (isUndef(factory.resolved) && isUndef(factory.error)) {
                                        factory.loading = true;
                                        forceRender(false);
                                    }
                                }), res.delay || 200);
                            }
                        }
                        if (isDef(res.timeout)) {
                            timerTimeout = setTimeout((function() {
                                timerTimeout = null;
                                if (isUndef(factory.resolved)) {
                                    reject(false ? undefined : null);
                                }
                            }), res.timeout);
                        }
                    }
                }
                sync = false;
                return factory.loading ? factory.loadingComp : factory.resolved;
            }
        }
        function isAsyncPlaceholder(node) {
            return node.isComment && node.asyncFactory;
        }
        function getFirstComponentChild(children) {
            if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                    var c = children[i];
                    if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
                        return c;
                    }
                }
            }
        }
        function initEvents(vm) {
            vm._events = Object.create(null);
            vm._hasHookEvent = false;
            var listeners = vm.$options._parentListeners;
            if (listeners) {
                updateComponentListeners(vm, listeners);
            }
        }
        var target;
        function add(event, fn) {
            target.$on(event, fn);
        }
        function remove$1(event, fn) {
            target.$off(event, fn);
        }
        function createOnceHandler(event, fn) {
            var _target = target;
            return function onceHandler() {
                var res = fn.apply(null, arguments);
                if (res !== null) {
                    _target.$off(event, onceHandler);
                }
            };
        }
        function updateComponentListeners(vm, listeners, oldListeners) {
            target = vm;
            updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
            target = undefined;
        }
        function eventsMixin(Vue) {
            var hookRE = /^hook:/;
            Vue.prototype.$on = function(event, fn) {
                var vm = this;
                if (Array.isArray(event)) {
                    for (var i = 0, l = event.length; i < l; i++) {
                        vm.$on(event[i], fn);
                    }
                } else {
                    (vm._events[event] || (vm._events[event] = [])).push(fn);
                    if (hookRE.test(event)) {
                        vm._hasHookEvent = true;
                    }
                }
                return vm;
            };
            Vue.prototype.$once = function(event, fn) {
                var vm = this;
                function on() {
                    vm.$off(event, on);
                    fn.apply(vm, arguments);
                }
                on.fn = fn;
                vm.$on(event, on);
                return vm;
            };
            Vue.prototype.$off = function(event, fn) {
                var vm = this;
                if (!arguments.length) {
                    vm._events = Object.create(null);
                    return vm;
                }
                if (Array.isArray(event)) {
                    for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
                        vm.$off(event[i$1], fn);
                    }
                    return vm;
                }
                var cbs = vm._events[event];
                if (!cbs) {
                    return vm;
                }
                if (!fn) {
                    vm._events[event] = null;
                    return vm;
                }
                var cb;
                var i = cbs.length;
                while (i--) {
                    cb = cbs[i];
                    if (cb === fn || cb.fn === fn) {
                        cbs.splice(i, 1);
                        break;
                    }
                }
                return vm;
            };
            Vue.prototype.$emit = function(event) {
                var vm = this;
                if (false) {
                    var lowerCaseEvent;
                }
                var cbs = vm._events[event];
                if (cbs) {
                    cbs = cbs.length > 1 ? toArray(cbs) : cbs;
                    var args = toArray(arguments, 1);
                    var info = 'event handler for \\"' + event + '\\"';
                    for (var i = 0, l = cbs.length; i < l; i++) {
                        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
                    }
                }
                return vm;
            };
        }
        var activeInstance = null;
        var isUpdatingChildComponent = false;
        function setActiveInstance(vm) {
            var prevActiveInstance = activeInstance;
            activeInstance = vm;
            return function() {
                activeInstance = prevActiveInstance;
            };
        }
        function initLifecycle(vm) {
            var options = vm.$options;
            var parent = options.parent;
            if (parent && !options.abstract) {
                while (parent.$options.abstract && parent.$parent) {
                    parent = parent.$parent;
                }
                parent.$children.push(vm);
            }
            vm.$parent = parent;
            vm.$root = parent ? parent.$root : vm;
            vm.$children = [];
            vm.$refs = {};
            vm._watcher = null;
            vm._inactive = null;
            vm._directInactive = false;
            vm._isMounted = false;
            vm._isDestroyed = false;
            vm._isBeingDestroyed = false;
        }
        function lifecycleMixin(Vue) {
            Vue.prototype._update = function(vnode, hydrating) {
                var vm = this;
                var prevEl = vm.$el;
                var prevVnode = vm._vnode;
                var restoreActiveInstance = setActiveInstance(vm);
                vm._vnode = vnode;
                if (!prevVnode) {
                    vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false);
                } else {
                    vm.$el = vm.__patch__(prevVnode, vnode);
                }
                restoreActiveInstance();
                if (prevEl) {
                    prevEl.__vue__ = null;
                }
                if (vm.$el) {
                    vm.$el.__vue__ = vm;
                }
                if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
                    vm.$parent.$el = vm.$el;
                }
            };
            Vue.prototype.$forceUpdate = function() {
                var vm = this;
                if (vm._watcher) {
                    vm._watcher.update();
                }
            };
            Vue.prototype.$destroy = function() {
                var vm = this;
                if (vm._isBeingDestroyed) {
                    return;
                }
                callHook(vm, \\"beforeDestroy\\");
                vm._isBeingDestroyed = true;
                var parent = vm.$parent;
                if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
                    remove(parent.$children, vm);
                }
                if (vm._watcher) {
                    vm._watcher.teardown();
                }
                var i = vm._watchers.length;
                while (i--) {
                    vm._watchers[i].teardown();
                }
                if (vm._data.__ob__) {
                    vm._data.__ob__.vmCount--;
                }
                vm._isDestroyed = true;
                vm.__patch__(vm._vnode, null);
                callHook(vm, \\"destroyed\\");
                vm.$off();
                if (vm.$el) {
                    vm.$el.__vue__ = null;
                }
                if (vm.$vnode) {
                    vm.$vnode.parent = null;
                }
            };
        }
        function mountComponent(vm, el, hydrating) {
            vm.$el = el;
            if (!vm.$options.render) {
                vm.$options.render = createEmptyVNode;
                if (false) {}
            }
            callHook(vm, \\"beforeMount\\");
            var updateComponent;
            if (false) {} else {
                updateComponent = function updateComponent() {
                    vm._update(vm._render(), hydrating);
                };
            }
            new Watcher(vm, updateComponent, noop, {
                before: function before() {
                    if (vm._isMounted && !vm._isDestroyed) {
                        callHook(vm, \\"beforeUpdate\\");
                    }
                }
            }, true);
            hydrating = false;
            if (vm.$vnode == null) {
                vm._isMounted = true;
                callHook(vm, \\"mounted\\");
            }
            return vm;
        }
        function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
            if (false) {}
            var newScopedSlots = parentVnode.data.scopedSlots;
            var oldScopedSlots = vm.$scopedSlots;
            var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key);
            var needsForceUpdate = !!(renderChildren || vm.$options._renderChildren || hasDynamicScopedSlot);
            vm.$options._parentVnode = parentVnode;
            vm.$vnode = parentVnode;
            if (vm._vnode) {
                vm._vnode.parent = parentVnode;
            }
            vm.$options._renderChildren = renderChildren;
            vm.$attrs = parentVnode.data.attrs || emptyObject;
            vm.$listeners = listeners || emptyObject;
            if (propsData && vm.$options.props) {
                toggleObserving(false);
                var props = vm._props;
                var propKeys = vm.$options._propKeys || [];
                for (var i = 0; i < propKeys.length; i++) {
                    var key = propKeys[i];
                    var propOptions = vm.$options.props;
                    props[key] = validateProp(key, propOptions, propsData, vm);
                }
                toggleObserving(true);
                vm.$options.propsData = propsData;
            }
            listeners = listeners || emptyObject;
            var oldListeners = vm.$options._parentListeners;
            vm.$options._parentListeners = listeners;
            updateComponentListeners(vm, listeners, oldListeners);
            if (needsForceUpdate) {
                vm.$slots = resolveSlots(renderChildren, parentVnode.context);
                vm.$forceUpdate();
            }
            if (false) {}
        }
        function isInInactiveTree(vm) {
            while (vm && (vm = vm.$parent)) {
                if (vm._inactive) {
                    return true;
                }
            }
            return false;
        }
        function activateChildComponent(vm, direct) {
            if (direct) {
                vm._directInactive = false;
                if (isInInactiveTree(vm)) {
                    return;
                }
            } else if (vm._directInactive) {
                return;
            }
            if (vm._inactive || vm._inactive === null) {
                vm._inactive = false;
                for (var i = 0; i < vm.$children.length; i++) {
                    activateChildComponent(vm.$children[i]);
                }
                callHook(vm, \\"activated\\");
            }
        }
        function deactivateChildComponent(vm, direct) {
            if (direct) {
                vm._directInactive = true;
                if (isInInactiveTree(vm)) {
                    return;
                }
            }
            if (!vm._inactive) {
                vm._inactive = true;
                for (var i = 0; i < vm.$children.length; i++) {
                    deactivateChildComponent(vm.$children[i]);
                }
                callHook(vm, \\"deactivated\\");
            }
        }
        function callHook(vm, hook) {
            pushTarget();
            var handlers = vm.$options[hook];
            var info = hook + \\" hook\\";
            if (handlers) {
                for (var i = 0, j = handlers.length; i < j; i++) {
                    invokeWithErrorHandling(handlers[i], vm, null, vm, info);
                }
            }
            if (vm._hasHookEvent) {
                vm.$emit(\\"hook:\\" + hook);
            }
            popTarget();
        }
        var MAX_UPDATE_COUNT = 100;
        var queue = [];
        var activatedChildren = [];
        var has = {};
        var circular = {};
        var waiting = false;
        var flushing = false;
        var index = 0;
        function resetSchedulerState() {
            index = queue.length = activatedChildren.length = 0;
            has = {};
            if (false) {}
            waiting = flushing = false;
        }
        var currentFlushTimestamp = 0;
        var getNow = Date.now;
        if (inBrowser && !isIE) {
            var performance = window.performance;
            if (performance && typeof performance.now === \\"function\\" && getNow() > document.createEvent(\\"Event\\").timeStamp) {
                getNow = function getNow() {
                    return performance.now();
                };
            }
        }
        function flushSchedulerQueue() {
            currentFlushTimestamp = getNow();
            flushing = true;
            var watcher, id;
            queue.sort((function(a, b) {
                return a.id - b.id;
            }));
            for (index = 0; index < queue.length; index++) {
                watcher = queue[index];
                if (watcher.before) {
                    watcher.before();
                }
                id = watcher.id;
                has[id] = null;
                watcher.run();
                if (false) {}
            }
            var activatedQueue = activatedChildren.slice();
            var updatedQueue = queue.slice();
            resetSchedulerState();
            callActivatedHooks(activatedQueue);
            callUpdatedHooks(updatedQueue);
            if (devtools && config.devtools) {
                devtools.emit(\\"flush\\");
            }
        }
        function callUpdatedHooks(queue) {
            var i = queue.length;
            while (i--) {
                var watcher = queue[i];
                var vm = watcher.vm;
                if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
                    callHook(vm, \\"updated\\");
                }
            }
        }
        function queueActivatedComponent(vm) {
            vm._inactive = false;
            activatedChildren.push(vm);
        }
        function callActivatedHooks(queue) {
            for (var i = 0; i < queue.length; i++) {
                queue[i]._inactive = true;
                activateChildComponent(queue[i], true);
            }
        }
        function queueWatcher(watcher) {
            var id = watcher.id;
            if (has[id] == null) {
                has[id] = true;
                if (!flushing) {
                    queue.push(watcher);
                } else {
                    var i = queue.length - 1;
                    while (i > index && queue[i].id > watcher.id) {
                        i--;
                    }
                    queue.splice(i + 1, 0, watcher);
                }
                if (!waiting) {
                    waiting = true;
                    if (false) {}
                    nextTick(flushSchedulerQueue);
                }
            }
        }
        var uid$2 = 0;
        var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
            this.vm = vm;
            if (isRenderWatcher) {
                vm._watcher = this;
            }
            vm._watchers.push(this);
            if (options) {
                this.deep = !!options.deep;
                this.user = !!options.user;
                this.lazy = !!options.lazy;
                this.sync = !!options.sync;
                this.before = options.before;
            } else {
                this.deep = this.user = this.lazy = this.sync = false;
            }
            this.cb = cb;
            this.id = ++uid$2;
            this.active = true;
            this.dirty = this.lazy;
            this.deps = [];
            this.newDeps = [];
            this.depIds = new _Set;
            this.newDepIds = new _Set;
            this.expression = false ? undefined : \\"\\";
            if (typeof expOrFn === \\"function\\") {
                this.getter = expOrFn;
            } else {
                this.getter = parsePath(expOrFn);
                if (!this.getter) {
                    this.getter = noop;
                    false && false;
                }
            }
            this.value = this.lazy ? undefined : this.get();
        };
        Watcher.prototype.get = function get() {
            pushTarget(this);
            var value;
            var vm = this.vm;
            try {
                value = this.getter.call(vm, vm);
            } catch (e) {
                if (this.user) {
                    handleError(e, vm, 'getter for watcher \\"' + this.expression + '\\"');
                } else {
                    throw e;
                }
            } finally {
                if (this.deep) {
                    traverse(value);
                }
                popTarget();
                this.cleanupDeps();
            }
            return value;
        };
        Watcher.prototype.addDep = function addDep(dep) {
            var id = dep.id;
            if (!this.newDepIds.has(id)) {
                this.newDepIds.add(id);
                this.newDeps.push(dep);
                if (!this.depIds.has(id)) {
                    dep.addSub(this);
                }
            }
        };
        Watcher.prototype.cleanupDeps = function cleanupDeps() {
            var i = this.deps.length;
            while (i--) {
                var dep = this.deps[i];
                if (!this.newDepIds.has(dep.id)) {
                    dep.removeSub(this);
                }
            }
            var tmp = this.depIds;
            this.depIds = this.newDepIds;
            this.newDepIds = tmp;
            this.newDepIds.clear();
            tmp = this.deps;
            this.deps = this.newDeps;
            this.newDeps = tmp;
            this.newDeps.length = 0;
        };
        Watcher.prototype.update = function update() {
            if (this.lazy) {
                this.dirty = true;
            } else if (this.sync) {
                this.run();
            } else {
                queueWatcher(this);
            }
        };
        Watcher.prototype.run = function run() {
            if (this.active) {
                var value = this.get();
                if (value !== this.value || isObject(value) || this.deep) {
                    var oldValue = this.value;
                    this.value = value;
                    if (this.user) {
                        try {
                            this.cb.call(this.vm, value, oldValue);
                        } catch (e) {
                            handleError(e, this.vm, 'callback for watcher \\"' + this.expression + '\\"');
                        }
                    } else {
                        this.cb.call(this.vm, value, oldValue);
                    }
                }
            }
        };
        Watcher.prototype.evaluate = function evaluate() {
            this.value = this.get();
            this.dirty = false;
        };
        Watcher.prototype.depend = function depend() {
            var i = this.deps.length;
            while (i--) {
                this.deps[i].depend();
            }
        };
        Watcher.prototype.teardown = function teardown() {
            if (this.active) {
                if (!this.vm._isBeingDestroyed) {
                    remove(this.vm._watchers, this);
                }
                var i = this.deps.length;
                while (i--) {
                    this.deps[i].removeSub(this);
                }
                this.active = false;
            }
        };
        var sharedPropertyDefinition = {
            enumerable: true,
            configurable: true,
            get: noop,
            set: noop
        };
        function proxy(target, sourceKey, key) {
            sharedPropertyDefinition.get = function proxyGetter() {
                return this[sourceKey][key];
            };
            sharedPropertyDefinition.set = function proxySetter(val) {
                this[sourceKey][key] = val;
            };
            Object.defineProperty(target, key, sharedPropertyDefinition);
        }
        function initState(vm) {
            vm._watchers = [];
            var opts = vm.$options;
            if (opts.props) {
                initProps(vm, opts.props);
            }
            if (opts.methods) {
                initMethods(vm, opts.methods);
            }
            if (opts.data) {
                initData(vm);
            } else {
                observe(vm._data = {}, true);
            }
            if (opts.computed) {
                initComputed(vm, opts.computed);
            }
            if (opts.watch && opts.watch !== nativeWatch) {
                initWatch(vm, opts.watch);
            }
        }
        function initProps(vm, propsOptions) {
            var propsData = vm.$options.propsData || {};
            var props = vm._props = {};
            var keys = vm.$options._propKeys = [];
            var isRoot = !vm.$parent;
            if (!isRoot) {
                toggleObserving(false);
            }
            var loop = function loop(key) {
                keys.push(key);
                var value = validateProp(key, propsOptions, propsData, vm);
                if (false) {
                    var hyphenatedKey;
                } else {
                    defineReactive$$1(props, key, value);
                }
                if (!(key in vm)) {
                    proxy(vm, \\"_props\\", key);
                }
            };
            for (var key in propsOptions) {
                loop(key);
            }
            toggleObserving(true);
        }
        function initData(vm) {
            var data = vm.$options.data;
            data = vm._data = typeof data === \\"function\\" ? getData(data, vm) : data || {};
            if (!isPlainObject(data)) {
                data = {};
                false && false;
            }
            var keys = Object.keys(data);
            var props = vm.$options.props;
            var methods = vm.$options.methods;
            var i = keys.length;
            while (i--) {
                var key = keys[i];
                if (false) {}
                if (props && hasOwn(props, key)) {
                    false && false;
                } else if (!isReserved(key)) {
                    proxy(vm, \\"_data\\", key);
                }
            }
            observe(data, true);
        }
        function getData(data, vm) {
            pushTarget();
            try {
                return data.call(vm, vm);
            } catch (e) {
                handleError(e, vm, \\"data()\\");
                return {};
            } finally {
                popTarget();
            }
        }
        var computedWatcherOptions = {
            lazy: true
        };
        function initComputed(vm, computed) {
            var watchers = vm._computedWatchers = Object.create(null);
            var isSSR = isServerRendering();
            for (var key in computed) {
                var userDef = computed[key];
                var getter = typeof userDef === \\"function\\" ? userDef : userDef.get;
                if (false) {}
                if (!isSSR) {
                    watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
                }
                if (!(key in vm)) {
                    defineComputed(vm, key, userDef);
                } else if (false) {}
            }
        }
        function defineComputed(target, key, userDef) {
            var shouldCache = !isServerRendering();
            if (typeof userDef === \\"function\\") {
                sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
                sharedPropertyDefinition.set = noop;
            } else {
                sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
                sharedPropertyDefinition.set = userDef.set || noop;
            }
            if (false) {}
            Object.defineProperty(target, key, sharedPropertyDefinition);
        }
        function createComputedGetter(key) {
            return function computedGetter() {
                var watcher = this._computedWatchers && this._computedWatchers[key];
                if (watcher) {
                    if (watcher.dirty) {
                        watcher.evaluate();
                    }
                    if (Dep.target) {
                        watcher.depend();
                    }
                    return watcher.value;
                }
            };
        }
        function createGetterInvoker(fn) {
            return function computedGetter() {
                return fn.call(this, this);
            };
        }
        function initMethods(vm, methods) {
            var props = vm.$options.props;
            for (var key in methods) {
                if (false) {}
                vm[key] = typeof methods[key] !== \\"function\\" ? noop : bind(methods[key], vm);
            }
        }
        function initWatch(vm, watch) {
            for (var key in watch) {
                var handler = watch[key];
                if (Array.isArray(handler)) {
                    for (var i = 0; i < handler.length; i++) {
                        createWatcher(vm, key, handler[i]);
                    }
                } else {
                    createWatcher(vm, key, handler);
                }
            }
        }
        function createWatcher(vm, expOrFn, handler, options) {
            if (isPlainObject(handler)) {
                options = handler;
                handler = handler.handler;
            }
            if (typeof handler === \\"string\\") {
                handler = vm[handler];
            }
            return vm.$watch(expOrFn, handler, options);
        }
        function stateMixin(Vue) {
            var dataDef = {};
            dataDef.get = function() {
                return this._data;
            };
            var propsDef = {};
            propsDef.get = function() {
                return this._props;
            };
            if (false) {}
            Object.defineProperty(Vue.prototype, \\"$data\\", dataDef);
            Object.defineProperty(Vue.prototype, \\"$props\\", propsDef);
            Vue.prototype.$set = set;
            Vue.prototype.$delete = del;
            Vue.prototype.$watch = function(expOrFn, cb, options) {
                var vm = this;
                if (isPlainObject(cb)) {
                    return createWatcher(vm, expOrFn, cb, options);
                }
                options = options || {};
                options.user = true;
                var watcher = new Watcher(vm, expOrFn, cb, options);
                if (options.immediate) {
                    try {
                        cb.call(vm, watcher.value);
                    } catch (error) {
                        handleError(error, vm, 'callback for immediate watcher \\"' + watcher.expression + '\\"');
                    }
                }
                return function unwatchFn() {
                    watcher.teardown();
                };
            };
        }
        var uid$3 = 0;
        function initMixin(Vue) {
            Vue.prototype._init = function(options) {
                var vm = this;
                vm._uid = uid$3++;
                var startTag, endTag;
                if (false) {}
                vm._isVue = true;
                if (options && options._isComponent) {
                    initInternalComponent(vm, options);
                } else {
                    vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
                }
                if (false) {} else {
                    vm._renderProxy = vm;
                }
                vm._self = vm;
                initLifecycle(vm);
                initEvents(vm);
                initRender(vm);
                callHook(vm, \\"beforeCreate\\");
                initInjections(vm);
                initState(vm);
                initProvide(vm);
                callHook(vm, \\"created\\");
                if (false) {}
                if (vm.$options.el) {
                    vm.$mount(vm.$options.el);
                }
            };
        }
        function initInternalComponent(vm, options) {
            var opts = vm.$options = Object.create(vm.constructor.options);
            var parentVnode = options._parentVnode;
            opts.parent = options.parent;
            opts._parentVnode = parentVnode;
            var vnodeComponentOptions = parentVnode.componentOptions;
            opts.propsData = vnodeComponentOptions.propsData;
            opts._parentListeners = vnodeComponentOptions.listeners;
            opts._renderChildren = vnodeComponentOptions.children;
            opts._componentTag = vnodeComponentOptions.tag;
            if (options.render) {
                opts.render = options.render;
                opts.staticRenderFns = options.staticRenderFns;
            }
        }
        function resolveConstructorOptions(Ctor) {
            var options = Ctor.options;
            if (Ctor.super) {
                var superOptions = resolveConstructorOptions(Ctor.super);
                var cachedSuperOptions = Ctor.superOptions;
                if (superOptions !== cachedSuperOptions) {
                    Ctor.superOptions = superOptions;
                    var modifiedOptions = resolveModifiedOptions(Ctor);
                    if (modifiedOptions) {
                        extend(Ctor.extendOptions, modifiedOptions);
                    }
                    options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
                    if (options.name) {
                        options.components[options.name] = Ctor;
                    }
                }
            }
            return options;
        }
        function resolveModifiedOptions(Ctor) {
            var modified;
            var latest = Ctor.options;
            var sealed = Ctor.sealedOptions;
            for (var key in latest) {
                if (latest[key] !== sealed[key]) {
                    if (!modified) {
                        modified = {};
                    }
                    modified[key] = latest[key];
                }
            }
            return modified;
        }
        function Vue(options) {
            if (false) {}
            this._init(options);
        }
        initMixin(Vue);
        stateMixin(Vue);
        eventsMixin(Vue);
        lifecycleMixin(Vue);
        renderMixin(Vue);
        function initUse(Vue) {
            Vue.use = function(plugin) {
                var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
                if (installedPlugins.indexOf(plugin) > -1) {
                    return this;
                }
                var args = toArray(arguments, 1);
                args.unshift(this);
                if (typeof plugin.install === \\"function\\") {
                    plugin.install.apply(plugin, args);
                } else if (typeof plugin === \\"function\\") {
                    plugin.apply(null, args);
                }
                installedPlugins.push(plugin);
                return this;
            };
        }
        function initMixin$1(Vue) {
            Vue.mixin = function(mixin) {
                this.options = mergeOptions(this.options, mixin);
                return this;
            };
        }
        function initExtend(Vue) {
            Vue.cid = 0;
            var cid = 1;
            Vue.extend = function(extendOptions) {
                extendOptions = extendOptions || {};
                var Super = this;
                var SuperId = Super.cid;
                var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
                if (cachedCtors[SuperId]) {
                    return cachedCtors[SuperId];
                }
                var name = extendOptions.name || Super.options.name;
                if (false) {}
                var Sub = function VueComponent(options) {
                    this._init(options);
                };
                Sub.prototype = Object.create(Super.prototype);
                Sub.prototype.constructor = Sub;
                Sub.cid = cid++;
                Sub.options = mergeOptions(Super.options, extendOptions);
                Sub[\\"super\\"] = Super;
                if (Sub.options.props) {
                    initProps$1(Sub);
                }
                if (Sub.options.computed) {
                    initComputed$1(Sub);
                }
                Sub.extend = Super.extend;
                Sub.mixin = Super.mixin;
                Sub.use = Super.use;
                ASSET_TYPES.forEach((function(type) {
                    Sub[type] = Super[type];
                }));
                if (name) {
                    Sub.options.components[name] = Sub;
                }
                Sub.superOptions = Super.options;
                Sub.extendOptions = extendOptions;
                Sub.sealedOptions = extend({}, Sub.options);
                cachedCtors[SuperId] = Sub;
                return Sub;
            };
        }
        function initProps$1(Comp) {
            var props = Comp.options.props;
            for (var key in props) {
                proxy(Comp.prototype, \\"_props\\", key);
            }
        }
        function initComputed$1(Comp) {
            var computed = Comp.options.computed;
            for (var key in computed) {
                defineComputed(Comp.prototype, key, computed[key]);
            }
        }
        function initAssetRegisters(Vue) {
            ASSET_TYPES.forEach((function(type) {
                Vue[type] = function(id, definition) {
                    if (!definition) {
                        return this.options[type + \\"s\\"][id];
                    } else {
                        if (false) {}
                        if (type === \\"component\\" && isPlainObject(definition)) {
                            definition.name = definition.name || id;
                            definition = this.options._base.extend(definition);
                        }
                        if (type === \\"directive\\" && typeof definition === \\"function\\") {
                            definition = {
                                bind: definition,
                                update: definition
                            };
                        }
                        this.options[type + \\"s\\"][id] = definition;
                        return definition;
                    }
                };
            }));
        }
        function getComponentName(opts) {
            return opts && (opts.Ctor.options.name || opts.tag);
        }
        function matches(pattern, name) {
            if (Array.isArray(pattern)) {
                return pattern.indexOf(name) > -1;
            } else if (typeof pattern === \\"string\\") {
                return pattern.split(\\",\\").indexOf(name) > -1;
            } else if (isRegExp(pattern)) {
                return pattern.test(name);
            }
            return false;
        }
        function pruneCache(keepAliveInstance, filter) {
            var cache = keepAliveInstance.cache;
            var keys = keepAliveInstance.keys;
            var _vnode = keepAliveInstance._vnode;
            for (var key in cache) {
                var cachedNode = cache[key];
                if (cachedNode) {
                    var name = getComponentName(cachedNode.componentOptions);
                    if (name && !filter(name)) {
                        pruneCacheEntry(cache, key, keys, _vnode);
                    }
                }
            }
        }
        function pruneCacheEntry(cache, key, keys, current) {
            var cached$$1 = cache[key];
            if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
                cached$$1.componentInstance.$destroy();
            }
            cache[key] = null;
            remove(keys, key);
        }
        var patternTypes = [ String, RegExp, Array ];
        var KeepAlive = {
            name: \\"keep-alive\\",
            abstract: true,
            props: {
                include: patternTypes,
                exclude: patternTypes,
                max: [ String, Number ]
            },
            created: function created() {
                this.cache = Object.create(null);
                this.keys = [];
            },
            destroyed: function destroyed() {
                for (var key in this.cache) {
                    pruneCacheEntry(this.cache, key, this.keys);
                }
            },
            mounted: function mounted() {
                var this$1 = this;
                this.$watch(\\"include\\", (function(val) {
                    pruneCache(this$1, (function(name) {
                        return matches(val, name);
                    }));
                }));
                this.$watch(\\"exclude\\", (function(val) {
                    pruneCache(this$1, (function(name) {
                        return !matches(val, name);
                    }));
                }));
            },
            render: function render() {
                var slot = this.$slots.default;
                var vnode = getFirstComponentChild(slot);
                var componentOptions = vnode && vnode.componentOptions;
                if (componentOptions) {
                    var name = getComponentName(componentOptions);
                    var ref = this;
                    var include = ref.include;
                    var exclude = ref.exclude;
                    if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
                        return vnode;
                    }
                    var ref$1 = this;
                    var cache = ref$1.cache;
                    var keys = ref$1.keys;
                    var key = vnode.key == null ? componentOptions.Ctor.cid + (componentOptions.tag ? \\"::\\" + componentOptions.tag : \\"\\") : vnode.key;
                    if (cache[key]) {
                        vnode.componentInstance = cache[key].componentInstance;
                        remove(keys, key);
                        keys.push(key);
                    } else {
                        cache[key] = vnode;
                        keys.push(key);
                        if (this.max && keys.length > parseInt(this.max)) {
                            pruneCacheEntry(cache, keys[0], keys, this._vnode);
                        }
                    }
                    vnode.data.keepAlive = true;
                }
                return vnode || slot && slot[0];
            }
        };
        var builtInComponents = {
            KeepAlive: KeepAlive
        };
        function initGlobalAPI(Vue) {
            var configDef = {};
            configDef.get = function() {
                return config;
            };
            if (false) {}
            Object.defineProperty(Vue, \\"config\\", configDef);
            Vue.util = {
                warn: warn,
                extend: extend,
                mergeOptions: mergeOptions,
                defineReactive: defineReactive$$1
            };
            Vue.set = set;
            Vue.delete = del;
            Vue.nextTick = nextTick;
            Vue.observable = function(obj) {
                observe(obj);
                return obj;
            };
            Vue.options = Object.create(null);
            ASSET_TYPES.forEach((function(type) {
                Vue.options[type + \\"s\\"] = Object.create(null);
            }));
            Vue.options._base = Vue;
            extend(Vue.options.components, builtInComponents);
            initUse(Vue);
            initMixin$1(Vue);
            initExtend(Vue);
            initAssetRegisters(Vue);
        }
        initGlobalAPI(Vue);
        Object.defineProperty(Vue.prototype, \\"$isServer\\", {
            get: isServerRendering
        });
        Object.defineProperty(Vue.prototype, \\"$ssrContext\\", {
            get: function get() {
                return this.$vnode && this.$vnode.ssrContext;
            }
        });
        Object.defineProperty(Vue, \\"FunctionalRenderContext\\", {
            value: FunctionalRenderContext
        });
        Vue.version = \\"2.6.11\\";
        var isReservedAttr = makeMap(\\"style,class\\");
        var acceptValue = makeMap(\\"input,textarea,option,select,progress\\");
        var mustUseProp = function mustUseProp(tag, type, attr) {
            return attr === \\"value\\" && acceptValue(tag) && type !== \\"button\\" || attr === \\"selected\\" && tag === \\"option\\" || attr === \\"checked\\" && tag === \\"input\\" || attr === \\"muted\\" && tag === \\"video\\";
        };
        var isEnumeratedAttr = makeMap(\\"contenteditable,draggable,spellcheck\\");
        var isValidContentEditableValue = makeMap(\\"events,caret,typing,plaintext-only\\");
        var convertEnumeratedValue = function convertEnumeratedValue(key, value) {
            return isFalsyAttrValue(value) || value === \\"false\\" ? \\"false\\" : key === \\"contenteditable\\" && isValidContentEditableValue(value) ? value : \\"true\\";
        };
        var isBooleanAttr = makeMap(\\"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,\\" + \\"default,defaultchecked,defaultmuted,defaultselected,defer,disabled,\\" + \\"enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,\\" + \\"muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,\\" + \\"required,reversed,scoped,seamless,selected,sortable,translate,\\" + \\"truespeed,typemustmatch,visible\\");
        var xlinkNS = \\"http://www.w3.org/1999/xlink\\";
        var isXlink = function isXlink(name) {
            return name.charAt(5) === \\":\\" && name.slice(0, 5) === \\"xlink\\";
        };
        var getXlinkProp = function getXlinkProp(name) {
            return isXlink(name) ? name.slice(6, name.length) : \\"\\";
        };
        var isFalsyAttrValue = function isFalsyAttrValue(val) {
            return val == null || val === false;
        };
        function genClassForVnode(vnode) {
            var data = vnode.data;
            var parentNode = vnode;
            var childNode = vnode;
            while (isDef(childNode.componentInstance)) {
                childNode = childNode.componentInstance._vnode;
                if (childNode && childNode.data) {
                    data = mergeClassData(childNode.data, data);
                }
            }
            while (isDef(parentNode = parentNode.parent)) {
                if (parentNode && parentNode.data) {
                    data = mergeClassData(data, parentNode.data);
                }
            }
            return renderClass(data.staticClass, data.class);
        }
        function mergeClassData(child, parent) {
            return {
                staticClass: concat(child.staticClass, parent.staticClass),
                class: isDef(child.class) ? [ child.class, parent.class ] : parent.class
            };
        }
        function renderClass(staticClass, dynamicClass) {
            if (isDef(staticClass) || isDef(dynamicClass)) {
                return concat(staticClass, stringifyClass(dynamicClass));
            }
            return \\"\\";
        }
        function concat(a, b) {
            return a ? b ? a + \\" \\" + b : a : b || \\"\\";
        }
        function stringifyClass(value) {
            if (Array.isArray(value)) {
                return stringifyArray(value);
            }
            if (isObject(value)) {
                return stringifyObject(value);
            }
            if (typeof value === \\"string\\") {
                return value;
            }
            return \\"\\";
        }
        function stringifyArray(value) {
            var res = \\"\\";
            var stringified;
            for (var i = 0, l = value.length; i < l; i++) {
                if (isDef(stringified = stringifyClass(value[i])) && stringified !== \\"\\") {
                    if (res) {
                        res += \\" \\";
                    }
                    res += stringified;
                }
            }
            return res;
        }
        function stringifyObject(value) {
            var res = \\"\\";
            for (var key in value) {
                if (value[key]) {
                    if (res) {
                        res += \\" \\";
                    }
                    res += key;
                }
            }
            return res;
        }
        var namespaceMap = {
            svg: \\"http://www.w3.org/2000/svg\\",
            math: \\"http://www.w3.org/1998/Math/MathML\\"
        };
        var isHTMLTag = makeMap(\\"html,body,base,head,link,meta,style,title,\\" + \\"address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,\\" + \\"div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,\\" + \\"a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,\\" + \\"s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,\\" + \\"embed,object,param,source,canvas,script,noscript,del,ins,\\" + \\"caption,col,colgroup,table,thead,tbody,td,th,tr,\\" + \\"button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,\\" + \\"output,progress,select,textarea,\\" + \\"details,dialog,menu,menuitem,summary,\\" + \\"content,element,shadow,template,blockquote,iframe,tfoot\\");
        var isSVG = makeMap(\\"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,\\" + \\"foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,\\" + \\"polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\\", true);
        var isReservedTag = function isReservedTag(tag) {
            return isHTMLTag(tag) || isSVG(tag);
        };
        function getTagNamespace(tag) {
            if (isSVG(tag)) {
                return \\"svg\\";
            }
            if (tag === \\"math\\") {
                return \\"math\\";
            }
        }
        var unknownElementCache = Object.create(null);
        function isUnknownElement(tag) {
            if (!inBrowser) {
                return true;
            }
            if (isReservedTag(tag)) {
                return false;
            }
            tag = tag.toLowerCase();
            if (unknownElementCache[tag] != null) {
                return unknownElementCache[tag];
            }
            var el = document.createElement(tag);
            if (tag.indexOf(\\"-\\") > -1) {
                return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
            } else {
                return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
            }
        }
        var isTextInputType = makeMap(\\"text,number,password,search,email,tel,url\\");
        function query(el) {
            if (typeof el === \\"string\\") {
                var selected = document.querySelector(el);
                if (!selected) {
                    false && false;
                    return document.createElement(\\"div\\");
                }
                return selected;
            } else {
                return el;
            }
        }
        function createElement$1(tagName, vnode) {
            var elm = document.createElement(tagName);
            if (tagName !== \\"select\\") {
                return elm;
            }
            if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
                elm.setAttribute(\\"multiple\\", \\"multiple\\");
            }
            return elm;
        }
        function createElementNS(namespace, tagName) {
            return document.createElementNS(namespaceMap[namespace], tagName);
        }
        function createTextNode(text) {
            return document.createTextNode(text);
        }
        function createComment(text) {
            return document.createComment(text);
        }
        function insertBefore(parentNode, newNode, referenceNode) {
            parentNode.insertBefore(newNode, referenceNode);
        }
        function removeChild(node, child) {
            node.removeChild(child);
        }
        function appendChild(node, child) {
            node.appendChild(child);
        }
        function parentNode(node) {
            return node.parentNode;
        }
        function nextSibling(node) {
            return node.nextSibling;
        }
        function tagName(node) {
            return node.tagName;
        }
        function setTextContent(node, text) {
            node.textContent = text;
        }
        function setStyleScope(node, scopeId) {
            node.setAttribute(scopeId, \\"\\");
        }
        var nodeOps = Object.freeze({
            createElement: createElement$1,
            createElementNS: createElementNS,
            createTextNode: createTextNode,
            createComment: createComment,
            insertBefore: insertBefore,
            removeChild: removeChild,
            appendChild: appendChild,
            parentNode: parentNode,
            nextSibling: nextSibling,
            tagName: tagName,
            setTextContent: setTextContent,
            setStyleScope: setStyleScope
        });
        var ref = {
            create: function create(_, vnode) {
                registerRef(vnode);
            },
            update: function update(oldVnode, vnode) {
                if (oldVnode.data.ref !== vnode.data.ref) {
                    registerRef(oldVnode, true);
                    registerRef(vnode);
                }
            },
            destroy: function destroy(vnode) {
                registerRef(vnode, true);
            }
        };
        function registerRef(vnode, isRemoval) {
            var key = vnode.data.ref;
            if (!isDef(key)) {
                return;
            }
            var vm = vnode.context;
            var ref = vnode.componentInstance || vnode.elm;
            var refs = vm.$refs;
            if (isRemoval) {
                if (Array.isArray(refs[key])) {
                    remove(refs[key], ref);
                } else if (refs[key] === ref) {
                    refs[key] = undefined;
                }
            } else {
                if (vnode.data.refInFor) {
                    if (!Array.isArray(refs[key])) {
                        refs[key] = [ ref ];
                    } else if (refs[key].indexOf(ref) < 0) {
                        refs[key].push(ref);
                    }
                } else {
                    refs[key] = ref;
                }
            }
        }
        var emptyNode = new VNode(\\"\\", {}, []);
        var hooks = [ \\"create\\", \\"activate\\", \\"update\\", \\"remove\\", \\"destroy\\" ];
        function sameVnode(a, b) {
            return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
        }
        function sameInputType(a, b) {
            if (a.tag !== \\"input\\") {
                return true;
            }
            var i;
            var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
            var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
            return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
        }
        function createKeyToOldIdx(children, beginIdx, endIdx) {
            var i, key;
            var map = {};
            for (i = beginIdx; i <= endIdx; ++i) {
                key = children[i].key;
                if (isDef(key)) {
                    map[key] = i;
                }
            }
            return map;
        }
        function createPatchFunction(backend) {
            var i, j;
            var cbs = {};
            var modules = backend.modules;
            var nodeOps = backend.nodeOps;
            for (i = 0; i < hooks.length; ++i) {
                cbs[hooks[i]] = [];
                for (j = 0; j < modules.length; ++j) {
                    if (isDef(modules[j][hooks[i]])) {
                        cbs[hooks[i]].push(modules[j][hooks[i]]);
                    }
                }
            }
            function emptyNodeAt(elm) {
                return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
            }
            function createRmCb(childElm, listeners) {
                function remove$$1() {
                    if (--remove$$1.listeners === 0) {
                        removeNode(childElm);
                    }
                }
                remove$$1.listeners = listeners;
                return remove$$1;
            }
            function removeNode(el) {
                var parent = nodeOps.parentNode(el);
                if (isDef(parent)) {
                    nodeOps.removeChild(parent, el);
                }
            }
            function isUnknownElement$$1(vnode, inVPre) {
                return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some((function(ignore) {
                    return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
                }))) && config.isUnknownElement(vnode.tag);
            }
            var creatingElmInVPre = 0;
            function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
                if (isDef(vnode.elm) && isDef(ownerArray)) {
                    vnode = ownerArray[index] = cloneVNode(vnode);
                }
                vnode.isRootInsert = !nested;
                if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
                    return;
                }
                var data = vnode.data;
                var children = vnode.children;
                var tag = vnode.tag;
                if (isDef(tag)) {
                    if (false) {}
                    vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
                    setScope(vnode);
                    {
                        createChildren(vnode, children, insertedVnodeQueue);
                        if (isDef(data)) {
                            invokeCreateHooks(vnode, insertedVnodeQueue);
                        }
                        insert(parentElm, vnode.elm, refElm);
                    }
                    if (false) {}
                } else if (isTrue(vnode.isComment)) {
                    vnode.elm = nodeOps.createComment(vnode.text);
                    insert(parentElm, vnode.elm, refElm);
                } else {
                    vnode.elm = nodeOps.createTextNode(vnode.text);
                    insert(parentElm, vnode.elm, refElm);
                }
            }
            function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
                var i = vnode.data;
                if (isDef(i)) {
                    var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
                    if (isDef(i = i.hook) && isDef(i = i.init)) {
                        i(vnode, false);
                    }
                    if (isDef(vnode.componentInstance)) {
                        initComponent(vnode, insertedVnodeQueue);
                        insert(parentElm, vnode.elm, refElm);
                        if (isTrue(isReactivated)) {
                            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
                        }
                        return true;
                    }
                }
            }
            function initComponent(vnode, insertedVnodeQueue) {
                if (isDef(vnode.data.pendingInsert)) {
                    insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
                    vnode.data.pendingInsert = null;
                }
                vnode.elm = vnode.componentInstance.$el;
                if (isPatchable(vnode)) {
                    invokeCreateHooks(vnode, insertedVnodeQueue);
                    setScope(vnode);
                } else {
                    registerRef(vnode);
                    insertedVnodeQueue.push(vnode);
                }
            }
            function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
                var i;
                var innerNode = vnode;
                while (innerNode.componentInstance) {
                    innerNode = innerNode.componentInstance._vnode;
                    if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
                        for (i = 0; i < cbs.activate.length; ++i) {
                            cbs.activate[i](emptyNode, innerNode);
                        }
                        insertedVnodeQueue.push(innerNode);
                        break;
                    }
                }
                insert(parentElm, vnode.elm, refElm);
            }
            function insert(parent, elm, ref$$1) {
                if (isDef(parent)) {
                    if (isDef(ref$$1)) {
                        if (nodeOps.parentNode(ref$$1) === parent) {
                            nodeOps.insertBefore(parent, elm, ref$$1);
                        }
                    } else {
                        nodeOps.appendChild(parent, elm);
                    }
                }
            }
            function createChildren(vnode, children, insertedVnodeQueue) {
                if (Array.isArray(children)) {
                    if (false) {}
                    for (var i = 0; i < children.length; ++i) {
                        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
                    }
                } else if (isPrimitive(vnode.text)) {
                    nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
                }
            }
            function isPatchable(vnode) {
                while (vnode.componentInstance) {
                    vnode = vnode.componentInstance._vnode;
                }
                return isDef(vnode.tag);
            }
            function invokeCreateHooks(vnode, insertedVnodeQueue) {
                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                    cbs.create[i$1](emptyNode, vnode);
                }
                i = vnode.data.hook;
                if (isDef(i)) {
                    if (isDef(i.create)) {
                        i.create(emptyNode, vnode);
                    }
                    if (isDef(i.insert)) {
                        insertedVnodeQueue.push(vnode);
                    }
                }
            }
            function setScope(vnode) {
                var i;
                if (isDef(i = vnode.fnScopeId)) {
                    nodeOps.setStyleScope(vnode.elm, i);
                } else {
                    var ancestor = vnode;
                    while (ancestor) {
                        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
                            nodeOps.setStyleScope(vnode.elm, i);
                        }
                        ancestor = ancestor.parent;
                    }
                }
                if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
                    nodeOps.setStyleScope(vnode.elm, i);
                }
            }
            function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
                for (;startIdx <= endIdx; ++startIdx) {
                    createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
                }
            }
            function invokeDestroyHook(vnode) {
                var i, j;
                var data = vnode.data;
                if (isDef(data)) {
                    if (isDef(i = data.hook) && isDef(i = i.destroy)) {
                        i(vnode);
                    }
                    for (i = 0; i < cbs.destroy.length; ++i) {
                        cbs.destroy[i](vnode);
                    }
                }
                if (isDef(i = vnode.children)) {
                    for (j = 0; j < vnode.children.length; ++j) {
                        invokeDestroyHook(vnode.children[j]);
                    }
                }
            }
            function removeVnodes(vnodes, startIdx, endIdx) {
                for (;startIdx <= endIdx; ++startIdx) {
                    var ch = vnodes[startIdx];
                    if (isDef(ch)) {
                        if (isDef(ch.tag)) {
                            removeAndInvokeRemoveHook(ch);
                            invokeDestroyHook(ch);
                        } else {
                            removeNode(ch.elm);
                        }
                    }
                }
            }
            function removeAndInvokeRemoveHook(vnode, rm) {
                if (isDef(rm) || isDef(vnode.data)) {
                    var i;
                    var listeners = cbs.remove.length + 1;
                    if (isDef(rm)) {
                        rm.listeners += listeners;
                    } else {
                        rm = createRmCb(vnode.elm, listeners);
                    }
                    if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
                        removeAndInvokeRemoveHook(i, rm);
                    }
                    for (i = 0; i < cbs.remove.length; ++i) {
                        cbs.remove[i](vnode, rm);
                    }
                    if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
                        i(vnode, rm);
                    } else {
                        rm();
                    }
                } else {
                    removeNode(vnode.elm);
                }
            }
            function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
                var oldStartIdx = 0;
                var newStartIdx = 0;
                var oldEndIdx = oldCh.length - 1;
                var oldStartVnode = oldCh[0];
                var oldEndVnode = oldCh[oldEndIdx];
                var newEndIdx = newCh.length - 1;
                var newStartVnode = newCh[0];
                var newEndVnode = newCh[newEndIdx];
                var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
                var canMove = !removeOnly;
                if (false) {}
                while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
                    if (isUndef(oldStartVnode)) {
                        oldStartVnode = oldCh[++oldStartIdx];
                    } else if (isUndef(oldEndVnode)) {
                        oldEndVnode = oldCh[--oldEndIdx];
                    } else if (sameVnode(oldStartVnode, newStartVnode)) {
                        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                        oldStartVnode = oldCh[++oldStartIdx];
                        newStartVnode = newCh[++newStartIdx];
                    } else if (sameVnode(oldEndVnode, newEndVnode)) {
                        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                        oldEndVnode = oldCh[--oldEndIdx];
                        newEndVnode = newCh[--newEndIdx];
                    } else if (sameVnode(oldStartVnode, newEndVnode)) {
                        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
                        oldStartVnode = oldCh[++oldStartIdx];
                        newEndVnode = newCh[--newEndIdx];
                    } else if (sameVnode(oldEndVnode, newStartVnode)) {
                        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                        oldEndVnode = oldCh[--oldEndIdx];
                        newStartVnode = newCh[++newStartIdx];
                    } else {
                        if (isUndef(oldKeyToIdx)) {
                            oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                        }
                        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
                        if (isUndef(idxInOld)) {
                            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                        } else {
                            vnodeToMove = oldCh[idxInOld];
                            if (sameVnode(vnodeToMove, newStartVnode)) {
                                patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                                oldCh[idxInOld] = undefined;
                                canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
                            } else {
                                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                            }
                        }
                        newStartVnode = newCh[++newStartIdx];
                    }
                }
                if (oldStartIdx > oldEndIdx) {
                    refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
                    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
                } else if (newStartIdx > newEndIdx) {
                    removeVnodes(oldCh, oldStartIdx, oldEndIdx);
                }
            }
            function checkDuplicateKeys(children) {
                var seenKeys = {};
                for (var i = 0; i < children.length; i++) {
                    var vnode = children[i];
                    var key = vnode.key;
                    if (isDef(key)) {
                        if (seenKeys[key]) {
                            warn(\\"Duplicate keys detected: '\\" + key + \\"'. This may cause an update error.\\", vnode.context);
                        } else {
                            seenKeys[key] = true;
                        }
                    }
                }
            }
            function findIdxInOld(node, oldCh, start, end) {
                for (var i = start; i < end; i++) {
                    var c = oldCh[i];
                    if (isDef(c) && sameVnode(node, c)) {
                        return i;
                    }
                }
            }
            function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
                if (oldVnode === vnode) {
                    return;
                }
                if (isDef(vnode.elm) && isDef(ownerArray)) {
                    vnode = ownerArray[index] = cloneVNode(vnode);
                }
                var elm = vnode.elm = oldVnode.elm;
                if (isTrue(oldVnode.isAsyncPlaceholder)) {
                    if (isDef(vnode.asyncFactory.resolved)) {
                        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
                    } else {
                        vnode.isAsyncPlaceholder = true;
                    }
                    return;
                }
                if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
                    vnode.componentInstance = oldVnode.componentInstance;
                    return;
                }
                var i;
                var data = vnode.data;
                if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
                    i(oldVnode, vnode);
                }
                var oldCh = oldVnode.children;
                var ch = vnode.children;
                if (isDef(data) && isPatchable(vnode)) {
                    for (i = 0; i < cbs.update.length; ++i) {
                        cbs.update[i](oldVnode, vnode);
                    }
                    if (isDef(i = data.hook) && isDef(i = i.update)) {
                        i(oldVnode, vnode);
                    }
                }
                if (isUndef(vnode.text)) {
                    if (isDef(oldCh) && isDef(ch)) {
                        if (oldCh !== ch) {
                            updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
                        }
                    } else if (isDef(ch)) {
                        if (false) {}
                        if (isDef(oldVnode.text)) {
                            nodeOps.setTextContent(elm, \\"\\");
                        }
                        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
                    } else if (isDef(oldCh)) {
                        removeVnodes(oldCh, 0, oldCh.length - 1);
                    } else if (isDef(oldVnode.text)) {
                        nodeOps.setTextContent(elm, \\"\\");
                    }
                } else if (oldVnode.text !== vnode.text) {
                    nodeOps.setTextContent(elm, vnode.text);
                }
                if (isDef(data)) {
                    if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
                        i(oldVnode, vnode);
                    }
                }
            }
            function invokeInsertHook(vnode, queue, initial) {
                if (isTrue(initial) && isDef(vnode.parent)) {
                    vnode.parent.data.pendingInsert = queue;
                } else {
                    for (var i = 0; i < queue.length; ++i) {
                        queue[i].data.hook.insert(queue[i]);
                    }
                }
            }
            var hydrationBailed = false;
            var isRenderedModule = makeMap(\\"attrs,class,staticClass,staticStyle,key\\");
            function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
                var i;
                var tag = vnode.tag;
                var data = vnode.data;
                var children = vnode.children;
                inVPre = inVPre || data && data.pre;
                vnode.elm = elm;
                if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
                    vnode.isAsyncPlaceholder = true;
                    return true;
                }
                if (false) {}
                if (isDef(data)) {
                    if (isDef(i = data.hook) && isDef(i = i.init)) {
                        i(vnode, true);
                    }
                    if (isDef(i = vnode.componentInstance)) {
                        initComponent(vnode, insertedVnodeQueue);
                        return true;
                    }
                }
                if (isDef(tag)) {
                    if (isDef(children)) {
                        if (!elm.hasChildNodes()) {
                            createChildren(vnode, children, insertedVnodeQueue);
                        } else {
                            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
                                if (i !== elm.innerHTML) {
                                    if (false) {}
                                    return false;
                                }
                            } else {
                                var childrenMatch = true;
                                var childNode = elm.firstChild;
                                for (var i$1 = 0; i$1 < children.length; i$1++) {
                                    if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                                        childrenMatch = false;
                                        break;
                                    }
                                    childNode = childNode.nextSibling;
                                }
                                if (!childrenMatch || childNode) {
                                    if (false) {}
                                    return false;
                                }
                            }
                        }
                    }
                    if (isDef(data)) {
                        var fullInvoke = false;
                        for (var key in data) {
                            if (!isRenderedModule(key)) {
                                fullInvoke = true;
                                invokeCreateHooks(vnode, insertedVnodeQueue);
                                break;
                            }
                        }
                        if (!fullInvoke && data[\\"class\\"]) {
                            traverse(data[\\"class\\"]);
                        }
                    }
                } else if (elm.data !== vnode.text) {
                    elm.data = vnode.text;
                }
                return true;
            }
            function assertNodeMatch(node, vnode, inVPre) {
                if (isDef(vnode.tag)) {
                    return vnode.tag.indexOf(\\"vue-component\\") === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
                } else {
                    return node.nodeType === (vnode.isComment ? 8 : 3);
                }
            }
            return function patch(oldVnode, vnode, hydrating, removeOnly) {
                if (isUndef(vnode)) {
                    if (isDef(oldVnode)) {
                        invokeDestroyHook(oldVnode);
                    }
                    return;
                }
                var isInitialPatch = false;
                var insertedVnodeQueue = [];
                if (isUndef(oldVnode)) {
                    isInitialPatch = true;
                    createElm(vnode, insertedVnodeQueue);
                } else {
                    var isRealElement = isDef(oldVnode.nodeType);
                    if (!isRealElement && sameVnode(oldVnode, vnode)) {
                        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
                    } else {
                        if (isRealElement) {
                            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                                oldVnode.removeAttribute(SSR_ATTR);
                                hydrating = true;
                            }
                            if (isTrue(hydrating)) {
                                if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                                    invokeInsertHook(vnode, insertedVnodeQueue, true);
                                    return oldVnode;
                                } else if (false) {}
                            }
                            oldVnode = emptyNodeAt(oldVnode);
                        }
                        var oldElm = oldVnode.elm;
                        var parentElm = nodeOps.parentNode(oldElm);
                        createElm(vnode, insertedVnodeQueue, oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm));
                        if (isDef(vnode.parent)) {
                            var ancestor = vnode.parent;
                            var patchable = isPatchable(vnode);
                            while (ancestor) {
                                for (var i = 0; i < cbs.destroy.length; ++i) {
                                    cbs.destroy[i](ancestor);
                                }
                                ancestor.elm = vnode.elm;
                                if (patchable) {
                                    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                                        cbs.create[i$1](emptyNode, ancestor);
                                    }
                                    var insert = ancestor.data.hook.insert;
                                    if (insert.merged) {
                                        for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                                            insert.fns[i$2]();
                                        }
                                    }
                                } else {
                                    registerRef(ancestor);
                                }
                                ancestor = ancestor.parent;
                            }
                        }
                        if (isDef(parentElm)) {
                            removeVnodes([ oldVnode ], 0, 0);
                        } else if (isDef(oldVnode.tag)) {
                            invokeDestroyHook(oldVnode);
                        }
                    }
                }
                invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
                return vnode.elm;
            };
        }
        var directives = {
            create: updateDirectives,
            update: updateDirectives,
            destroy: function unbindDirectives(vnode) {
                updateDirectives(vnode, emptyNode);
            }
        };
        function updateDirectives(oldVnode, vnode) {
            if (oldVnode.data.directives || vnode.data.directives) {
                _update(oldVnode, vnode);
            }
        }
        function _update(oldVnode, vnode) {
            var isCreate = oldVnode === emptyNode;
            var isDestroy = vnode === emptyNode;
            var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
            var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
            var dirsWithInsert = [];
            var dirsWithPostpatch = [];
            var key, oldDir, dir;
            for (key in newDirs) {
                oldDir = oldDirs[key];
                dir = newDirs[key];
                if (!oldDir) {
                    callHook$1(dir, \\"bind\\", vnode, oldVnode);
                    if (dir.def && dir.def.inserted) {
                        dirsWithInsert.push(dir);
                    }
                } else {
                    dir.oldValue = oldDir.value;
                    dir.oldArg = oldDir.arg;
                    callHook$1(dir, \\"update\\", vnode, oldVnode);
                    if (dir.def && dir.def.componentUpdated) {
                        dirsWithPostpatch.push(dir);
                    }
                }
            }
            if (dirsWithInsert.length) {
                var callInsert = function callInsert() {
                    for (var i = 0; i < dirsWithInsert.length; i++) {
                        callHook$1(dirsWithInsert[i], \\"inserted\\", vnode, oldVnode);
                    }
                };
                if (isCreate) {
                    mergeVNodeHook(vnode, \\"insert\\", callInsert);
                } else {
                    callInsert();
                }
            }
            if (dirsWithPostpatch.length) {
                mergeVNodeHook(vnode, \\"postpatch\\", (function() {
                    for (var i = 0; i < dirsWithPostpatch.length; i++) {
                        callHook$1(dirsWithPostpatch[i], \\"componentUpdated\\", vnode, oldVnode);
                    }
                }));
            }
            if (!isCreate) {
                for (key in oldDirs) {
                    if (!newDirs[key]) {
                        callHook$1(oldDirs[key], \\"unbind\\", oldVnode, oldVnode, isDestroy);
                    }
                }
            }
        }
        var emptyModifiers = Object.create(null);
        function normalizeDirectives$1(dirs, vm) {
            var res = Object.create(null);
            if (!dirs) {
                return res;
            }
            var i, dir;
            for (i = 0; i < dirs.length; i++) {
                dir = dirs[i];
                if (!dir.modifiers) {
                    dir.modifiers = emptyModifiers;
                }
                res[getRawDirName(dir)] = dir;
                dir.def = resolveAsset(vm.$options, \\"directives\\", dir.name, true);
            }
            return res;
        }
        function getRawDirName(dir) {
            return dir.rawName || dir.name + \\".\\" + Object.keys(dir.modifiers || {}).join(\\".\\");
        }
        function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
            var fn = dir.def && dir.def[hook];
            if (fn) {
                try {
                    fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
                } catch (e) {
                    handleError(e, vnode.context, \\"directive \\" + dir.name + \\" \\" + hook + \\" hook\\");
                }
            }
        }
        var baseModules = [ ref, directives ];
        function updateAttrs(oldVnode, vnode) {
            var opts = vnode.componentOptions;
            if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
                return;
            }
            if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
                return;
            }
            var key, cur, old;
            var elm = vnode.elm;
            var oldAttrs = oldVnode.data.attrs || {};
            var attrs = vnode.data.attrs || {};
            if (isDef(attrs.__ob__)) {
                attrs = vnode.data.attrs = extend({}, attrs);
            }
            for (key in attrs) {
                cur = attrs[key];
                old = oldAttrs[key];
                if (old !== cur) {
                    setAttr(elm, key, cur);
                }
            }
            if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
                setAttr(elm, \\"value\\", attrs.value);
            }
            for (key in oldAttrs) {
                if (isUndef(attrs[key])) {
                    if (isXlink(key)) {
                        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
                    } else if (!isEnumeratedAttr(key)) {
                        elm.removeAttribute(key);
                    }
                }
            }
        }
        function setAttr(el, key, value) {
            if (el.tagName.indexOf(\\"-\\") > -1) {
                baseSetAttr(el, key, value);
            } else if (isBooleanAttr(key)) {
                if (isFalsyAttrValue(value)) {
                    el.removeAttribute(key);
                } else {
                    value = key === \\"allowfullscreen\\" && el.tagName === \\"EMBED\\" ? \\"true\\" : key;
                    el.setAttribute(key, value);
                }
            } else if (isEnumeratedAttr(key)) {
                el.setAttribute(key, convertEnumeratedValue(key, value));
            } else if (isXlink(key)) {
                if (isFalsyAttrValue(value)) {
                    el.removeAttributeNS(xlinkNS, getXlinkProp(key));
                } else {
                    el.setAttributeNS(xlinkNS, key, value);
                }
            } else {
                baseSetAttr(el, key, value);
            }
        }
        function baseSetAttr(el, key, value) {
            if (isFalsyAttrValue(value)) {
                el.removeAttribute(key);
            } else {
                if (isIE && !isIE9 && el.tagName === \\"TEXTAREA\\" && key === \\"placeholder\\" && value !== \\"\\" && !el.__ieph) {
                    var blocker = function blocker(e) {
                        e.stopImmediatePropagation();
                        el.removeEventListener(\\"input\\", blocker);
                    };
                    el.addEventListener(\\"input\\", blocker);
                    el.__ieph = true;
                }
                el.setAttribute(key, value);
            }
        }
        var attrs = {
            create: updateAttrs,
            update: updateAttrs
        };
        function updateClass(oldVnode, vnode) {
            var el = vnode.elm;
            var data = vnode.data;
            var oldData = oldVnode.data;
            if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
                return;
            }
            var cls = genClassForVnode(vnode);
            var transitionClass = el._transitionClasses;
            if (isDef(transitionClass)) {
                cls = concat(cls, stringifyClass(transitionClass));
            }
            if (cls !== el._prevClass) {
                el.setAttribute(\\"class\\", cls);
                el._prevClass = cls;
            }
        }
        var klass = {
            create: updateClass,
            update: updateClass
        };
        var RANGE_TOKEN = \\"__r\\";
        var CHECKBOX_RADIO_TOKEN = \\"__c\\";
        function normalizeEvents(on) {
            if (isDef(on[RANGE_TOKEN])) {
                var event = isIE ? \\"change\\" : \\"input\\";
                on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
                delete on[RANGE_TOKEN];
            }
            if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
                on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
                delete on[CHECKBOX_RADIO_TOKEN];
            }
        }
        var target$1;
        function createOnceHandler$1(event, handler, capture) {
            var _target = target$1;
            return function onceHandler() {
                var res = handler.apply(null, arguments);
                if (res !== null) {
                    remove$2(event, onceHandler, capture, _target);
                }
            };
        }
        var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
        function add$1(name, handler, capture, passive) {
            if (useMicrotaskFix) {
                var attachedTimestamp = currentFlushTimestamp;
                var original = handler;
                handler = original._wrapper = function(e) {
                    if (e.target === e.currentTarget || e.timeStamp >= attachedTimestamp || e.timeStamp <= 0 || e.target.ownerDocument !== document) {
                        return original.apply(this, arguments);
                    }
                };
            }
            target$1.addEventListener(name, handler, supportsPassive ? {
                capture: capture,
                passive: passive
            } : capture);
        }
        function remove$2(name, handler, capture, _target) {
            (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
        }
        function updateDOMListeners(oldVnode, vnode) {
            if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
                return;
            }
            var on = vnode.data.on || {};
            var oldOn = oldVnode.data.on || {};
            target$1 = vnode.elm;
            normalizeEvents(on);
            updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
            target$1 = undefined;
        }
        var events = {
            create: updateDOMListeners,
            update: updateDOMListeners
        };
        var svgContainer;
        function updateDOMProps(oldVnode, vnode) {
            if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
                return;
            }
            var key, cur;
            var elm = vnode.elm;
            var oldProps = oldVnode.data.domProps || {};
            var props = vnode.data.domProps || {};
            if (isDef(props.__ob__)) {
                props = vnode.data.domProps = extend({}, props);
            }
            for (key in oldProps) {
                if (!(key in props)) {
                    elm[key] = \\"\\";
                }
            }
            for (key in props) {
                cur = props[key];
                if (key === \\"textContent\\" || key === \\"innerHTML\\") {
                    if (vnode.children) {
                        vnode.children.length = 0;
                    }
                    if (cur === oldProps[key]) {
                        continue;
                    }
                    if (elm.childNodes.length === 1) {
                        elm.removeChild(elm.childNodes[0]);
                    }
                }
                if (key === \\"value\\" && elm.tagName !== \\"PROGRESS\\") {
                    elm._value = cur;
                    var strCur = isUndef(cur) ? \\"\\" : String(cur);
                    if (shouldUpdateValue(elm, strCur)) {
                        elm.value = strCur;
                    }
                } else if (key === \\"innerHTML\\" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
                    svgContainer = svgContainer || document.createElement(\\"div\\");
                    svgContainer.innerHTML = \\"<svg>\\" + cur + \\"</svg>\\";
                    var svg = svgContainer.firstChild;
                    while (elm.firstChild) {
                        elm.removeChild(elm.firstChild);
                    }
                    while (svg.firstChild) {
                        elm.appendChild(svg.firstChild);
                    }
                } else if (cur !== oldProps[key]) {
                    try {
                        elm[key] = cur;
                    } catch (e) {}
                }
            }
        }
        function shouldUpdateValue(elm, checkVal) {
            return !elm.composing && (elm.tagName === \\"OPTION\\" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
        }
        function isNotInFocusAndDirty(elm, checkVal) {
            var notInFocus = true;
            try {
                notInFocus = document.activeElement !== elm;
            } catch (e) {}
            return notInFocus && elm.value !== checkVal;
        }
        function isDirtyWithModifiers(elm, newVal) {
            var value = elm.value;
            var modifiers = elm._vModifiers;
            if (isDef(modifiers)) {
                if (modifiers.number) {
                    return toNumber(value) !== toNumber(newVal);
                }
                if (modifiers.trim) {
                    return value.trim() !== newVal.trim();
                }
            }
            return value !== newVal;
        }
        var domProps = {
            create: updateDOMProps,
            update: updateDOMProps
        };
        var parseStyleText = cached((function(cssText) {
            var res = {};
            var listDelimiter = /;(?![^(]*\\\\))/g;
            var propertyDelimiter = /:(.+)/;
            cssText.split(listDelimiter).forEach((function(item) {
                if (item) {
                    var tmp = item.split(propertyDelimiter);
                    tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
                }
            }));
            return res;
        }));
        function normalizeStyleData(data) {
            var style = normalizeStyleBinding(data.style);
            return data.staticStyle ? extend(data.staticStyle, style) : style;
        }
        function normalizeStyleBinding(bindingStyle) {
            if (Array.isArray(bindingStyle)) {
                return toObject(bindingStyle);
            }
            if (typeof bindingStyle === \\"string\\") {
                return parseStyleText(bindingStyle);
            }
            return bindingStyle;
        }
        function getStyle(vnode, checkChild) {
            var res = {};
            var styleData;
            if (checkChild) {
                var childNode = vnode;
                while (childNode.componentInstance) {
                    childNode = childNode.componentInstance._vnode;
                    if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
                        extend(res, styleData);
                    }
                }
            }
            if (styleData = normalizeStyleData(vnode.data)) {
                extend(res, styleData);
            }
            var parentNode = vnode;
            while (parentNode = parentNode.parent) {
                if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
                    extend(res, styleData);
                }
            }
            return res;
        }
        var cssVarRE = /^--/;
        var importantRE = /\\\\s*!important$/;
        var setProp = function setProp(el, name, val) {
            if (cssVarRE.test(name)) {
                el.style.setProperty(name, val);
            } else if (importantRE.test(val)) {
                el.style.setProperty(hyphenate(name), val.replace(importantRE, \\"\\"), \\"important\\");
            } else {
                var normalizedName = normalize(name);
                if (Array.isArray(val)) {
                    for (var i = 0, len = val.length; i < len; i++) {
                        el.style[normalizedName] = val[i];
                    }
                } else {
                    el.style[normalizedName] = val;
                }
            }
        };
        var vendorNames = [ \\"Webkit\\", \\"Moz\\", \\"ms\\" ];
        var emptyStyle;
        var normalize = cached((function(prop) {
            emptyStyle = emptyStyle || document.createElement(\\"div\\").style;
            prop = camelize(prop);
            if (prop !== \\"filter\\" && prop in emptyStyle) {
                return prop;
            }
            var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
            for (var i = 0; i < vendorNames.length; i++) {
                var name = vendorNames[i] + capName;
                if (name in emptyStyle) {
                    return name;
                }
            }
        }));
        function updateStyle(oldVnode, vnode) {
            var data = vnode.data;
            var oldData = oldVnode.data;
            if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
                return;
            }
            var cur, name;
            var el = vnode.elm;
            var oldStaticStyle = oldData.staticStyle;
            var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
            var oldStyle = oldStaticStyle || oldStyleBinding;
            var style = normalizeStyleBinding(vnode.data.style) || {};
            vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
            var newStyle = getStyle(vnode, true);
            for (name in oldStyle) {
                if (isUndef(newStyle[name])) {
                    setProp(el, name, \\"\\");
                }
            }
            for (name in newStyle) {
                cur = newStyle[name];
                if (cur !== oldStyle[name]) {
                    setProp(el, name, cur == null ? \\"\\" : cur);
                }
            }
        }
        var style = {
            create: updateStyle,
            update: updateStyle
        };
        var whitespaceRE = /\\\\s+/;
        function addClass(el, cls) {
            if (!cls || !(cls = cls.trim())) {
                return;
            }
            if (el.classList) {
                if (cls.indexOf(\\" \\") > -1) {
                    cls.split(whitespaceRE).forEach((function(c) {
                        return el.classList.add(c);
                    }));
                } else {
                    el.classList.add(cls);
                }
            } else {
                var cur = \\" \\" + (el.getAttribute(\\"class\\") || \\"\\") + \\" \\";
                if (cur.indexOf(\\" \\" + cls + \\" \\") < 0) {
                    el.setAttribute(\\"class\\", (cur + cls).trim());
                }
            }
        }
        function removeClass(el, cls) {
            if (!cls || !(cls = cls.trim())) {
                return;
            }
            if (el.classList) {
                if (cls.indexOf(\\" \\") > -1) {
                    cls.split(whitespaceRE).forEach((function(c) {
                        return el.classList.remove(c);
                    }));
                } else {
                    el.classList.remove(cls);
                }
                if (!el.classList.length) {
                    el.removeAttribute(\\"class\\");
                }
            } else {
                var cur = \\" \\" + (el.getAttribute(\\"class\\") || \\"\\") + \\" \\";
                var tar = \\" \\" + cls + \\" \\";
                while (cur.indexOf(tar) >= 0) {
                    cur = cur.replace(tar, \\" \\");
                }
                cur = cur.trim();
                if (cur) {
                    el.setAttribute(\\"class\\", cur);
                } else {
                    el.removeAttribute(\\"class\\");
                }
            }
        }
        function resolveTransition(def$$1) {
            if (!def$$1) {
                return;
            }
            if (Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(def$$1) === \\"object\\") {
                var res = {};
                if (def$$1.css !== false) {
                    extend(res, autoCssTransition(def$$1.name || \\"v\\"));
                }
                extend(res, def$$1);
                return res;
            } else if (typeof def$$1 === \\"string\\") {
                return autoCssTransition(def$$1);
            }
        }
        var autoCssTransition = cached((function(name) {
            return {
                enterClass: name + \\"-enter\\",
                enterToClass: name + \\"-enter-to\\",
                enterActiveClass: name + \\"-enter-active\\",
                leaveClass: name + \\"-leave\\",
                leaveToClass: name + \\"-leave-to\\",
                leaveActiveClass: name + \\"-leave-active\\"
            };
        }));
        var hasTransition = inBrowser && !isIE9;
        var TRANSITION = \\"transition\\";
        var ANIMATION = \\"animation\\";
        var transitionProp = \\"transition\\";
        var transitionEndEvent = \\"transitionend\\";
        var animationProp = \\"animation\\";
        var animationEndEvent = \\"animationend\\";
        if (hasTransition) {
            if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
                transitionProp = \\"WebkitTransition\\";
                transitionEndEvent = \\"webkitTransitionEnd\\";
            }
            if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
                animationProp = \\"WebkitAnimation\\";
                animationEndEvent = \\"webkitAnimationEnd\\";
            }
        }
        var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function(fn) {
            return fn();
        };
        function nextFrame(fn) {
            raf((function() {
                raf(fn);
            }));
        }
        function addTransitionClass(el, cls) {
            var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
            if (transitionClasses.indexOf(cls) < 0) {
                transitionClasses.push(cls);
                addClass(el, cls);
            }
        }
        function removeTransitionClass(el, cls) {
            if (el._transitionClasses) {
                remove(el._transitionClasses, cls);
            }
            removeClass(el, cls);
        }
        function whenTransitionEnds(el, expectedType, cb) {
            var ref = getTransitionInfo(el, expectedType);
            var type = ref.type;
            var timeout = ref.timeout;
            var propCount = ref.propCount;
            if (!type) {
                return cb();
            }
            var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
            var ended = 0;
            var end = function end() {
                el.removeEventListener(event, onEnd);
                cb();
            };
            var onEnd = function onEnd(e) {
                if (e.target === el) {
                    if (++ended >= propCount) {
                        end();
                    }
                }
            };
            setTimeout((function() {
                if (ended < propCount) {
                    end();
                }
            }), timeout + 1);
            el.addEventListener(event, onEnd);
        }
        var transformRE = /\\\\b(transform|all)(,|$)/;
        function getTransitionInfo(el, expectedType) {
            var styles = window.getComputedStyle(el);
            var transitionDelays = (styles[transitionProp + \\"Delay\\"] || \\"\\").split(\\", \\");
            var transitionDurations = (styles[transitionProp + \\"Duration\\"] || \\"\\").split(\\", \\");
            var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
            var animationDelays = (styles[animationProp + \\"Delay\\"] || \\"\\").split(\\", \\");
            var animationDurations = (styles[animationProp + \\"Duration\\"] || \\"\\").split(\\", \\");
            var animationTimeout = getTimeout(animationDelays, animationDurations);
            var type;
            var timeout = 0;
            var propCount = 0;
            if (expectedType === TRANSITION) {
                if (transitionTimeout > 0) {
                    type = TRANSITION;
                    timeout = transitionTimeout;
                    propCount = transitionDurations.length;
                }
            } else if (expectedType === ANIMATION) {
                if (animationTimeout > 0) {
                    type = ANIMATION;
                    timeout = animationTimeout;
                    propCount = animationDurations.length;
                }
            } else {
                timeout = Math.max(transitionTimeout, animationTimeout);
                type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
                propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
            }
            var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + \\"Property\\"]);
            return {
                type: type,
                timeout: timeout,
                propCount: propCount,
                hasTransform: hasTransform
            };
        }
        function getTimeout(delays, durations) {
            while (delays.length < durations.length) {
                delays = delays.concat(delays);
            }
            return Math.max.apply(null, durations.map((function(d, i) {
                return toMs(d) + toMs(delays[i]);
            })));
        }
        function toMs(s) {
            return Number(s.slice(0, -1).replace(\\",\\", \\".\\")) * 1e3;
        }
        function enter(vnode, toggleDisplay) {
            var el = vnode.elm;
            if (isDef(el._leaveCb)) {
                el._leaveCb.cancelled = true;
                el._leaveCb();
            }
            var data = resolveTransition(vnode.data.transition);
            if (isUndef(data)) {
                return;
            }
            if (isDef(el._enterCb) || el.nodeType !== 1) {
                return;
            }
            var css = data.css;
            var type = data.type;
            var enterClass = data.enterClass;
            var enterToClass = data.enterToClass;
            var enterActiveClass = data.enterActiveClass;
            var appearClass = data.appearClass;
            var appearToClass = data.appearToClass;
            var appearActiveClass = data.appearActiveClass;
            var beforeEnter = data.beforeEnter;
            var enter = data.enter;
            var afterEnter = data.afterEnter;
            var enterCancelled = data.enterCancelled;
            var beforeAppear = data.beforeAppear;
            var appear = data.appear;
            var afterAppear = data.afterAppear;
            var appearCancelled = data.appearCancelled;
            var duration = data.duration;
            var context = activeInstance;
            var transitionNode = activeInstance.$vnode;
            while (transitionNode && transitionNode.parent) {
                context = transitionNode.context;
                transitionNode = transitionNode.parent;
            }
            var isAppear = !context._isMounted || !vnode.isRootInsert;
            if (isAppear && !appear && appear !== \\"\\") {
                return;
            }
            var startClass = isAppear && appearClass ? appearClass : enterClass;
            var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
            var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
            var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
            var enterHook = isAppear ? typeof appear === \\"function\\" ? appear : enter : enter;
            var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
            var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
            var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);
            if (false) {}
            var expectsCSS = css !== false && !isIE9;
            var userWantsControl = getHookArgumentsLength(enterHook);
            var cb = el._enterCb = once((function() {
                if (expectsCSS) {
                    removeTransitionClass(el, toClass);
                    removeTransitionClass(el, activeClass);
                }
                if (cb.cancelled) {
                    if (expectsCSS) {
                        removeTransitionClass(el, startClass);
                    }
                    enterCancelledHook && enterCancelledHook(el);
                } else {
                    afterEnterHook && afterEnterHook(el);
                }
                el._enterCb = null;
            }));
            if (!vnode.data.show) {
                mergeVNodeHook(vnode, \\"insert\\", (function() {
                    var parent = el.parentNode;
                    var pendingNode = parent && parent._pending && parent._pending[vnode.key];
                    if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
                        pendingNode.elm._leaveCb();
                    }
                    enterHook && enterHook(el, cb);
                }));
            }
            beforeEnterHook && beforeEnterHook(el);
            if (expectsCSS) {
                addTransitionClass(el, startClass);
                addTransitionClass(el, activeClass);
                nextFrame((function() {
                    removeTransitionClass(el, startClass);
                    if (!cb.cancelled) {
                        addTransitionClass(el, toClass);
                        if (!userWantsControl) {
                            if (isValidDuration(explicitEnterDuration)) {
                                setTimeout(cb, explicitEnterDuration);
                            } else {
                                whenTransitionEnds(el, type, cb);
                            }
                        }
                    }
                }));
            }
            if (vnode.data.show) {
                toggleDisplay && toggleDisplay();
                enterHook && enterHook(el, cb);
            }
            if (!expectsCSS && !userWantsControl) {
                cb();
            }
        }
        function leave(vnode, rm) {
            var el = vnode.elm;
            if (isDef(el._enterCb)) {
                el._enterCb.cancelled = true;
                el._enterCb();
            }
            var data = resolveTransition(vnode.data.transition);
            if (isUndef(data) || el.nodeType !== 1) {
                return rm();
            }
            if (isDef(el._leaveCb)) {
                return;
            }
            var css = data.css;
            var type = data.type;
            var leaveClass = data.leaveClass;
            var leaveToClass = data.leaveToClass;
            var leaveActiveClass = data.leaveActiveClass;
            var beforeLeave = data.beforeLeave;
            var leave = data.leave;
            var afterLeave = data.afterLeave;
            var leaveCancelled = data.leaveCancelled;
            var delayLeave = data.delayLeave;
            var duration = data.duration;
            var expectsCSS = css !== false && !isIE9;
            var userWantsControl = getHookArgumentsLength(leave);
            var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);
            if (false) {}
            var cb = el._leaveCb = once((function() {
                if (el.parentNode && el.parentNode._pending) {
                    el.parentNode._pending[vnode.key] = null;
                }
                if (expectsCSS) {
                    removeTransitionClass(el, leaveToClass);
                    removeTransitionClass(el, leaveActiveClass);
                }
                if (cb.cancelled) {
                    if (expectsCSS) {
                        removeTransitionClass(el, leaveClass);
                    }
                    leaveCancelled && leaveCancelled(el);
                } else {
                    rm();
                    afterLeave && afterLeave(el);
                }
                el._leaveCb = null;
            }));
            if (delayLeave) {
                delayLeave(performLeave);
            } else {
                performLeave();
            }
            function performLeave() {
                if (cb.cancelled) {
                    return;
                }
                if (!vnode.data.show && el.parentNode) {
                    (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
                }
                beforeLeave && beforeLeave(el);
                if (expectsCSS) {
                    addTransitionClass(el, leaveClass);
                    addTransitionClass(el, leaveActiveClass);
                    nextFrame((function() {
                        removeTransitionClass(el, leaveClass);
                        if (!cb.cancelled) {
                            addTransitionClass(el, leaveToClass);
                            if (!userWantsControl) {
                                if (isValidDuration(explicitLeaveDuration)) {
                                    setTimeout(cb, explicitLeaveDuration);
                                } else {
                                    whenTransitionEnds(el, type, cb);
                                }
                            }
                        }
                    }));
                }
                leave && leave(el, cb);
                if (!expectsCSS && !userWantsControl) {
                    cb();
                }
            }
        }
        function checkDuration(val, name, vnode) {
            if (typeof val !== \\"number\\") {
                warn(\\"<transition> explicit \\" + name + \\" duration is not a valid number - \\" + \\"got \\" + JSON.stringify(val) + \\".\\", vnode.context);
            } else if (isNaN(val)) {
                warn(\\"<transition> explicit \\" + name + \\" duration is NaN - \\" + \\"the duration expression might be incorrect.\\", vnode.context);
            }
        }
        function isValidDuration(val) {
            return typeof val === \\"number\\" && !isNaN(val);
        }
        function getHookArgumentsLength(fn) {
            if (isUndef(fn)) {
                return false;
            }
            var invokerFns = fn.fns;
            if (isDef(invokerFns)) {
                return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
            } else {
                return (fn._length || fn.length) > 1;
            }
        }
        function _enter(_, vnode) {
            if (vnode.data.show !== true) {
                enter(vnode);
            }
        }
        var transition = inBrowser ? {
            create: _enter,
            activate: _enter,
            remove: function remove$$1(vnode, rm) {
                if (vnode.data.show !== true) {
                    leave(vnode, rm);
                } else {
                    rm();
                }
            }
        } : {};
        var platformModules = [ attrs, klass, events, domProps, style, transition ];
        var modules = platformModules.concat(baseModules);
        var patch = createPatchFunction({
            nodeOps: nodeOps,
            modules: modules
        });
        if (isIE9) {
            document.addEventListener(\\"selectionchange\\", (function() {
                var el = document.activeElement;
                if (el && el.vmodel) {
                    trigger(el, \\"input\\");
                }
            }));
        }
        var directive = {
            inserted: function inserted(el, binding, vnode, oldVnode) {
                if (vnode.tag === \\"select\\") {
                    if (oldVnode.elm && !oldVnode.elm._vOptions) {
                        mergeVNodeHook(vnode, \\"postpatch\\", (function() {
                            directive.componentUpdated(el, binding, vnode);
                        }));
                    } else {
                        setSelected(el, binding, vnode.context);
                    }
                    el._vOptions = [].map.call(el.options, getValue);
                } else if (vnode.tag === \\"textarea\\" || isTextInputType(el.type)) {
                    el._vModifiers = binding.modifiers;
                    if (!binding.modifiers.lazy) {
                        el.addEventListener(\\"compositionstart\\", onCompositionStart);
                        el.addEventListener(\\"compositionend\\", onCompositionEnd);
                        el.addEventListener(\\"change\\", onCompositionEnd);
                        if (isIE9) {
                            el.vmodel = true;
                        }
                    }
                }
            },
            componentUpdated: function componentUpdated(el, binding, vnode) {
                if (vnode.tag === \\"select\\") {
                    setSelected(el, binding, vnode.context);
                    var prevOptions = el._vOptions;
                    var curOptions = el._vOptions = [].map.call(el.options, getValue);
                    if (curOptions.some((function(o, i) {
                        return !looseEqual(o, prevOptions[i]);
                    }))) {
                        var needReset = el.multiple ? binding.value.some((function(v) {
                            return hasNoMatchingOption(v, curOptions);
                        })) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
                        if (needReset) {
                            trigger(el, \\"change\\");
                        }
                    }
                }
            }
        };
        function setSelected(el, binding, vm) {
            actuallySetSelected(el, binding, vm);
            if (isIE || isEdge) {
                setTimeout((function() {
                    actuallySetSelected(el, binding, vm);
                }), 0);
            }
        }
        function actuallySetSelected(el, binding, vm) {
            var value = binding.value;
            var isMultiple = el.multiple;
            if (isMultiple && !Array.isArray(value)) {
                false && false;
                return;
            }
            var selected, option;
            for (var i = 0, l = el.options.length; i < l; i++) {
                option = el.options[i];
                if (isMultiple) {
                    selected = looseIndexOf(value, getValue(option)) > -1;
                    if (option.selected !== selected) {
                        option.selected = selected;
                    }
                } else {
                    if (looseEqual(getValue(option), value)) {
                        if (el.selectedIndex !== i) {
                            el.selectedIndex = i;
                        }
                        return;
                    }
                }
            }
            if (!isMultiple) {
                el.selectedIndex = -1;
            }
        }
        function hasNoMatchingOption(value, options) {
            return options.every((function(o) {
                return !looseEqual(o, value);
            }));
        }
        function getValue(option) {
            return \\"_value\\" in option ? option._value : option.value;
        }
        function onCompositionStart(e) {
            e.target.composing = true;
        }
        function onCompositionEnd(e) {
            if (!e.target.composing) {
                return;
            }
            e.target.composing = false;
            trigger(e.target, \\"input\\");
        }
        function trigger(el, type) {
            var e = document.createEvent(\\"HTMLEvents\\");
            e.initEvent(type, true, true);
            el.dispatchEvent(e);
        }
        function locateNode(vnode) {
            return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
        }
        var show = {
            bind: function bind(el, ref, vnode) {
                var value = ref.value;
                vnode = locateNode(vnode);
                var transition$$1 = vnode.data && vnode.data.transition;
                var originalDisplay = el.__vOriginalDisplay = el.style.display === \\"none\\" ? \\"\\" : el.style.display;
                if (value && transition$$1) {
                    vnode.data.show = true;
                    enter(vnode, (function() {
                        el.style.display = originalDisplay;
                    }));
                } else {
                    el.style.display = value ? originalDisplay : \\"none\\";
                }
            },
            update: function update(el, ref, vnode) {
                var value = ref.value;
                var oldValue = ref.oldValue;
                if (!value === !oldValue) {
                    return;
                }
                vnode = locateNode(vnode);
                var transition$$1 = vnode.data && vnode.data.transition;
                if (transition$$1) {
                    vnode.data.show = true;
                    if (value) {
                        enter(vnode, (function() {
                            el.style.display = el.__vOriginalDisplay;
                        }));
                    } else {
                        leave(vnode, (function() {
                            el.style.display = \\"none\\";
                        }));
                    }
                } else {
                    el.style.display = value ? el.__vOriginalDisplay : \\"none\\";
                }
            },
            unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
                if (!isDestroy) {
                    el.style.display = el.__vOriginalDisplay;
                }
            }
        };
        var platformDirectives = {
            model: directive,
            show: show
        };
        var transitionProps = {
            name: String,
            appear: Boolean,
            css: Boolean,
            mode: String,
            type: String,
            enterClass: String,
            leaveClass: String,
            enterToClass: String,
            leaveToClass: String,
            enterActiveClass: String,
            leaveActiveClass: String,
            appearClass: String,
            appearActiveClass: String,
            appearToClass: String,
            duration: [ Number, String, Object ]
        };
        function getRealChild(vnode) {
            var compOptions = vnode && vnode.componentOptions;
            if (compOptions && compOptions.Ctor.options.abstract) {
                return getRealChild(getFirstComponentChild(compOptions.children));
            } else {
                return vnode;
            }
        }
        function extractTransitionData(comp) {
            var data = {};
            var options = comp.$options;
            for (var key in options.propsData) {
                data[key] = comp[key];
            }
            var listeners = options._parentListeners;
            for (var key$1 in listeners) {
                data[camelize(key$1)] = listeners[key$1];
            }
            return data;
        }
        function placeholder(h, rawChild) {
            if (/\\\\d-keep-alive$/.test(rawChild.tag)) {
                return h(\\"keep-alive\\", {
                    props: rawChild.componentOptions.propsData
                });
            }
        }
        function hasParentTransition(vnode) {
            while (vnode = vnode.parent) {
                if (vnode.data.transition) {
                    return true;
                }
            }
        }
        function isSameChild(child, oldChild) {
            return oldChild.key === child.key && oldChild.tag === child.tag;
        }
        var isNotTextNode = function isNotTextNode(c) {
            return c.tag || isAsyncPlaceholder(c);
        };
        var isVShowDirective = function isVShowDirective(d) {
            return d.name === \\"show\\";
        };
        var Transition = {
            name: \\"transition\\",
            props: transitionProps,
            abstract: true,
            render: function render(h) {
                var this$1 = this;
                var children = this.$slots.default;
                if (!children) {
                    return;
                }
                children = children.filter(isNotTextNode);
                if (!children.length) {
                    return;
                }
                if (false) {}
                var mode = this.mode;
                if (false) {}
                var rawChild = children[0];
                if (hasParentTransition(this.$vnode)) {
                    return rawChild;
                }
                var child = getRealChild(rawChild);
                if (!child) {
                    return rawChild;
                }
                if (this._leaving) {
                    return placeholder(h, rawChild);
                }
                var id = \\"__transition-\\" + this._uid + \\"-\\";
                child.key = child.key == null ? child.isComment ? id + \\"comment\\" : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
                var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
                var oldRawChild = this._vnode;
                var oldChild = getRealChild(oldRawChild);
                if (child.data.directives && child.data.directives.some(isVShowDirective)) {
                    child.data.show = true;
                }
                if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
                    var oldData = oldChild.data.transition = extend({}, data);
                    if (mode === \\"out-in\\") {
                        this._leaving = true;
                        mergeVNodeHook(oldData, \\"afterLeave\\", (function() {
                            this$1._leaving = false;
                            this$1.$forceUpdate();
                        }));
                        return placeholder(h, rawChild);
                    } else if (mode === \\"in-out\\") {
                        if (isAsyncPlaceholder(child)) {
                            return oldRawChild;
                        }
                        var delayedLeave;
                        var performLeave = function performLeave() {
                            delayedLeave();
                        };
                        mergeVNodeHook(data, \\"afterEnter\\", performLeave);
                        mergeVNodeHook(data, \\"enterCancelled\\", performLeave);
                        mergeVNodeHook(oldData, \\"delayLeave\\", (function(leave) {
                            delayedLeave = leave;
                        }));
                    }
                }
                return rawChild;
            }
        };
        var props = extend({
            tag: String,
            moveClass: String
        }, transitionProps);
        delete props.mode;
        var TransitionGroup = {
            props: props,
            beforeMount: function beforeMount() {
                var this$1 = this;
                var update = this._update;
                this._update = function(vnode, hydrating) {
                    var restoreActiveInstance = setActiveInstance(this$1);
                    this$1.__patch__(this$1._vnode, this$1.kept, false, true);
                    this$1._vnode = this$1.kept;
                    restoreActiveInstance();
                    update.call(this$1, vnode, hydrating);
                };
            },
            render: function render(h) {
                var tag = this.tag || this.$vnode.data.tag || \\"span\\";
                var map = Object.create(null);
                var prevChildren = this.prevChildren = this.children;
                var rawChildren = this.$slots.default || [];
                var children = this.children = [];
                var transitionData = extractTransitionData(this);
                for (var i = 0; i < rawChildren.length; i++) {
                    var c = rawChildren[i];
                    if (c.tag) {
                        if (c.key != null && String(c.key).indexOf(\\"__vlist\\") !== 0) {
                            children.push(c);
                            map[c.key] = c;
                            (c.data || (c.data = {})).transition = transitionData;
                        } else if (false) {
                            var name, opts;
                        }
                    }
                }
                if (prevChildren) {
                    var kept = [];
                    var removed = [];
                    for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
                        var c$1 = prevChildren[i$1];
                        c$1.data.transition = transitionData;
                        c$1.data.pos = c$1.elm.getBoundingClientRect();
                        if (map[c$1.key]) {
                            kept.push(c$1);
                        } else {
                            removed.push(c$1);
                        }
                    }
                    this.kept = h(tag, null, kept);
                    this.removed = removed;
                }
                return h(tag, null, children);
            },
            updated: function updated() {
                var children = this.prevChildren;
                var moveClass = this.moveClass || (this.name || \\"v\\") + \\"-move\\";
                if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
                    return;
                }
                children.forEach(callPendingCbs);
                children.forEach(recordPosition);
                children.forEach(applyTranslation);
                this._reflow = document.body.offsetHeight;
                children.forEach((function(c) {
                    if (c.data.moved) {
                        var el = c.elm;
                        var s = el.style;
                        addTransitionClass(el, moveClass);
                        s.transform = s.WebkitTransform = s.transitionDuration = \\"\\";
                        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
                            if (e && e.target !== el) {
                                return;
                            }
                            if (!e || /transform$/.test(e.propertyName)) {
                                el.removeEventListener(transitionEndEvent, cb);
                                el._moveCb = null;
                                removeTransitionClass(el, moveClass);
                            }
                        });
                    }
                }));
            },
            methods: {
                hasMove: function hasMove(el, moveClass) {
                    if (!hasTransition) {
                        return false;
                    }
                    if (this._hasMove) {
                        return this._hasMove;
                    }
                    var clone = el.cloneNode();
                    if (el._transitionClasses) {
                        el._transitionClasses.forEach((function(cls) {
                            removeClass(clone, cls);
                        }));
                    }
                    addClass(clone, moveClass);
                    clone.style.display = \\"none\\";
                    this.$el.appendChild(clone);
                    var info = getTransitionInfo(clone);
                    this.$el.removeChild(clone);
                    return this._hasMove = info.hasTransform;
                }
            }
        };
        function callPendingCbs(c) {
            if (c.elm._moveCb) {
                c.elm._moveCb();
            }
            if (c.elm._enterCb) {
                c.elm._enterCb();
            }
        }
        function recordPosition(c) {
            c.data.newPos = c.elm.getBoundingClientRect();
        }
        function applyTranslation(c) {
            var oldPos = c.data.pos;
            var newPos = c.data.newPos;
            var dx = oldPos.left - newPos.left;
            var dy = oldPos.top - newPos.top;
            if (dx || dy) {
                c.data.moved = true;
                var s = c.elm.style;
                s.transform = s.WebkitTransform = \\"translate(\\" + dx + \\"px,\\" + dy + \\"px)\\";
                s.transitionDuration = \\"0s\\";
            }
        }
        var platformComponents = {
            Transition: Transition,
            TransitionGroup: TransitionGroup
        };
        Vue.config.mustUseProp = mustUseProp;
        Vue.config.isReservedTag = isReservedTag;
        Vue.config.isReservedAttr = isReservedAttr;
        Vue.config.getTagNamespace = getTagNamespace;
        Vue.config.isUnknownElement = isUnknownElement;
        extend(Vue.options.directives, platformDirectives);
        extend(Vue.options.components, platformComponents);
        Vue.prototype.__patch__ = inBrowser ? patch : noop;
        Vue.prototype.$mount = function(el, hydrating) {
            el = el && inBrowser ? query(el) : undefined;
            return mountComponent(this, el, hydrating);
        };
        if (inBrowser) {
            setTimeout((function() {
                if (config.devtools) {
                    if (devtools) {
                        devtools.emit(\\"init\\", Vue);
                    } else if (false) {}
                }
                if (false) {}
            }), 0);
        }
        __webpack_exports__[\\"a\\"] = Vue;
    }).call(this, __webpack_require__(2)[\\"window\\"], __webpack_require__(12), __webpack_require__(2)[\\"document\\"], __webpack_require__(20).setImmediate);
}, function(module, exports, __webpack_require__) {
    (function(window) {
        var _typeof = __webpack_require__(19);
        var g;
        g = function() {
            return this;
        }();
        try {
            g = g || new Function(\\"return this\\")();
        } catch (e) {
            if ((typeof window === \\"undefined\\" ? \\"undefined\\" : _typeof(window)) === \\"object\\") g = window;
        }
        module.exports = g;
    }).call(this, __webpack_require__(2)[\\"window\\"]);
}, , , , , , function(module, exports, __webpack_require__) {}, function(module, exports) {
    function _typeof(obj) {
        \\"@babel/helpers - typeof\\";
        if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") {
            module.exports = _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            module.exports = _typeof = function _typeof(obj) {
                return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    module.exports = _typeof;
}, function(module, exports, __webpack_require__) {
    (function(global, window) {
        var scope = typeof global !== \\"undefined\\" && global || typeof self !== \\"undefined\\" && self || window;
        var apply = Function.prototype.apply;
        exports.setTimeout = function() {
            return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
        };
        exports.setInterval = function() {
            return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
        };
        exports.clearTimeout = exports.clearInterval = function(timeout) {
            if (timeout) {
                timeout.close();
            }
        };
        function Timeout(id, clearFn) {
            this._id = id;
            this._clearFn = clearFn;
        }
        Timeout.prototype.unref = Timeout.prototype.ref = function() {};
        Timeout.prototype.close = function() {
            this._clearFn.call(scope, this._id);
        };
        exports.enroll = function(item, msecs) {
            clearTimeout(item._idleTimeoutId);
            item._idleTimeout = msecs;
        };
        exports.unenroll = function(item) {
            clearTimeout(item._idleTimeoutId);
            item._idleTimeout = -1;
        };
        exports._unrefActive = exports.active = function(item) {
            clearTimeout(item._idleTimeoutId);
            var msecs = item._idleTimeout;
            if (msecs >= 0) {
                item._idleTimeoutId = setTimeout((function onTimeout() {
                    if (item._onTimeout) item._onTimeout();
                }), msecs);
            }
        };
        __webpack_require__(21);
        exports.setImmediate = typeof self !== \\"undefined\\" && self.setImmediate || typeof global !== \\"undefined\\" && global.setImmediate || this && this.setImmediate;
        exports.clearImmediate = typeof self !== \\"undefined\\" && self.clearImmediate || typeof global !== \\"undefined\\" && global.clearImmediate || this && this.clearImmediate;
    }).call(this, __webpack_require__(12), __webpack_require__(2)[\\"window\\"]);
}, function(module, exports, __webpack_require__) {
    (function(global, process) {
        (function(global, undefined) {
            \\"use strict\\";
            if (global.setImmediate) {
                return;
            }
            var nextHandle = 1;
            var tasksByHandle = {};
            var currentlyRunningATask = false;
            var doc = global.document;
            var registerImmediate;
            function setImmediate(callback) {
                if (typeof callback !== \\"function\\") {
                    callback = new Function(\\"\\" + callback);
                }
                var args = new Array(arguments.length - 1);
                for (var i = 0; i < args.length; i++) {
                    args[i] = arguments[i + 1];
                }
                var task = {
                    callback: callback,
                    args: args
                };
                tasksByHandle[nextHandle] = task;
                registerImmediate(nextHandle);
                return nextHandle++;
            }
            function clearImmediate(handle) {
                delete tasksByHandle[handle];
            }
            function run(task) {
                var callback = task.callback;
                var args = task.args;
                switch (args.length) {
                  case 0:
                    callback();
                    break;

                  case 1:
                    callback(args[0]);
                    break;

                  case 2:
                    callback(args[0], args[1]);
                    break;

                  case 3:
                    callback(args[0], args[1], args[2]);
                    break;

                  default:
                    callback.apply(undefined, args);
                    break;
                }
            }
            function runIfPresent(handle) {
                if (currentlyRunningATask) {
                    setTimeout(runIfPresent, 0, handle);
                } else {
                    var task = tasksByHandle[handle];
                    if (task) {
                        currentlyRunningATask = true;
                        try {
                            run(task);
                        } finally {
                            clearImmediate(handle);
                            currentlyRunningATask = false;
                        }
                    }
                }
            }
            function installNextTickImplementation() {
                registerImmediate = function registerImmediate(handle) {
                    process.nextTick((function() {
                        runIfPresent(handle);
                    }));
                };
            }
            function canUsePostMessage() {
                if (global.postMessage && !global.importScripts) {
                    var postMessageIsAsynchronous = true;
                    var oldOnMessage = global.onmessage;
                    global.onmessage = function() {
                        postMessageIsAsynchronous = false;
                    };
                    global.postMessage(\\"\\", \\"*\\");
                    global.onmessage = oldOnMessage;
                    return postMessageIsAsynchronous;
                }
            }
            function installPostMessageImplementation() {
                var messagePrefix = \\"setImmediate$\\" + Math.random() + \\"$\\";
                var onGlobalMessage = function onGlobalMessage(event) {
                    if (event.source === global && typeof event.data === \\"string\\" && event.data.indexOf(messagePrefix) === 0) {
                        runIfPresent(+event.data.slice(messagePrefix.length));
                    }
                };
                if (global.addEventListener) {
                    global.addEventListener(\\"message\\", onGlobalMessage, false);
                } else {
                    global.attachEvent(\\"onmessage\\", onGlobalMessage);
                }
                registerImmediate = function registerImmediate(handle) {
                    global.postMessage(messagePrefix + handle, \\"*\\");
                };
            }
            function installMessageChannelImplementation() {
                var channel = new MessageChannel;
                channel.port1.onmessage = function(event) {
                    var handle = event.data;
                    runIfPresent(handle);
                };
                registerImmediate = function registerImmediate(handle) {
                    channel.port2.postMessage(handle);
                };
            }
            function installReadyStateChangeImplementation() {
                var html = doc.documentElement;
                registerImmediate = function registerImmediate(handle) {
                    var script = doc.createElement(\\"script\\");
                    script.onreadystatechange = function() {
                        runIfPresent(handle);
                        script.onreadystatechange = null;
                        html.removeChild(script);
                        script = null;
                    };
                    html.appendChild(script);
                };
            }
            function installSetTimeoutImplementation() {
                registerImmediate = function registerImmediate(handle) {
                    setTimeout(runIfPresent, 0, handle);
                };
            }
            var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
            attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
            if ({}.toString.call(global.process) === \\"[object process]\\") {
                installNextTickImplementation();
            } else if (canUsePostMessage()) {
                installPostMessageImplementation();
            } else if (global.MessageChannel) {
                installMessageChannelImplementation();
            } else if (doc && \\"onreadystatechange\\" in doc.createElement(\\"script\\")) {
                installReadyStateChangeImplementation();
            } else {
                installSetTimeoutImplementation();
            }
            attachTo.setImmediate = setImmediate;
            attachTo.clearImmediate = clearImmediate;
        })(typeof self === \\"undefined\\" ? typeof global === \\"undefined\\" ? this : global : self);
    }).call(this, __webpack_require__(12), __webpack_require__(22));
}, function(module, exports) {
    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
        throw new Error(\\"setTimeout has not been defined\\");
    }
    function defaultClearTimeout() {
        throw new Error(\\"clearTimeout has not been defined\\");
    }
    (function() {
        try {
            if (typeof setTimeout === \\"function\\") {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === \\"function\\") {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    })();
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            return cachedSetTimeout(fun, 0);
        } catch (e) {
            try {
                return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            return cachedClearTimeout(marker);
        } catch (e) {
            try {
                return cachedClearTimeout.call(null, marker);
            } catch (e) {
                return cachedClearTimeout.call(this, marker);
            }
        }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }
    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function() {
        this.fun.apply(null, this.array);
    };
    process.title = \\"browser\\";
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = \\"\\";
    process.versions = {};
    function noop() {}
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function(name) {
        return [];
    };
    process.binding = function(name) {
        throw new Error(\\"process.binding is not supported\\");
    };
    process.cwd = function() {
        return \\"/\\";
    };
    process.chdir = function(dir) {
        throw new Error(\\"process.chdir is not supported\\");
    };
    process.umask = function() {
        return 0;
    };
}, , , function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.r(__webpack_exports__);
    var runtime_esm = __webpack_require__(2);
    var vue_runtime_esm = __webpack_require__(11);
    var app = __webpack_require__(18);
    var app_App = new vue_runtime_esm[\\"a\\"]({
        onShow: function onShow() {},
        render: function render(h) {
            return h(\\"block\\", this.$slots.default);
        }
    });
    var lib_src_app = app_App;
    var inst = App(Object(runtime_esm[\\"createVueApp\\"])(lib_src_app, vue_runtime_esm[\\"a\\"]));
} ], [ [ 25, 0, 1, 2 ] ] ]);



/** filePath: dist/app.js.LICENSE.txt **/
/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */


/** filePath: dist/app.json **/
{\\"pages\\":[\\"pages/index/index\\"],\\"window\\":{\\"backgroundTextStyle\\":\\"light\\",\\"navigationBarBackgroundColor\\":\\"#fff\\",\\"navigationBarTitleText\\":\\"WeChat\\",\\"navigationBarTextStyle\\":\\"black\\"}}

/** filePath: dist/app.wxss **/


/** filePath: dist/base.wxml **/

<template name=\\"taro_tmpl\\">
  <block wx:for=\\"{{root.cn}}\\" wx:key=\\"id\\">
    <template is=\\"tmpl_0_container\\" data=\\"{{i: item}}\\" />
  </block>
</template>

<template name=\\"tmpl_0_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_1_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_1_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_0_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_1_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_0_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_1_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_0_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_0_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_0_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_1_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_2_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_2_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_1_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_2_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_1_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_2_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_1_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_1_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_1_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_2_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_3_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_3_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_2_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_3_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_2_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_3_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_2_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_2_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_2_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_3_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_4_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_4_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_3_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_4_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_3_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_4_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_3_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_3_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_3_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_4_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_5_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_5_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_4_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_5_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_4_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_5_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_4_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_4_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_4_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_5_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_6_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_6_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_5_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_6_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_5_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_6_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_5_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_5_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_5_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_6_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_7_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_7_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_6_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_7_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_6_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_7_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_6_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_6_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_6_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_7_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_8_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_8_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_7_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_8_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_7_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_8_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_7_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_7_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_7_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_8_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_9_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_9_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_8_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_9_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_8_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_9_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_8_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_8_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_8_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_9_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_10_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_10_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_9_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_10_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_9_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_10_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_9_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_9_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_9_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_10_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_11_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_11_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_10_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_11_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_10_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_11_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_10_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_10_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_10_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_11_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_12_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_12_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_11_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_12_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_11_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_12_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_11_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_11_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_11_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_12_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_13_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_13_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_12_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_13_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_12_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_13_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_12_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_12_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_12_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_13_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_14_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_14_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_13_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_14_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_13_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_14_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_13_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_13_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_13_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_14_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_15_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_15_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_14_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_15_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_14_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_15_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_14_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_14_container\\" data=\\"{{i: i}}\\">
  <template is=\\"{{'tmpl_14_' + i.nn}}\\" data=\\"{{i: i}}\\" />
</template>

<template name=\\"tmpl_15_view\\">
  <view hover-class=\\"{{ i.hoverClass === undefined ? 'none' : i.hoverClass }}\\" hover-stop-propagation=\\"{{ i.hoverStopPropagation === undefined ? false : i.hoverStopPropagation }}\\" hover-start-time=\\"{{ i.hoverStartTime === undefined ? 50 : i.hoverStartTime }}\\" hover-stay-time=\\"{{ i.hoverStayTime === undefined ? 400 : i.hoverStayTime }}\\" animation=\\"{{ i.animation }}\\" bindanimationend=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_16_container\\" data=\\"{{i: item}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_15_text\\">
  <text selectable=\\"{{ i.selectable === undefined ? false : i.selectable }}\\" space=\\"{{ i.space }}\\" decode=\\"{{ i.decode === undefined ? false : i.decode }}\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_16_container\\" data=\\"{{i: item}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_15_scroll-view\\">
  <scroll-view scroll-x=\\"{{ i.scrollX === undefined ? false : i.scrollX }}\\" scroll-y=\\"{{ i.scrollY === undefined ? false : i.scrollY }}\\" upper-threshold=\\"{{ i.upperThreshold === undefined ? 50 : i.upperThreshold }}\\" lower-threshold=\\"{{ i.lowerThreshold === undefined ? 50 : i.lowerThreshold }}\\" scroll-top=\\"{{ i.scrollTop }}\\" scroll-left=\\"{{ i.scrollLeft }}\\" scroll-into-view=\\"{{ i.scrollIntoView }}\\" scroll-with-animation=\\"{{ i.scrollWithAnimation === undefined ? false : i.scrollWithAnimation }}\\" enable-back-to-top=\\"{{ i.enableBackToTop === undefined ? false : i.enableBackToTop }}\\" enable-flex=\\"{{ i.enableFlex === undefined ? false : i.enableFlex }}\\" scroll-anchoring=\\"{{ i.scrollAnchoring === undefined ?  false : i.scrollAnchoring }}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_16_container\\" data=\\"{{i: item}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_15_image\\">
  <image src=\\"{{ i.src }}\\" mode=\\"{{ i.mode === undefined ? 'scaleToFill' : i.mode }}\\" webp=\\"{{ i.webp === undefined ? false : i.webp }}\\" lazy-load=\\"{{ i.lazyLoad === undefined ? false : i.lazyLoad }}\\" show-menu-by-longpress=\\"{{ i.showMenuByLongpress === undefined ? false : i.showMenuByLongpress }}\\" binderror=\\"eh\\" bindload=\\"eh\\" style=\\"{{ i.st }}\\" class=\\"{{ i.cl }}\\" bindtap=\\"eh\\"  id=\\"{{ i.uid }}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"id\\">
      <template is=\\"tmpl_16_container\\" data=\\"{{i: item}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_15_#text\\" data=\\"{{i: i}}\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_15_container\\" data=\\"{{i: i}}\\">
  <comp i=\\"{{i}}\\" />
</template>


/** filePath: dist/comp.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 5 ], {
    23: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
        Component(Object(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__[\\"createRecursiveComponentConfig\\"])());
    }
}, [ [ 23, 0, 1, 2 ] ] ]);

/** filePath: dist/comp.json **/
{\\"component\\":true,\\"usingComponents\\":{\\"comp\\":\\"./comp\\"}}

/** filePath: dist/comp.wxml **/
<import src=\\"./base.wxml\\" />
<template is=\\"tmpl_0_container\\" data=\\"{{i: i}}\\" />

/** filePath: dist/pages/index/index.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 6 ], {
    24: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var runtime_esm = __webpack_require__(2);
        var render = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(\\"view\\", {
                staticClass: \\"index\\"
            }, [ _c(\\"text\\", [ _vm._v(_vm._s(_vm.msg)) ]) ]);
        };
        var staticRenderFns = [];
        render._withStripped = true;
        var indexvue_type_script_lang_js_ = {
            data: function data() {
                return {
                    msg: \\"Hello world!\\"
                };
            }
        };
        var pages_indexvue_type_script_lang_js_ = indexvue_type_script_lang_js_;
        function normalizeComponent(scriptExports, render, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === \\"function\\" ? scriptExports.options : scriptExports;
            if (render) {
                options.render = render;
                options.staticRenderFns = staticRenderFns;
                options._compiled = true;
            }
            if (functionalTemplate) {
                options.functional = true;
            }
            if (scopeId) {
                options._scopeId = \\"data-v-\\" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
                hook = function(context) {
                    context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                    if (!context && typeof __VUE_SSR_CONTEXT__ !== \\"undefined\\") {
                        context = __VUE_SSR_CONTEXT__;
                    }
                    if (injectStyles) {
                        injectStyles.call(this, context);
                    }
                    if (context && context._registeredComponents) {
                        context._registeredComponents.add(moduleIdentifier);
                    }
                };
                options._ssrRegister = hook;
            } else if (injectStyles) {
                hook = shadowMode ? function() {
                    injectStyles.call(this, this.$root.$options.shadowRoot);
                } : injectStyles;
            }
            if (hook) {
                if (options.functional) {
                    options._injectStyles = hook;
                    var originalRender = options.render;
                    options.render = function renderWithStyleInjection(h, context) {
                        hook.call(context);
                        return originalRender(h, context);
                    };
                } else {
                    var existing = options.beforeCreate;
                    options.beforeCreate = existing ? [].concat(existing, hook) : [ hook ];
                }
            }
            return {
                exports: scriptExports,
                options: options
            };
        }
        var component = normalizeComponent(pages_indexvue_type_script_lang_js_, render, staticRenderFns, false, null, null, null);
        if (false) {
            var api;
        }
        component.options.__file = \\"src/pages/index/index.vue\\";
        var index = component.exports;
        var inst = Page(Object(runtime_esm[\\"createPageConfig\\"])(index, \\"pages/index/index\\"));
    }
}, [ [ 24, 0, 1, 2 ] ] ]);

/** filePath: dist/pages/index/index.json **/
{\\"navigationBarTitleText\\":\\"首页\\",\\"usingComponents\\":{\\"comp\\":\\"../../comp\\"}}

/** filePath: dist/pages/index/index.wxml **/
<import src=\\"../../base.wxml\\"/>
<template is=\\"taro_tmpl\\" data=\\"{{root: root}}\\" />

/** filePath: dist/runtime.js **/
(function(modules) {
    function webpackJsonpCallback(data) {
        var chunkIds = data[0];
        var moreModules = data[1];
        var executeModules = data[2];
        var moduleId, chunkId, i = 0, resolves = [];
        for (;i < chunkIds.length; i++) {
            chunkId = chunkIds[i];
            if (Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
                resolves.push(installedChunks[chunkId][0]);
            }
            installedChunks[chunkId] = 0;
        }
        for (moduleId in moreModules) {
            if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
                modules[moduleId] = moreModules[moduleId];
            }
        }
        if (parentJsonpFunction) parentJsonpFunction(data);
        while (resolves.length) {
            resolves.shift()();
        }
        deferredModules.push.apply(deferredModules, executeModules || []);
        return checkDeferredModules();
    }
    function checkDeferredModules() {
        var result;
        for (var i = 0; i < deferredModules.length; i++) {
            var deferredModule = deferredModules[i];
            var fulfilled = true;
            for (var j = 1; j < deferredModule.length; j++) {
                var depId = deferredModule[j];
                if (installedChunks[depId] !== 0) fulfilled = false;
            }
            if (fulfilled) {
                deferredModules.splice(i--, 1);
                result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
            }
        }
        return result;
    }
    var installedModules = {};
    var installedChunks = {
        0: 0
    };
    var deferredModules = [];
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.r = function(exports) {
        if (typeof Symbol !== \\"undefined\\" && Symbol.toStringTag) {
            Object.defineProperty(exports, Symbol.toStringTag, {
                value: \\"Module\\"
            });
        }
        Object.defineProperty(exports, \\"__esModule\\", {
            value: true
        });
    };
    __webpack_require__.t = function(value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === \\"object\\" && value && value.__esModule) return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, \\"default\\", {
            enumerable: true,
            value: value
        });
        if (mode & 2 && typeof value != \\"string\\") for (var key in value) __webpack_require__.d(ns, key, function(key) {
            return value[key];
        }.bind(null, key));
        return ns;
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module[\\"default\\"];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, \\"a\\", getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = \\"/\\";
    var jsonpArray = wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || [];
    var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
    jsonpArray.push = webpackJsonpCallback;
    jsonpArray = jsonpArray.slice();
    for (var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
    var parentJsonpFunction = oldJsonpFunction;
    checkDeferredModules();
})([]);

/** filePath: dist/taro.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 1 ], {
    2: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        (function(document, window, requestAnimationFrame, cancelAnimationFrame) {
            __webpack_require__.d(__webpack_exports__, \\"Current\\", (function() {
                return Current;
            }));
            __webpack_require__.d(__webpack_exports__, \\"Events\\", (function() {
                return Events;
            }));
            __webpack_require__.d(__webpack_exports__, \\"FormElement\\", (function() {
                return FormElement;
            }));
            __webpack_require__.d(__webpack_exports__, \\"Style\\", (function() {
                return Style;
            }));
            __webpack_require__.d(__webpack_exports__, \\"TaroElement\\", (function() {
                return TaroElement;
            }));
            __webpack_require__.d(__webpack_exports__, \\"TaroEvent\\", (function() {
                return TaroEvent;
            }));
            __webpack_require__.d(__webpack_exports__, \\"TaroNode\\", (function() {
                return TaroNode;
            }));
            __webpack_require__.d(__webpack_exports__, \\"TaroRootElement\\", (function() {
                return TaroRootElement;
            }));
            __webpack_require__.d(__webpack_exports__, \\"TaroText\\", (function() {
                return TaroText;
            }));
            __webpack_require__.d(__webpack_exports__, \\"cancelAnimationFrame\\", (function() {
                return caf;
            }));
            __webpack_require__.d(__webpack_exports__, \\"connectReactPage\\", (function() {
                return connectReactPage;
            }));
            __webpack_require__.d(__webpack_exports__, \\"connectVuePage\\", (function() {
                return connectVuePage;
            }));
            __webpack_require__.d(__webpack_exports__, \\"createComponentConfig\\", (function() {
                return createComponentConfig;
            }));
            __webpack_require__.d(__webpack_exports__, \\"createDocument\\", (function() {
                return createDocument;
            }));
            __webpack_require__.d(__webpack_exports__, \\"createEvent\\", (function() {
                return createEvent;
            }));
            __webpack_require__.d(__webpack_exports__, \\"createPageConfig\\", (function() {
                return createPageConfig;
            }));
            __webpack_require__.d(__webpack_exports__, \\"createReactApp\\", (function() {
                return createReactApp;
            }));
            __webpack_require__.d(__webpack_exports__, \\"createRecursiveComponentConfig\\", (function() {
                return createRecursiveComponentConfig;
            }));
            __webpack_require__.d(__webpack_exports__, \\"createVueApp\\", (function() {
                return createVueApp;
            }));
            __webpack_require__.d(__webpack_exports__, \\"document\\", (function() {
                return document$1;
            }));
            __webpack_require__.d(__webpack_exports__, \\"eventCenter\\", (function() {
                return eventCenter;
            }));
            __webpack_require__.d(__webpack_exports__, \\"hydrate\\", (function() {
                return hydrate;
            }));
            __webpack_require__.d(__webpack_exports__, \\"injectPageInstance\\", (function() {
                return injectPageInstance;
            }));
            __webpack_require__.d(__webpack_exports__, \\"navigator\\", (function() {
                return navigator;
            }));
            __webpack_require__.d(__webpack_exports__, \\"nextTick\\", (function() {
                return nextTick;
            }));
            __webpack_require__.d(__webpack_exports__, \\"now\\", (function() {
                return now;
            }));
            __webpack_require__.d(__webpack_exports__, \\"options\\", (function() {
                return options;
            }));
            __webpack_require__.d(__webpack_exports__, \\"requestAnimationFrame\\", (function() {
                return raf;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useDidHide\\", (function() {
                return useDidHide;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useDidShow\\", (function() {
                return useDidShow;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useOptionMenuClick\\", (function() {
                return useOptionMenuClick;
            }));
            __webpack_require__.d(__webpack_exports__, \\"usePageScroll\\", (function() {
                return usePageScroll;
            }));
            __webpack_require__.d(__webpack_exports__, \\"usePullDownRefresh\\", (function() {
                return usePullDownRefresh;
            }));
            __webpack_require__.d(__webpack_exports__, \\"usePullIntercept\\", (function() {
                return usePullIntercept;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useReachBottom\\", (function() {
                return useReachBottom;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useReady\\", (function() {
                return useReady;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useResize\\", (function() {
                return useResize;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useRouter\\", (function() {
                return useRouter;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useScope\\", (function() {
                return useScope;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useShareAppMessage\\", (function() {
                return useShareAppMessage;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useTabItemTap\\", (function() {
                return useTabItemTap;
            }));
            __webpack_require__.d(__webpack_exports__, \\"useTitleClick\\", (function() {
                return useTitleClick;
            }));
            __webpack_require__.d(__webpack_exports__, \\"window\\", (function() {
                return window$1;
            }));
            var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
            var _babel_runtime_helpers_esm_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
            var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
            var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
            var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
            var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
            var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(13);
            var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7);
            var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0);
            var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(1);
            var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(4);
            function isString(o) {
                return typeof o === \\"string\\";
            }
            function isUndefined(o) {
                return typeof o === \\"undefined\\";
            }
            function isObject(o) {
                return o !== null && Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_10__[\\"a\\"])(o) === \\"object\\";
            }
            function isFunction(o) {
                return typeof o === \\"function\\";
            }
            function isBooleanStringLiteral(o) {
                return o === \\"true\\" || o === \\"false\\";
            }
            var isArray = Array.isArray;
            var EMPTY_OBJ = {};
            var noop = function noop() {};
            function toDashed(s) {
                return s.replace(/([a-z0-9])([A-Z])/g, \\"$1-$2\\").toLowerCase();
            }
            function toCamelCase(s) {
                var camel = \\"\\";
                var nextCap = false;
                for (var i = 0; i < s.length; i++) {
                    if (s[i] !== \\"-\\") {
                        camel += nextCap ? s[i].toUpperCase() : s[i];
                        nextCap = false;
                    } else {
                        nextCap = true;
                    }
                }
                return camel;
            }
            function capitalize(s) {
                return s.charAt(0).toUpperCase() + s.slice(1);
            }
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var hasOwn = function hasOwn(val, key) {
                return hasOwnProperty.call(val, key);
            };
            var reportIssue = \\"\\\\u5982\\\\u6709\\\\u7591\\\\u95ee\\\\uff0c\\\\u8bf7\\\\u63d0\\\\u4ea4 issue \\\\u81f3\\\\uff1ahttps://github.com/nervjs/taro/issues\\";
            function ensure(condition, msg) {
                if (condition) {
                    return;
                }
                throw new Error(msg + \\"\\\\n\\" + reportIssue);
            }
            function warn(condition, msg) {
                if (false) {}
            }
            var touchEvents = {
                bindTouchStart: \\"\\",
                bindTouchMove: \\"\\",
                bindTouchEnd: \\"\\",
                bindTouchCancel: \\"\\",
                bindLongTap: \\"\\"
            };
            var View = Object.assign({
                \\"hover-class\\": singleQuote(\\"none\\"),
                \\"hover-stop-propagation\\": \\"false\\",
                \\"hover-start-time\\": \\"50\\",
                \\"hover-stay-time\\": \\"400\\",
                animation: \\"\\",
                bindAnimationEnd: \\"\\"
            }, touchEvents);
            var Icon = {
                type: \\"\\",
                size: \\"23\\",
                color: \\"\\"
            };
            var Map$1 = Object.assign({
                longitude: \\"\\",
                latitude: \\"\\",
                scale: \\"16\\",
                markers: \\"\\",
                covers: \\"\\",
                polyline: \\"\\",
                circles: \\"\\",
                controls: \\"\\",
                \\"include-point\\": \\"false\\",
                \\"show-location\\": \\"\\",
                polygons: \\"\\",
                subkey: \\"\\",
                \\"layer-style\\": \\"1\\",
                rotate: \\"0\\",
                skew: \\"skew\\",
                \\"enable-3D\\": \\"false\\",
                \\"show-compass\\": \\"false\\",
                \\"show-scale\\": \\"false\\",
                \\"enable-overlooking\\": \\"false\\",
                \\"enable-zoom\\": \\"true\\",
                \\"enable-scroll\\": \\"true\\",
                \\"enable-rotate\\": \\"false\\",
                \\"enable-satellite\\": \\"false\\",
                \\"enable-traffic\\": \\"false\\",
                setting: \\"\\",
                bindMarkerTap: \\"\\",
                bindLabelTap: \\"\\",
                bindControlTap: \\"\\",
                bindCalloutTap: \\"\\",
                bindUpdated: \\"\\",
                bindRegionChange: \\"\\",
                bindPoiTap: \\"\\"
            }, touchEvents);
            var Progress = {
                percent: \\"\\",
                \\"show-info\\": \\"false\\",
                \\"border-radius\\": \\"0\\",
                \\"font-size\\": \\"16\\",
                \\"stroke-width\\": \\"6\\",
                color: singleQuote(\\"#09BB07\\"),
                activeColor: singleQuote(\\"#09BB07\\"),
                backgroundColor: singleQuote(\\"#EBEBEB\\"),
                active: \\"false\\",
                \\"active-mode\\": singleQuote(\\"backwards\\"),
                duration: \\"30\\",
                bindActiveEnd: \\"\\"
            };
            var RichText = {
                nodes: \\"[]\\",
                space: \\"\\"
            };
            var Text = {
                selectable: \\"false\\",
                space: \\"\\",
                decode: \\"false\\"
            };
            var Button = {
                size: singleQuote(\\"default\\"),
                type: \\"\\",
                plain: \\"false\\",
                disabled: \\"\\",
                loading: \\"false\\",
                \\"form-type\\": \\"\\",
                \\"open-type\\": \\"\\",
                \\"hover-class\\": singleQuote(\\"button-hover\\"),
                \\"hover-stop-propagation\\": \\"false\\",
                \\"hover-start-time\\": \\"20\\",
                \\"hover-stay-time\\": \\"70\\",
                lang: \\"en\\",
                \\"session-from\\": \\"\\",
                \\"send-message-title\\": \\"\\",
                \\"send-message-path\\": \\"\\",
                \\"send-message-img\\": \\"\\",
                \\"app-parameter\\": \\"\\",
                \\"show-message-card\\": \\"false\\",
                bindGetUserInfo: \\"\\",
                bindContact: \\"\\",
                bindGetPhoneNumber: \\"\\",
                bindError: \\"\\",
                bindOpenSetting: \\"\\",
                bindLaunchApp: \\"\\",
                name: \\"\\"
            };
            if (false) {}
            var Checkbox = {
                value: \\"\\",
                disabled: \\"\\",
                checked: \\"false\\",
                color: singleQuote(\\"#09BB07\\"),
                name: \\"\\"
            };
            var CheckboxGroup = {
                bindChange: \\"\\",
                name: \\"\\"
            };
            var Editor = {
                \\"read-only\\": \\"false\\",
                placeholder: \\"\\",
                \\"show-img-size\\": \\"false\\",
                \\"show-img-toolbar\\": \\"false\\",
                \\"show-img-resize\\": \\"false\\",
                focus: \\"false\\",
                bindReady: \\"\\",
                bindFocus: \\"\\",
                bindBlur: \\"\\",
                bindInput: \\"\\",
                bindStatusChange: \\"\\",
                name: \\"\\"
            };
            var Form = {
                \\"report-submit\\": \\"false\\",
                \\"report-submit-timeout\\": \\"0\\",
                bindSubmit: \\"\\",
                bindReset: \\"\\",
                name: \\"\\"
            };
            var Input = {
                value: \\"\\",
                type: singleQuote(\\"\\"),
                password: \\"false\\",
                placeholder: \\"\\",
                \\"placeholder-style\\": \\"\\",
                \\"placeholder-class\\": singleQuote(\\"input-placeholder\\"),
                disabled: \\"\\",
                maxlength: \\"140\\",
                \\"cursor-spacing\\": \\"0\\",
                \\"auto-focus\\": \\"false\\",
                focus: \\"false\\",
                \\"confirm-type\\": singleQuote(\\"done\\"),
                \\"confirm-hold\\": \\"false\\",
                cursor: \\"\\",
                \\"selection-start\\": \\"-1\\",
                \\"selection-end\\": \\"-1\\",
                \\"adjust-position\\": \\"true\\",
                \\"hold-keyboard\\": \\"false\\",
                bindInput: \\"\\",
                bindFocus: \\"\\",
                bindBlur: \\"\\",
                bindConfirm: \\"\\",
                bindKeyboardHeightChange: \\"\\",
                name: \\"\\"
            };
            var Label = {
                for: \\"\\",
                name: \\"\\"
            };
            var Picker = {
                mode: singleQuote(\\"selector\\"),
                disabled: \\"\\",
                bindCancel: \\"\\",
                range: \\"\\",
                \\"range-key\\": \\"\\",
                value: \\"\\",
                bindChange: \\"\\",
                bindColumnChange: \\"\\",
                start: \\"\\",
                end: \\"\\",
                fields: singleQuote(\\"day\\"),
                \\"custom-item\\": \\"\\",
                name: \\"\\"
            };
            var PickerView = {
                value: \\"\\",
                \\"indicator-style\\": \\"\\",
                \\"indicator-class\\": \\"\\",
                \\"mask-style\\": \\"\\",
                \\"mask-class\\": \\"\\",
                bindChange: \\"\\",
                bindPickStart: \\"\\",
                bindPickEnd: \\"\\",
                name: \\"\\"
            };
            var PickerViewColumn = {
                name: \\"\\"
            };
            var Radio = {
                value: \\"\\",
                checked: \\"false\\",
                disabled: \\"\\",
                color: singleQuote(\\"#09BB07\\"),
                name: \\"\\"
            };
            var RadioGroup = {
                bindChange: \\"\\",
                name: \\"\\"
            };
            var Slider = {
                min: \\"0\\",
                max: \\"100\\",
                step: \\"1\\",
                disabled: \\"\\",
                value: \\"0\\",
                color: singleQuote(\\"#e9e9e9\\"),
                \\"selected-color\\": singleQuote(\\"#1aad19\\"),
                activeColor: singleQuote(\\"#1aad19\\"),
                backgroundColor: singleQuote(\\"#e9e9e9\\"),
                \\"block-size\\": \\"28\\",
                \\"block-color\\": singleQuote(\\"#ffffff\\"),
                \\"show-value\\": \\"false\\",
                bindChange: \\"\\",
                bindChanging: \\"\\",
                name: \\"\\"
            };
            var Switch = {
                checked: \\"false\\",
                disabled: \\"\\",
                type: singleQuote(\\"switch\\"),
                color: singleQuote(\\"#04BE02\\"),
                bindChange: \\"\\",
                name: \\"\\"
            };
            var CoverImage = {
                src: \\"\\",
                bindLoad: \\"eh\\",
                bindError: \\"eh\\"
            };
            var Textarea = {
                value: \\"\\",
                placeholder: \\"\\",
                \\"placeholder-style\\": \\"\\",
                \\"placeholder-class\\": singleQuote(\\"textarea-placeholder\\"),
                disabled: \\"\\",
                maxlength: \\"140\\",
                \\"auto-focus\\": \\"false\\",
                focus: \\"false\\",
                \\"auto-height\\": \\"false\\",
                fixed: \\"false\\",
                \\"cursor-spacing\\": \\"0\\",
                cursor: \\"-1\\",
                \\"show-confirm-bar\\": \\"true\\",
                \\"selection-start\\": \\"-1\\",
                \\"selection-end\\": \\"-1\\",
                \\"adjust-position\\": \\"true\\",
                \\"hold-keyboard\\": \\"false\\",
                bindFocus: \\"\\",
                bindBlur: \\"\\",
                bindLineChange: \\"\\",
                bindInput: \\"\\",
                bindConfirm: \\"\\",
                bindKeyboardHeightChange: \\"\\",
                name: \\"\\"
            };
            var CoverView = Object.assign({
                \\"scroll-top\\": \\"false\\"
            }, touchEvents);
            var MovableArea = {
                \\"scale-area\\": \\"false\\"
            };
            var MovableView = Object.assign({
                direction: \\"none\\",
                inertia: \\"false\\",
                \\"out-of-bounds\\": \\"false\\",
                x: \\"\\",
                y: \\"\\",
                damping: \\"20\\",
                friction: \\"2\\",
                disabled: \\"\\",
                scale: \\"false\\",
                \\"scale-min\\": \\"0.5\\",
                \\"scale-max\\": \\"10\\",
                \\"scale-value\\": \\"1\\",
                animation: \\"true\\",
                bindAnimationEnd: \\"\\",
                bindChange: \\"\\",
                bindScale: \\"\\",
                htouchmove: \\"\\",
                vtouchmove: \\"\\",
                width: singleQuote(\\"10px\\"),
                height: singleQuote(\\"10px\\")
            }, touchEvents);
            var ScrollView = Object.assign({
                \\"scroll-x\\": \\"false\\",
                \\"scroll-y\\": \\"false\\",
                \\"upper-threshold\\": \\"50\\",
                \\"lower-threshold\\": \\"50\\",
                \\"scroll-top\\": \\"\\",
                \\"scroll-left\\": \\"\\",
                \\"scroll-into-view\\": \\"\\",
                \\"scroll-with-animation\\": \\"false\\",
                \\"enable-back-to-top\\": \\"false\\",
                \\"enable-flex\\": \\"false\\",
                \\"scroll-anchoring\\": \\" false\\",
                bindScrolltoUpper: \\"\\",
                bindScrolltoLower: \\"\\",
                bindScroll: \\"\\"
            }, touchEvents);
            function singleQuote(s) {
                return \\"'\\".concat(s, \\"'\\");
            }
            var Swiper = {
                \\"indicator-dots\\": \\"false\\",
                \\"indicator-color\\": singleQuote(\\"rgba(0, 0, 0, .3)\\"),
                \\"indicator-active-color\\": singleQuote(\\"#000000\\"),
                autoplay: \\"false\\",
                current: \\"0\\",
                interval: \\"5000\\",
                duration: \\"500\\",
                circular: \\"false\\",
                vertical: \\"false\\",
                \\"previous-margin\\": \\"'0px'\\",
                \\"next-margin\\": \\"'0px'\\",
                \\"display-multiple-items\\": \\"1\\",
                \\"skip-hidden-item-layout\\": \\"false\\",
                \\"easing-function\\": singleQuote(\\"default\\"),
                bindChange: \\"\\",
                bindTransition: \\"\\",
                bindAnimationFinish: \\"\\"
            };
            var SwiperItem = {
                \\"item-id\\": \\"\\"
            };
            var FunctionalPageNavigator = {
                version: singleQuote(\\"release\\"),
                name: \\"\\",
                args: \\"\\",
                bindSuccess: \\"\\",
                bindFail: \\"\\",
                bindCancel: \\"\\"
            };
            var Navigator = {
                target: singleQuote(\\"self\\"),
                url: \\"\\",
                \\"open-type\\": singleQuote(\\"navigate\\"),
                delta: \\"1\\",
                \\"app-id\\": \\"\\",
                path: \\"\\",
                \\"extra-data\\": \\"\\",
                version: singleQuote(\\"version\\"),
                \\"hover-class\\": singleQuote(\\"navigator-hover\\"),
                \\"hover-stop-propagation\\": \\"false\\",
                \\"hover-start-time\\": \\"50\\",
                \\"hover-stay-time\\": \\"600\\",
                bindSuccess: \\"\\",
                bindFail: \\"\\",
                bindComplete: \\"\\"
            };
            var Audio = {
                id: \\"\\",
                src: \\"\\",
                loop: \\"false\\",
                controls: \\"false\\",
                poster: \\"\\",
                name: \\"\\",
                author: \\"\\",
                bindError: \\"\\",
                bindPlay: \\"\\",
                bindPause: \\"\\",
                bindTimeUpdate: \\"\\",
                bindEnded: \\"\\"
            };
            var Camera = {
                mode: singleQuote(\\"normal\\"),
                \\"device-position\\": singleQuote(\\"back\\"),
                flash: singleQuote(\\"auto\\"),
                \\"frame-size\\": singleQuote(\\"medium\\"),
                bindStop: \\"\\",
                bindError: \\"\\",
                bindInitDone: \\"\\",
                bindScanCode: \\"\\"
            };
            var Image = {
                src: \\"\\",
                mode: singleQuote(\\"scaleToFill\\"),
                webp: \\"false\\",
                \\"lazy-load\\": \\"false\\",
                \\"show-menu-by-longpress\\": \\"false\\",
                bindError: \\"\\",
                bindLoad: \\"\\"
            };
            var LivePlayer = {
                src: \\"\\",
                mode: singleQuote(\\"live\\"),
                autoplay: \\"false\\",
                muted: \\"false\\",
                orientation: singleQuote(\\"vertical\\"),
                \\"object-fit\\": singleQuote(\\"contain\\"),
                \\"background-mute\\": \\"false\\",
                \\"min-cache\\": \\"1\\",
                \\"max-cache\\": \\"3\\",
                \\"sound-mode\\": singleQuote(\\"speaker\\"),
                \\"auto-pause-if-navigate\\": \\"true\\",
                \\"auto-pause-if-open-native\\": \\"true\\",
                bindStateChange: \\"\\",
                bindFullScreenChange: \\"\\",
                bindNetStatus: \\"\\"
            };
            var LivePusher = {
                url: \\"\\",
                mode: singleQuote(\\"RTC\\"),
                autopush: \\"false\\",
                muted: \\"false\\",
                \\"enable-camera\\": \\"true\\",
                \\"auto-focus\\": \\"true\\",
                orientation: singleQuote(\\"vertical\\"),
                beauty: \\"0\\",
                whiteness: \\"0\\",
                aspect: singleQuote(\\"9:16\\"),
                \\"min-bitrate\\": \\"200\\",
                \\"max-bitrate\\": \\"1000\\",
                \\"audio-quality\\": singleQuote(\\"high\\"),
                \\"waiting-image\\": \\"\\",
                \\"waiting-image-hash\\": \\"\\",
                zoom: \\"false\\",
                \\"device-position\\": singleQuote(\\"front\\"),
                \\"background-mute\\": \\"false\\",
                mirror: \\"false\\",
                \\"remote-mirror\\": \\"false\\",
                \\"local-mirror\\": \\"false\\",
                \\"audio-reverb-type\\": \\"0\\",
                \\"enable-mic\\": \\"true\\",
                \\"enable-agc\\": \\"false\\",
                \\"enable-ans\\": \\"false\\",
                \\"audio-volume-type\\": singleQuote(\\"voicecall\\"),
                \\"video-width\\": \\"360\\",
                \\"video-height\\": \\"640\\",
                bindStateChange: \\"\\",
                bindNetStatus: \\"\\",
                bindBgmStart: \\"\\",
                bindBgmProgress: \\"\\",
                bindBgmComplete: \\"\\"
            };
            var Video = {
                src: \\"\\",
                duration: \\"\\",
                controls: \\"true\\",
                \\"danmu-list\\": \\"\\",
                \\"danmu-btn\\": \\"\\",
                \\"enable-danmu\\": \\"\\",
                autoplay: \\"false\\",
                loop: \\"false\\",
                muted: \\"false\\",
                \\"initial-time\\": \\"0\\",
                \\"page-gesture\\": \\"false\\",
                direction: \\"\\",
                \\"show-progress\\": \\"true\\",
                \\"show-fullscreen-btn\\": \\"true\\",
                \\"show-play-btn\\": \\"true\\",
                \\"show-center-play-btn\\": \\"true\\",
                \\"enable-progress-gesture\\": \\"true\\",
                \\"object-fit\\": singleQuote(\\"contain\\"),
                poster: \\"\\",
                \\"show-mute-btn\\": \\"false\\",
                title: \\"\\",
                \\"play-btn-position\\": singleQuote(\\"bottom\\"),
                \\"enable-play-gesture\\": \\"false\\",
                \\"auto-pause-if-navigate\\": \\"true\\",
                \\"auto-pause-if-open-native\\": \\"true\\",
                \\"vslide-gesture\\": \\"false\\",
                \\"vslide-gesture-in-fullscreen\\": \\"true\\",
                \\"ad-unit-id\\": \\"\\",
                bindPlay: \\"\\",
                bindPause: \\"\\",
                bindEnded: \\"\\",
                bindTimeUpdate: \\"\\",
                bindFullScreenChange: \\"\\",
                bindWaiting: \\"\\",
                bindError: \\"\\",
                bindProgress: \\"\\",
                bindLoadedMetadata: \\"\\"
            };
            var Canvas = {
                type: \\"\\",
                \\"canvas-id\\": \\"\\",
                \\"disable-scroll\\": \\"false\\",
                bindTouchStart: \\"\\",
                bindTouchMove: \\"\\",
                bindTouchEnd: \\"\\",
                bindTouchCancel: \\"\\",
                bindLongtap: \\"\\",
                bindError: \\"\\"
            };
            var Ad = {
                \\"unit-id\\": \\"\\",
                \\"ad-intervals\\": \\"\\",
                bindLoad: \\"\\",
                bindError: \\"\\",
                bindClose: \\"\\"
            };
            var OfficialAccount = {
                bindLoad: \\"\\",
                bindError: \\"\\"
            };
            var OpenData = {
                type: \\"\\",
                \\"open-gid\\": \\"\\",
                lang: singleQuote(\\"en\\"),
                \\"default-text\\": \\"\\",
                \\"default-avatar\\": \\"\\",
                bindError: \\"\\"
            };
            var WebView = {
                src: \\"\\",
                bindMessage: \\"\\",
                bindLoad: \\"\\"
            };
            var NavigationBar = {
                title: \\"\\",
                loading: \\"false\\",
                \\"front-color\\": \\"\\",
                \\"background-color\\": \\"\\",
                \\"color-animation-duration\\": \\"0\\",
                \\"color-animation-timing-func\\": singleQuote(\\"linear\\")
            };
            var PageMeta = {
                \\"background-text-style\\": \\"\\",
                \\"background-color\\": \\"\\",
                \\"background-color-top\\": \\"\\",
                \\"background-color-bottom\\": \\"\\",
                \\"scroll-top\\": singleQuote(\\"\\"),
                \\"scroll-duration\\": \\"300\\",
                \\"page-style\\": singleQuote(\\"\\"),
                \\"root-font-size\\": singleQuote(\\"\\"),
                bindResize: \\"\\",
                bindScroll: \\"\\",
                bindScrollDone: \\"\\"
            };
            var Block = {};
            var internalComponents = {
                View: View,
                Icon: Icon,
                Progress: Progress,
                RichText: RichText,
                Text: Text,
                Button: Button,
                Checkbox: Checkbox,
                CheckboxGroup: CheckboxGroup,
                Editor: Editor,
                Form: Form,
                Input: Input,
                Label: Label,
                Picker: Picker,
                PickerView: PickerView,
                PickerViewColumn: PickerViewColumn,
                Radio: Radio,
                RadioGroup: RadioGroup,
                Slider: Slider,
                Switch: Switch,
                CoverImage: CoverImage,
                Textarea: Textarea,
                CoverView: CoverView,
                MovableArea: MovableArea,
                MovableView: MovableView,
                ScrollView: ScrollView,
                Swiper: Swiper,
                SwiperItem: SwiperItem,
                FunctionalPageNavigator: FunctionalPageNavigator,
                Navigator: Navigator,
                Audio: Audio,
                Camera: Camera,
                Image: Image,
                LivePlayer: LivePlayer,
                LivePusher: LivePusher,
                Video: Video,
                Canvas: Canvas,
                Ad: Ad,
                OfficialAccount: OfficialAccount,
                OpenData: OpenData,
                WebView: WebView,
                NavigationBar: NavigationBar,
                PageMeta: PageMeta,
                Block: Block,
                Map: Map$1
            };
            var controlledComponent = new Set([ \\"input\\", \\"checkbox\\", \\"picker-view\\", \\"radio\\", \\"slider\\", \\"textarea\\" ]);
            var incrementId = function incrementId() {
                var id = 0;
                return function() {
                    return (id++).toString();
                };
            };
            function isElement(node) {
                return node.nodeType === 1;
            }
            function isText(node) {
                return node.nodeType === 3;
            }
            var TaroEventTarget = function() {
                function TaroEventTarget() {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, TaroEventTarget);
                    this.__handlers = {};
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(TaroEventTarget, [ {
                    key: \\"addEventListener\\",
                    value: function addEventListener(type, handler, options) {
                        warn(type === \\"regionchange\\", \\"map \\\\u7ec4\\\\u4ef6\\\\u7684 regionchange \\\\u4e8b\\\\u4ef6\\\\u975e\\\\u5e38\\\\u7279\\\\u6b8a\\\\uff0c\\\\u8bf7\\\\u4f7f\\\\u7528 begin/end \\\\u4e8b\\\\u4ef6\\\\u66ff\\\\u4ee3\\\\u3002\\\\u8be6\\\\u60c5\\\\uff1ahttps://github.com/NervJS/taro/issues/5766\\");
                        type = type.toLowerCase();
                        var handlers = this.__handlers[type];
                        var isCapture = Boolean(options);
                        var isOnce = false;
                        if (isObject(options)) {
                            isCapture = Boolean(options.capture);
                            isOnce = Boolean(options.once);
                        }
                        if (isOnce) {
                            var wrapper = function wrapper() {
                                handler.apply(this, arguments);
                                this.removeEventListener(type, wrapper);
                            };
                            this.addEventListener(type, wrapper, Object.assign(Object.assign({}, options), {
                                once: false
                            }));
                            return;
                        }
                        warn(isCapture, \\"The event capture feature is unimplemented.\\");
                        if (isArray(handlers)) {
                            handlers.push(handler);
                        } else {
                            this.__handlers[type] = [ handler ];
                        }
                    }
                }, {
                    key: \\"removeEventListener\\",
                    value: function removeEventListener(type, handler) {
                        type = type.toLowerCase();
                        if (handler == null) {
                            return;
                        }
                        var handlers = this.__handlers[type];
                        if (!isArray(handlers)) {
                            return;
                        }
                        var index = handlers.indexOf(handler);
                        warn(index === -1, \\"\\\\u4e8b\\\\u4ef6: '\\".concat(type, \\"' \\\\u6ca1\\\\u6709\\\\u6ce8\\\\u518c\\\\u5728 DOM \\\\u4e2d\\\\uff0c\\\\u56e0\\\\u6b64\\\\u4e0d\\\\u4f1a\\\\u88ab\\\\u79fb\\\\u9664\\\\u3002\\"));
                        handlers.splice(index, 1);
                    }
                } ]);
                return TaroEventTarget;
            }();
            var eventSource = new Map;
            var TaroEvent = function() {
                function TaroEvent(type, opts, event) {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, TaroEvent);
                    this._stop = false;
                    this._end = false;
                    this.defaultPrevented = false;
                    this.type = type.toLowerCase();
                    this.mpEvent = event;
                    this.bubbles = Boolean(opts && opts.bubbles);
                    this.cancelable = Boolean(opts && opts.cancelable);
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(TaroEvent, [ {
                    key: \\"stopPropagation\\",
                    value: function stopPropagation() {
                        this._stop = true;
                    }
                }, {
                    key: \\"stopImmediatePropagation\\",
                    value: function stopImmediatePropagation() {
                        this._end = this._stop = true;
                    }
                }, {
                    key: \\"preventDefault\\",
                    value: function preventDefault() {
                        this.defaultPrevented = true;
                    }
                }, {
                    key: \\"target\\",
                    get: function get() {
                        var element = document$1.getElementById(this.mpEvent.target.id);
                        return Object.assign(Object.assign(Object.assign({}, this.mpEvent.target), this.mpEvent.detail), {
                            dataset: element !== null ? element.dataset : EMPTY_OBJ
                        });
                    }
                }, {
                    key: \\"currentTarget\\",
                    get: function get() {
                        var element = document$1.getElementById(this.mpEvent.currentTarget.id);
                        if (element === null) {
                            return this.target;
                        }
                        return Object.assign(Object.assign(Object.assign({}, this.mpEvent.currentTarget), this.mpEvent.detail), {
                            dataset: element.dataset
                        });
                    }
                } ]);
                return TaroEvent;
            }();
            function createEvent(event, _) {
                var domEv = new TaroEvent(event.type, {
                    bubbles: true,
                    cancelable: true
                }, event);
                for (var key in event) {
                    if (key === \\"currentTarget\\" || key === \\"target\\" || key === \\"type\\") {
                        continue;
                    } else {
                        domEv[key] = event[key];
                    }
                }
                return domEv;
            }
            function eventHandler(event) {
                if (event.currentTarget == null) {
                    event.currentTarget = event.target;
                }
                var node = document$1.getElementById(event.currentTarget.id);
                if (node != null) {
                    node.dispatchEvent(createEvent(event));
                }
            }
            function hydrate(node) {
                var _data;
                if (isText(node)) {
                    var _ref;
                    return _ref = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\\"a\\"])(_ref, \\"v\\", node.nodeValue), 
                    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\\"a\\"])(_ref, \\"nn\\", node.nodeName), 
                    _ref;
                }
                var data = (_data = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\\"a\\"])(_data, \\"nn\\", node.nodeName), 
                Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\\"a\\"])(_data, \\"uid\\", node.uid), 
                _data);
                var props = node.props, childNodes = node.childNodes;
                for (var prop in props) {
                    if (!prop.startsWith(\\"data-\\") && prop !== \\"class\\" && prop !== \\"style\\" && prop !== \\"id\\") {
                        data[true ? toCamelCase(prop) : undefined] = props[prop];
                    }
                }
                if (childNodes.length > 0) {
                    data[\\"cn\\"] = childNodes.map(hydrate);
                }
                if (node.className !== \\"\\") {
                    data[\\"cl\\"] = node.className;
                }
                if (node.cssText !== \\"\\") {
                    data[\\"st\\"] = node.cssText;
                }
                return data;
            }
            var options = {
                prerender: true,
                debug: false,
                html: {
                    skipElements: new Set([ \\"style\\", \\"script\\" ]),
                    voidElements: new Set([ \\"!doctype\\", \\"area\\", \\"base\\", \\"br\\", \\"col\\", \\"command\\", \\"embed\\", \\"hr\\", \\"img\\", \\"input\\", \\"keygen\\", \\"link\\", \\"meta\\", \\"param\\", \\"source\\", \\"track\\", \\"wbr\\" ]),
                    closingElements: new Set([ \\"html\\", \\"head\\", \\"body\\", \\"p\\", \\"dt\\", \\"dd\\", \\"li\\", \\"option\\", \\"thead\\", \\"th\\", \\"tbody\\", \\"tr\\", \\"td\\", \\"tfoot\\", \\"colgroup\\" ])
                }
            };
            function initPosition() {
                return {
                    index: 0,
                    column: 0,
                    line: 0
                };
            }
            function feedPosition(position, str, len) {
                var start = position.index;
                var end = position.index = start + len;
                for (var i = start; i < end; i++) {
                    var char = str.charAt(i);
                    if (char === \\"\\\\n\\") {
                        position.line++;
                        position.column = 0;
                    } else {
                        position.column++;
                    }
                }
            }
            function jumpPosition(position, str, end) {
                var len = end - position.index;
                return feedPosition(position, str, len);
            }
            function copyPosition(position) {
                return {
                    index: position.index,
                    line: position.line,
                    column: position.column
                };
            }
            var whitespace = /\\\\s/;
            function isWhitespaceChar(char) {
                return whitespace.test(char);
            }
            function shouldBeIgnore(tagName) {
                var name = tagName.toLowerCase();
                if (options.html.skipElements.has(name)) {
                    return true;
                }
                return false;
            }
            var alphanumeric = /[A-Za-z0-9]/;
            function findTextEnd(str, index) {
                while (true) {
                    var textEnd = str.indexOf(\\"<\\", index);
                    if (textEnd === -1) {
                        return textEnd;
                    }
                    var char = str.charAt(textEnd + 1);
                    if (char === \\"/\\" || char === \\"!\\" || alphanumeric.test(char)) {
                        return textEnd;
                    }
                    index = textEnd + 1;
                }
            }
            var Scaner = function() {
                function Scaner(html) {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, Scaner);
                    this.tokens = [];
                    this.position = initPosition();
                    this.html = html;
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(Scaner, [ {
                    key: \\"scan\\",
                    value: function scan() {
                        var html = this.html, position = this.position;
                        var len = html.length;
                        while (position.index < len) {
                            var start = position.index;
                            this.scanText();
                            if (position.index === start) {
                                var isComment = html.startsWith(\\"!--\\", start + 1);
                                if (isComment) {
                                    this.scanComment();
                                } else {
                                    var tagName = this.scanTag();
                                    if (shouldBeIgnore(tagName)) {
                                        this.scanSkipTag(tagName);
                                    }
                                }
                            }
                        }
                        return this.tokens;
                    }
                }, {
                    key: \\"scanText\\",
                    value: function scanText() {
                        var type = \\"text\\";
                        var html = this.html, position = this.position;
                        var textEnd = findTextEnd(html, position.index);
                        if (textEnd === position.index) {
                            return;
                        }
                        if (textEnd === -1) {
                            textEnd = html.length;
                        }
                        var start = copyPosition(position);
                        var content = html.slice(position.index, textEnd);
                        jumpPosition(position, html, textEnd);
                        var end = copyPosition(position);
                        this.tokens.push({
                            type: type,
                            content: content,
                            position: {
                                start: start,
                                end: end
                            }
                        });
                    }
                }, {
                    key: \\"scanComment\\",
                    value: function scanComment() {
                        var type = \\"comment\\";
                        var html = this.html, position = this.position;
                        var start = copyPosition(position);
                        feedPosition(position, html, 4);
                        var contentEnd = html.indexOf(\\"--\\\\x3e\\", position.index);
                        var commentEnd = contentEnd + 3;
                        if (contentEnd === -1) {
                            contentEnd = commentEnd = html.length;
                        }
                        var content = html.slice(position.index, contentEnd);
                        jumpPosition(position, html, commentEnd);
                        this.tokens.push({
                            type: type,
                            content: content,
                            position: {
                                start: start,
                                end: copyPosition(position)
                            }
                        });
                    }
                }, {
                    key: \\"scanTag\\",
                    value: function scanTag() {
                        this.scanTagStart();
                        var tagName = this.scanTagName();
                        this.scanAttrs();
                        this.scanTagEnd();
                        return tagName;
                    }
                }, {
                    key: \\"scanTagStart\\",
                    value: function scanTagStart() {
                        var type = \\"tag-start\\";
                        var html = this.html, position = this.position;
                        var secondChar = html.charAt(position.index + 1);
                        var close = secondChar === \\"/\\";
                        var start = copyPosition(position);
                        feedPosition(position, html, close ? 2 : 1);
                        this.tokens.push({
                            type: type,
                            close: close,
                            position: {
                                start: start
                            }
                        });
                    }
                }, {
                    key: \\"scanTagEnd\\",
                    value: function scanTagEnd() {
                        var type = \\"tag-end\\";
                        var html = this.html, position = this.position;
                        var firstChar = html.charAt(position.index);
                        var close = firstChar === \\"/\\";
                        feedPosition(position, html, close ? 2 : 1);
                        var end = copyPosition(position);
                        this.tokens.push({
                            type: type,
                            close: close,
                            position: {
                                end: end
                            }
                        });
                    }
                }, {
                    key: \\"scanTagName\\",
                    value: function scanTagName() {
                        var type = \\"tag\\";
                        var html = this.html, position = this.position;
                        var len = html.length;
                        var start = position.index;
                        while (start < len) {
                            var char = html.charAt(start);
                            var isTagChar = !(isWhitespaceChar(char) || char === \\"/\\" || char === \\">\\");
                            if (isTagChar) break;
                            start++;
                        }
                        var end = start + 1;
                        while (end < len) {
                            var _char = html.charAt(end);
                            var _isTagChar = !(isWhitespaceChar(_char) || _char === \\"/\\" || _char === \\">\\");
                            if (!_isTagChar) break;
                            end++;
                        }
                        jumpPosition(position, html, end);
                        var tagName = html.slice(start, end);
                        this.tokens.push({
                            type: type,
                            content: tagName
                        });
                        return tagName;
                    }
                }, {
                    key: \\"scanAttrs\\",
                    value: function scanAttrs() {
                        var html = this.html, position = this.position, tokens = this.tokens;
                        var cursor = position.index;
                        var quote = null;
                        var wordBegin = cursor;
                        var words = [];
                        var len = html.length;
                        while (cursor < len) {
                            var char = html.charAt(cursor);
                            if (quote) {
                                var isQuoteEnd = char === quote;
                                if (isQuoteEnd) {
                                    quote = null;
                                }
                                cursor++;
                                continue;
                            }
                            var isTagEnd = char === \\"/\\" || char === \\">\\";
                            if (isTagEnd) {
                                if (cursor !== wordBegin) {
                                    words.push(html.slice(wordBegin, cursor));
                                }
                                break;
                            }
                            var isWordEnd = isWhitespaceChar(char);
                            if (isWordEnd) {
                                if (cursor !== wordBegin) {
                                    words.push(html.slice(wordBegin, cursor));
                                }
                                wordBegin = cursor + 1;
                                cursor++;
                                continue;
                            }
                            var isQuoteStart = char === \\"'\\" || char === '\\"';
                            if (isQuoteStart) {
                                quote = char;
                                cursor++;
                                continue;
                            }
                            cursor++;
                        }
                        jumpPosition(position, html, cursor);
                        var wLen = words.length;
                        var type = \\"attribute\\";
                        for (var i = 0; i < wLen; i++) {
                            var word = words[i];
                            var isNotPair = word.includes(\\"=\\");
                            if (isNotPair) {
                                var secondWord = words[i + 1];
                                if (secondWord && secondWord.startsWith(\\"=\\")) {
                                    if (secondWord.length > 1) {
                                        var newWord = word + secondWord;
                                        tokens.push({
                                            type: type,
                                            content: newWord
                                        });
                                        i += 1;
                                        continue;
                                    }
                                    var thirdWord = words[i + 2];
                                    i += 1;
                                    if (thirdWord) {
                                        var _newWord = word + \\"=\\" + thirdWord;
                                        tokens.push({
                                            type: type,
                                            content: _newWord
                                        });
                                        i += 1;
                                        continue;
                                    }
                                }
                            }
                            if (word.endsWith(\\"=\\")) {
                                var _secondWord = words[i + 1];
                                if (_secondWord && !_secondWord.includes(\\"=\\")) {
                                    var _newWord3 = word + _secondWord;
                                    tokens.push({
                                        type: type,
                                        content: _newWord3
                                    });
                                    i += 1;
                                    continue;
                                }
                                var _newWord2 = word.slice(0, -1);
                                tokens.push({
                                    type: type,
                                    content: _newWord2
                                });
                                continue;
                            }
                            tokens.push({
                                type: type,
                                content: word
                            });
                        }
                    }
                }, {
                    key: \\"scanSkipTag\\",
                    value: function scanSkipTag(tagName) {
                        var html = this.html, position = this.position, tokens = this.tokens;
                        var safeTagName = tagName.toLowerCase();
                        var len = html.length;
                        var index = position.index;
                        while (index < len) {
                            var nextTag = html.indexOf(\\"</\\", index);
                            if (nextTag === -1) {
                                this.scanText();
                                break;
                            }
                            var tagStartPosition = copyPosition(position);
                            jumpPosition(tagStartPosition, html, nextTag);
                            var tagState = {
                                html: html,
                                position: tagStartPosition,
                                tokens: []
                            };
                            var name = this.scanTag();
                            if (safeTagName !== name.toLowerCase()) {
                                index = tagState.position.index;
                                continue;
                            }
                            if (nextTag !== position.index) {
                                var textStart = copyPosition(position);
                                jumpPosition(position, html, nextTag);
                                tokens.push({
                                    type: \\"text\\",
                                    content: html.slice(textStart.index, nextTag),
                                    position: {
                                        start: textStart,
                                        end: copyPosition(position)
                                    }
                                });
                            }
                            tokens.push.apply(tokens, tagState.tokens);
                            jumpPosition(position, html, tagState.position.index);
                            break;
                        }
                    }
                } ]);
                return Scaner;
            }();
            function makeMap(str, expectsLowerCase) {
                var map = Object.create(null);
                var list = str.split(\\",\\");
                for (var i = 0; i < list.length; i++) {
                    map[list[i]] = true;
                }
                return expectsLowerCase ? function(val) {
                    return !!map[val.toLowerCase()];
                } : function(val) {
                    return !!map[val];
                };
            }
            var specialMiniElements = {
                img: \\"image\\",
                iframe: \\"web-view\\"
            };
            var isMiniElements = makeMap(\\"input,canvas,progress,video,audio,form\\", true);
            var isInlineElements = makeMap(\\"a,i,abbr,iframe,select,acronym,slot,small,bdi,kbd,strong,big,map,sup,br,mark,mark,meter,template,canvas,textarea,cite,object,time,code,output,u,data,picture,tt,datalist,var,dfn,del,q,em,s,embed,samp\\", true);
            var isBlockElements = makeMap(\\"address,fieldset,li,article,figcaption,main,aside,figure,nav,blockquote,footer,ol,details,form,p,dialog,h1,h2,h3,h4,h5,h6,pre,dd,header,section,div,hgroup,table,dl,hr,ul,dt\\", true);
            var closingTagAncestorBreakers = {
                li: [ \\"ul\\", \\"ol\\", \\"menu\\" ],
                dt: [ \\"dl\\" ],
                dd: [ \\"dl\\" ],
                tbody: [ \\"table\\" ],
                thead: [ \\"table\\" ],
                tfoot: [ \\"table\\" ],
                tr: [ \\"table\\" ],
                td: [ \\"table\\" ]
            };
            function hasTerminalParent(tagName, stack) {
                var tagParents = closingTagAncestorBreakers[tagName];
                if (tagParents) {
                    var currentIndex = stack.length - 1;
                    while (currentIndex >= 0) {
                        var parentTagName = stack[currentIndex].tagName;
                        if (parentTagName === tagName) {
                            break;
                        }
                        if (tagParents && tagParents.includes(parentTagName)) {
                            return true;
                        }
                        currentIndex--;
                    }
                }
                return false;
            }
            function unquote(str) {
                var car = str.charAt(0);
                var end = str.length - 1;
                var isQuoteStart = car === '\\"' || car === \\"'\\";
                if (isQuoteStart && car === str.charAt(end)) {
                    return str.slice(1, end);
                }
                return str;
            }
            function getTagName(tag) {
                if (specialMiniElements[tag]) {
                    return specialMiniElements[tag];
                } else if (isMiniElements(tag)) {
                    return tag;
                } else if (isBlockElements(tag)) {
                    return \\"view\\";
                } else if (isInlineElements(tag)) {
                    return \\"text\\";
                }
                return \\"view\\";
            }
            function splitEqual(str) {
                var sep = \\"=\\";
                var idx = str.indexOf(sep);
                if (idx === -1) return [ str ];
                return [ str.slice(0, idx), str.slice(idx + sep.length) ];
            }
            function format(children) {
                return children.filter((function(child) {
                    if (child.type === \\"comment\\") {
                        return false;
                    } else if (child.type === \\"text\\") {
                        return child.content !== \\"\\";
                    }
                    return true;
                })).map((function(child) {
                    if (child.type === \\"text\\") {
                        var text = document$1.createTextNode(child.content);
                        if (isFunction(options.html.transformText)) {
                            return options.html.transformText(text, child);
                        }
                        return text;
                    }
                    var el = document$1.createElement(getTagName(child.tagName));
                    el.className = child.tagName;
                    for (var i = 0; i < child.attributes.length; i++) {
                        var attr = child.attributes[i];
                        var _splitEqual = splitEqual(attr), _splitEqual2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__[\\"a\\"])(_splitEqual, 2), key = _splitEqual2[0], value = _splitEqual2[1];
                        if (key === \\"class\\") {
                            el.className += el.className;
                        } else if (key[0] === \\"o\\" && key[1] === \\"n\\") {
                            continue;
                        } else {
                            el.setAttribute(key, value == null ? true : unquote(value));
                        }
                    }
                    var ch = format(child.children);
                    for (var _i = 0; _i < ch.length; _i++) {
                        el.appendChild(ch[_i]);
                    }
                    if (isFunction(options.html.transformElement)) {
                        return options.html.transformElement(el, child);
                    }
                    return el;
                }));
            }
            function parser(html) {
                var tokens = new Scaner(html).scan();
                var root = {
                    tagName: \\"\\",
                    children: [],
                    type: \\"element\\",
                    attributes: []
                };
                var state = {
                    tokens: tokens,
                    options: options,
                    cursor: 0,
                    stack: [ root ]
                };
                parse(state);
                return format(root.children);
            }
            function parse(state) {
                var tokens = state.tokens, stack = state.stack;
                var cursor = state.cursor;
                var len = tokens.length;
                var nodes = stack[stack.length - 1].children;
                while (cursor < len) {
                    var token = tokens[cursor];
                    if (token.type !== \\"tag-start\\") {
                        nodes.push(token);
                        cursor++;
                        continue;
                    }
                    var tagToken = tokens[++cursor];
                    cursor++;
                    var tagName = tagToken.content.toLowerCase();
                    if (token.close) {
                        var index = stack.length;
                        var shouldRewind = false;
                        while (--index > -1) {
                            if (stack[index].tagName === tagName) {
                                shouldRewind = true;
                                break;
                            }
                        }
                        while (cursor < len) {
                            var endToken = tokens[cursor];
                            if (endToken.type !== \\"tag-end\\") break;
                            cursor++;
                        }
                        if (shouldRewind) {
                            stack.splice(index);
                            break;
                        } else {
                            continue;
                        }
                    }
                    var isClosingTag = options.html.closingElements.has(tagName);
                    var shouldRewindToAutoClose = isClosingTag;
                    if (shouldRewindToAutoClose) {
                        shouldRewindToAutoClose = !hasTerminalParent(tagName, stack);
                    }
                    if (shouldRewindToAutoClose) {
                        var currentIndex = stack.length - 1;
                        while (currentIndex > 0) {
                            if (tagName === stack[currentIndex].tagName) {
                                stack.splice(currentIndex);
                                var previousIndex = currentIndex - 1;
                                nodes = stack[previousIndex].children;
                                break;
                            }
                            currentIndex = currentIndex - 1;
                        }
                    }
                    var attributes = [];
                    var attrToken = void 0;
                    while (cursor < len) {
                        attrToken = tokens[cursor];
                        if (attrToken.type === \\"tag-end\\") break;
                        attributes.push(attrToken.content);
                        cursor++;
                    }
                    cursor++;
                    var children = [];
                    var element = {
                        type: \\"element\\",
                        tagName: tagToken.content,
                        attributes: attributes,
                        children: children
                    };
                    nodes.push(element);
                    var hasChildren = !(attrToken.close || options.html.voidElements.has(tagName));
                    if (hasChildren) {
                        stack.push({
                            tagName: tagName,
                            children: children
                        });
                        var innerState = {
                            tokens: tokens,
                            cursor: cursor,
                            stack: stack
                        };
                        parse(innerState);
                        cursor = innerState.cursor;
                    }
                }
                state.cursor = cursor;
            }
            function setInnerHTML(element, html) {
                element.textContent = \\"\\";
                var children = parser(html);
                for (var i = 0; i < children.length; i++) {
                    element.appendChild(children[i]);
                }
            }
            var nodeId = incrementId();
            var TaroNode = function(_TaroEventTarget) {
                Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(TaroNode, _TaroEventTarget);
                function TaroNode(nodeType, nodeName) {
                    var _this;
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, TaroNode);
                    _this = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(TaroNode).call(this));
                    _this.parentNode = null;
                    _this.childNodes = [];
                    _this.hydrate = function(node) {
                        return function() {
                            return hydrate(node);
                        };
                    };
                    _this.nodeType = nodeType;
                    _this.nodeName = nodeName;
                    _this.uid = \\"_n_\\".concat(nodeId());
                    eventSource.set(_this.uid, Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__[\\"a\\"])(_this));
                    return _this;
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(TaroNode, [ {
                    key: \\"insertBefore\\",
                    value: function insertBefore(newChild, refChild, isReplace) {
                        var _this2 = this;
                        newChild.remove();
                        newChild.parentNode = this;
                        var payload;
                        if (refChild) {
                            var index = this.findIndex(this.childNodes, refChild);
                            this.childNodes.splice(index, 0, newChild);
                            if (isReplace === true) {
                                payload = {
                                    path: newChild._path,
                                    value: this.hydrate(newChild)
                                };
                            } else {
                                payload = {
                                    path: \\"\\".concat(this._path, \\".\\", \\"cn\\"),
                                    value: function value() {
                                        return _this2.childNodes.map(hydrate);
                                    }
                                };
                            }
                        } else {
                            this.childNodes.push(newChild);
                            payload = {
                                path: newChild._path,
                                value: this.hydrate(newChild)
                            };
                        }
                        this.enqueueUpdate(payload);
                        return newChild;
                    }
                }, {
                    key: \\"appendChild\\",
                    value: function appendChild(child) {
                        this.insertBefore(child);
                    }
                }, {
                    key: \\"replaceChild\\",
                    value: function replaceChild(newChild, oldChild) {
                        if (oldChild.parentNode === this) {
                            this.insertBefore(newChild, oldChild, true);
                            oldChild.remove(true);
                            return oldChild;
                        }
                    }
                }, {
                    key: \\"removeChild\\",
                    value: function removeChild(child, isReplace) {
                        var _this3 = this;
                        var index = this.findIndex(this.childNodes, child);
                        this.childNodes.splice(index, 1);
                        if (isReplace !== true) {
                            this.enqueueUpdate({
                                path: \\"\\".concat(this._path, \\".\\", \\"cn\\"),
                                value: function value() {
                                    return _this3.childNodes.map(hydrate);
                                }
                            });
                        }
                        child.parentNode = null;
                        eventSource.delete(child.uid);
                        child._empty();
                        return child;
                    }
                }, {
                    key: \\"remove\\",
                    value: function remove(isReplace) {
                        if (this.parentNode) {
                            this.parentNode.removeChild(this, isReplace);
                        }
                    }
                }, {
                    key: \\"hasChildNodes\\",
                    value: function hasChildNodes() {
                        return this.childNodes.length > 0;
                    }
                }, {
                    key: \\"enqueueUpdate\\",
                    value: function enqueueUpdate(payload) {
                        if (this._root === null) {
                            return;
                        }
                        this._root.enqueueUpdate(payload);
                    }
                }, {
                    key: \\"_empty\\",
                    value: function _empty() {
                        while (this.childNodes.length > 0) {
                            var child = this.childNodes[0];
                            child.parentNode = null;
                            eventSource.delete(child.uid);
                            this.childNodes.shift();
                        }
                    }
                }, {
                    key: \\"findIndex\\",
                    value: function findIndex(childeNodes, refChild) {
                        var index = childeNodes.indexOf(refChild);
                        ensure(index !== -1, \\"The node to be replaced is not a child of this node.\\");
                        return index;
                    }
                }, {
                    key: \\"_path\\",
                    get: function get() {
                        if (this.parentNode !== null) {
                            var index = false ? undefined : \\"[\\" + this.parentNode.childNodes.indexOf(this) + \\"]\\";
                            return \\"\\".concat(this.parentNode._path, \\".\\", \\"cn\\", \\".\\").concat(index);
                        }
                        return \\"\\";
                    }
                }, {
                    key: \\"_root\\",
                    get: function get() {
                        if (this.parentNode !== null) {
                            return this.parentNode._root;
                        }
                        return null;
                    }
                }, {
                    key: \\"nextSibling\\",
                    get: function get() {
                        var parentNode = this.parentNode;
                        if (parentNode) {
                            return parentNode.childNodes[this.findIndex(parentNode.childNodes, this) + 1] || null;
                        }
                        return null;
                    }
                }, {
                    key: \\"previousSibling\\",
                    get: function get() {
                        var parentNode = this.parentNode;
                        if (parentNode) {
                            return parentNode.childNodes[this.findIndex(parentNode.childNodes, this) - 1] || null;
                        }
                        return null;
                    }
                }, {
                    key: \\"firstChild\\",
                    get: function get() {
                        return this.childNodes[0] || null;
                    }
                }, {
                    key: \\"lastChild\\",
                    get: function get() {
                        var c = this.childNodes;
                        return c[c.length - 1] || null;
                    }
                }, {
                    key: \\"textContent\\",
                    set: function set(text) {
                        if (text === \\"\\") {
                            this._empty();
                            this.enqueueUpdate({
                                path: \\"\\".concat(this._path, \\".\\", \\"cn\\"),
                                value: function value() {
                                    return [];
                                }
                            });
                        }
                    }
                }, {
                    key: \\"innerHTML\\",
                    set: function set(html) {
                        setInnerHTML(this, html);
                    },
                    get: function get() {
                        return \\"\\";
                    }
                } ]);
                return TaroNode;
            }(TaroEventTarget);
            var TaroText = function(_TaroNode) {
                Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(TaroText, _TaroNode);
                function TaroText(text) {
                    var _this4;
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, TaroText);
                    _this4 = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(TaroText).call(this, 3, \\"#text\\"));
                    _this4._value = text;
                    return _this4;
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(TaroText, [ {
                    key: \\"textContent\\",
                    set: function set(text) {
                        this._value = text;
                        this.enqueueUpdate({
                            path: \\"\\".concat(this._path, \\".\\", \\"v\\"),
                            value: text
                        });
                    },
                    get: function get() {
                        return this._value;
                    }
                }, {
                    key: \\"nodeValue\\",
                    set: function set(text) {
                        this.textContent = text;
                    },
                    get: function get() {
                        return this._value;
                    }
                } ]);
                return TaroText;
            }(TaroNode);
            var styleProperties = [ \\"alignContent\\", \\"alignItems\\", \\"alignSelf\\", \\"alignmentAdjust\\", \\"alignmentBaseline\\", \\"all\\", \\"animation\\", \\"animationDelay\\", \\"animationDirection\\", \\"animationDuration\\", \\"animationFillMode\\", \\"animationIterationCount\\", \\"animationName\\", \\"animationPlayState\\", \\"animationTimingFunction\\", \\"appearance\\", \\"azimuth\\", \\"backfaceVisibility\\", \\"background\\", \\"backgroundAttachment\\", \\"backgroundBlendMode\\", \\"backgroundClip\\", \\"backgroundColor\\", \\"backgroundImage\\", \\"backgroundOrigin\\", \\"backgroundPosition\\", \\"backgroundRepeat\\", \\"backgroundSize\\", \\"baselineShift\\", \\"blockOverflow\\", \\"blockSize\\", \\"bookmarkLabel\\", \\"bookmarkLevel\\", \\"bookmarkState\\", \\"border\\", \\"borderBlock\\", \\"borderBlockColor\\", \\"borderBlockEnd\\", \\"borderBlockEndColor\\", \\"borderBlockEndStyle\\", \\"borderBlockEndWidth\\", \\"borderBlockStart\\", \\"borderBlockStartColor\\", \\"borderBlockStartStyle\\", \\"borderBlockStartWidth\\", \\"borderBlockStyle\\", \\"borderBlockWidth\\", \\"borderBottom\\", \\"borderBottomColor\\", \\"borderBottomFitLength\\", \\"borderBottomFitWidth\\", \\"borderBottomImage\\", \\"borderBottomLeftFitWidth\\", \\"borderBottomLeftImage\\", \\"borderBottomLeftRadius\\", \\"borderBottomRightFitLength\\", \\"borderBottomRightFitWidth\\", \\"borderBottomRightImage\\", \\"borderBottomRightRadius\\", \\"borderBottomStyle\\", \\"borderBottomWidth\\", \\"borderBottomlEftFitLength\\", \\"borderBoundary\\", \\"borderBreak\\", \\"borderCollapse\\", \\"borderColor\\", \\"borderCornerFit\\", \\"borderCornerImage\\", \\"borderCornerImageTransform\\", \\"borderEndEndRadius\\", \\"borderEndStartRadius\\", \\"borderFit\\", \\"borderFitLength\\", \\"borderFitWidth\\", \\"borderImage\\", \\"borderImageOutset\\", \\"borderImageRepeat\\", \\"borderImageSlice\\", \\"borderImageSource\\", \\"borderImageTransform\\", \\"borderImageWidth\\", \\"borderInline\\", \\"borderInlineColor\\", \\"borderInlineEnd\\", \\"borderInlineEndColor\\", \\"borderInlineEndStyle\\", \\"borderInlineEndWidth\\", \\"borderInlineStart\\", \\"borderInlineStartColor\\", \\"borderInlineStartStyle\\", \\"borderInlineStartWidth\\", \\"borderInlineStyle\\", \\"borderInlineWidth\\", \\"borderLeft\\", \\"borderLeftColor\\", \\"borderLeftFitLength\\", \\"borderLeftFitWidth\\", \\"borderLeftImage\\", \\"borderLeftStyle\\", \\"borderLeftWidth\\", \\"borderRadius\\", \\"borderRight\\", \\"borderRightColor\\", \\"borderRightFitLength\\", \\"borderRightFitWidth\\", \\"borderRightImage\\", \\"borderRightStyle\\", \\"borderRightWidth\\", \\"borderSpacing\\", \\"borderStartEndRadius\\", \\"borderStartStartRadius\\", \\"borderStyle\\", \\"borderTop\\", \\"borderTopColor\\", \\"borderTopFitLength\\", \\"borderTopFitWidth\\", \\"borderTopImage\\", \\"borderTopLeftFitLength\\", \\"borderTopLeftFitWidth\\", \\"borderTopLeftImage\\", \\"borderTopLeftRadius\\", \\"borderTopRightFitLength\\", \\"borderTopRightFitWidth\\", \\"borderTopRightImage\\", \\"borderTopRightRadius\\", \\"borderTopStyle\\", \\"borderTopWidth\\", \\"borderWidth\\", \\"bottom\\", \\"boxDecorationBreak\\", \\"boxShadow\\", \\"boxSizing\\", \\"boxSnap\\", \\"breakAfter\\", \\"breakBefore\\", \\"breakInside\\", \\"captionSide\\", \\"caret\\", \\"caretColor\\", \\"caretShape\\", \\"chains\\", \\"clear\\", \\"clip\\", \\"clipPath\\", \\"clipRule\\", \\"color\\", \\"colorAdjust\\", \\"colorInterpolationFilters\\", \\"colorScheme\\", \\"columnCount\\", \\"columnFill\\", \\"columnGap\\", \\"columnRule\\", \\"columnRuleColor\\", \\"columnRuleStyle\\", \\"columnRuleWidth\\", \\"columnSpan\\", \\"columnWidth\\", \\"columns\\", \\"contain\\", \\"content\\", \\"continue\\", \\"counterIncrement\\", \\"counterReset\\", \\"counterSet\\", \\"cue\\", \\"cueAfter\\", \\"cueBefore\\", \\"cursor\\", \\"direction\\", \\"display\\", \\"dominantBaseline\\", \\"dropInitialAfterAdjust\\", \\"dropInitialAfterAlign\\", \\"dropInitialBeforeAdjust\\", \\"dropInitialBeforeAlign\\", \\"dropInitialSize\\", \\"dropInitialValue\\", \\"elevation\\", \\"emptyCells\\", \\"filter\\", \\"flex\\", \\"flexBasis\\", \\"flexDirection\\", \\"flexFlow\\", \\"flexGrow\\", \\"flexShrink\\", \\"flexWrap\\", \\"float\\", \\"floodColor\\", \\"floodOpacity\\", \\"flow\\", \\"flowFrom\\", \\"flowInto\\", \\"font\\", \\"fontFamily\\", \\"fontFeatureSettings\\", \\"fontKerning\\", \\"fontLanguageOverride\\", \\"fontMaxSize\\", \\"fontMinSize\\", \\"fontOpticalSizing\\", \\"fontPalette\\", \\"fontSize\\", \\"fontSizeAdjust\\", \\"fontStretch\\", \\"fontStyle\\", \\"fontSynthesis\\", \\"fontSynthesisSmallCaps\\", \\"fontSynthesisStyle\\", \\"fontSynthesisWeight\\", \\"fontVariant\\", \\"fontVariantAlternates\\", \\"fontVariantCaps\\", \\"fontVariantEastAsian\\", \\"fontVariantEmoji\\", \\"fontVariantLigatures\\", \\"fontVariantNumeric\\", \\"fontVariantPosition\\", \\"fontVariationSettings\\", \\"fontWeight\\", \\"footnoteDisplay\\", \\"footnotePolicy\\", \\"forcedColorAdjust\\", \\"gap\\", \\"glyphOrientationVertical\\", \\"grid\\", \\"gridArea\\", \\"gridAutoColumns\\", \\"gridAutoFlow\\", \\"gridAutoRows\\", \\"gridColumn\\", \\"gridColumnEnd\\", \\"gridColumnStart\\", \\"gridRow\\", \\"gridRowEnd\\", \\"gridRowStart\\", \\"gridTemplate\\", \\"gridTemplateAreas\\", \\"gridTemplateColumns\\", \\"gridTemplateRows\\", \\"hangingPunctuation\\", \\"height\\", \\"hyphenateCharacter\\", \\"hyphenateLimitChars\\", \\"hyphenateLimitLast\\", \\"hyphenateLimitLines\\", \\"hyphenateLimitZone\\", \\"hyphens\\", \\"imageOrientation\\", \\"imageResolution\\", \\"initialLetters\\", \\"initialLettersAlign\\", \\"initialLettersWrap\\", \\"inlineBoxAlign\\", \\"inlineSize\\", \\"inlineSizing\\", \\"inset\\", \\"insetBlock\\", \\"insetBlockEnd\\", \\"insetBlockStart\\", \\"insetInline\\", \\"insetInlineEnd\\", \\"insetInlineStart\\", \\"isolation\\", \\"justifyContent\\", \\"justifyItems\\", \\"justifySelf\\", \\"left\\", \\"letterSpacing\\", \\"lightingColor\\", \\"lineBreak\\", \\"lineClamp\\", \\"lineGrid\\", \\"lineHeight\\", \\"linePadding\\", \\"lineSnap\\", \\"lineStacking\\", \\"lineStackingRuby\\", \\"lineStackingShift\\", \\"lineStackingStrategy\\", \\"listStyle\\", \\"listStyleImage\\", \\"listStylePosition\\", \\"listStyleType\\", \\"margin\\", \\"marginBlock\\", \\"marginBlockEnd\\", \\"marginBlockStart\\", \\"marginBottom\\", \\"marginInline\\", \\"marginInlineEnd\\", \\"marginInlineStart\\", \\"marginLeft\\", \\"marginRight\\", \\"marginTop\\", \\"marginTrim\\", \\"markerSide\\", \\"mask\\", \\"maskBorder\\", \\"maskBorderMode\\", \\"maskBorderOutset\\", \\"maskBorderRepeat\\", \\"maskBorderSlice\\", \\"maskBorderSource\\", \\"maskBorderWidth\\", \\"maskClip\\", \\"maskComposite\\", \\"maskImage\\", \\"maskMode\\", \\"maskOrigin\\", \\"maskPosition\\", \\"maskRepeat\\", \\"maskSize\\", \\"maskType\\", \\"maxBlockSize\\", \\"maxHeight\\", \\"maxInlineSize\\", \\"maxLines\\", \\"maxWidth\\", \\"minBlockSize\\", \\"minHeight\\", \\"minInlineSize\\", \\"minWidth\\", \\"mixBlendMode\\", \\"navDown\\", \\"navLeft\\", \\"navRight\\", \\"navUp\\", \\"objectFit\\", \\"objectPosition\\", \\"offset\\", \\"offsetAfter\\", \\"offsetAnchor\\", \\"offsetBefore\\", \\"offsetDistance\\", \\"offsetEnd\\", \\"offsetPath\\", \\"offsetPosition\\", \\"offsetRotate\\", \\"offsetStart\\", \\"opacity\\", \\"order\\", \\"orphans\\", \\"outline\\", \\"outlineColor\\", \\"outlineOffset\\", \\"outlineStyle\\", \\"outlineWidth\\", \\"overflow\\", \\"overflowBlock\\", \\"overflowInline\\", \\"overflowWrap\\", \\"overflowX\\", \\"overflowY\\", \\"padding\\", \\"paddingBlock\\", \\"paddingBlockEnd\\", \\"paddingBlockStart\\", \\"paddingBottom\\", \\"paddingInline\\", \\"paddingInlineEnd\\", \\"paddingInlineStart\\", \\"paddingLeft\\", \\"paddingRight\\", \\"paddingTop\\", \\"page\\", \\"pageBreakAfter\\", \\"pageBreakBefore\\", \\"pageBreakInside\\", \\"pause\\", \\"pauseAfter\\", \\"pauseBefore\\", \\"perspective\\", \\"perspectiveOrigin\\", \\"pitch\\", \\"pitchRange\\", \\"placeContent\\", \\"placeItems\\", \\"placeSelf\\", \\"playDuring\\", \\"position\\", \\"quotes\\", \\"regionFragment\\", \\"resize\\", \\"richness\\", \\"right\\", \\"rowGap\\", \\"rubyAlign\\", \\"rubyMerge\\", \\"rubyPosition\\", \\"running\\", \\"scrollBehavior\\", \\"scrollMargin\\", \\"scrollMarginBlock\\", \\"scrollMarginBlockEnd\\", \\"scrollMarginBlockStart\\", \\"scrollMarginBottom\\", \\"scrollMarginInline\\", \\"scrollMarginInlineEnd\\", \\"scrollMarginInlineStart\\", \\"scrollMarginLeft\\", \\"scrollMarginRight\\", \\"scrollMarginTop\\", \\"scrollPadding\\", \\"scrollPaddingBlock\\", \\"scrollPaddingBlockEnd\\", \\"scrollPaddingBlockStart\\", \\"scrollPaddingBottom\\", \\"scrollPaddingInline\\", \\"scrollPaddingInlineEnd\\", \\"scrollPaddingInlineStart\\", \\"scrollPaddingLeft\\", \\"scrollPaddingRight\\", \\"scrollPaddingTop\\", \\"scrollSnapAlign\\", \\"scrollSnapStop\\", \\"scrollSnapType\\", \\"shapeImageThreshold\\", \\"shapeInside\\", \\"shapeMargin\\", \\"shapeOutside\\", \\"speak\\", \\"speakHeader\\", \\"speakNumeral\\", \\"speakPunctuation\\", \\"speechRate\\", \\"stress\\", \\"stringSet\\", \\"tabSize\\", \\"tableLayout\\", \\"textAlign\\", \\"textAlignAll\\", \\"textAlignLast\\", \\"textCombineUpright\\", \\"textDecoration\\", \\"textDecorationColor\\", \\"textDecorationLine\\", \\"textDecorationStyle\\", \\"textEmphasis\\", \\"textEmphasisColor\\", \\"textEmphasisPosition\\", \\"textEmphasisStyle\\", \\"textGroupAlign\\", \\"textHeight\\", \\"textIndent\\", \\"textJustify\\", \\"textOrientation\\", \\"textOverflow\\", \\"textShadow\\", \\"textSpaceCollapse\\", \\"textSpaceTrim\\", \\"textSpacing\\", \\"textTransform\\", \\"textUnderlinePosition\\", \\"textWrap\\", \\"top\\", \\"transform\\", \\"transformBox\\", \\"transformOrigin\\", \\"transformStyle\\", \\"transition\\", \\"transitionDelay\\", \\"transitionDuration\\", \\"transitionProperty\\", \\"transitionTimingFunction\\", \\"unicodeBidi\\", \\"userSelect\\", \\"verticalAlign\\", \\"visibility\\", \\"voiceFamily\\", \\"volume\\", \\"whiteSpace\\", \\"widows\\", \\"width\\", \\"willChange\\", \\"wordBreak\\", \\"wordSpacing\\", \\"wordWrap\\", \\"wrapAfter\\", \\"wrapBefore\\", \\"wrapFlow\\", \\"wrapInside\\", \\"wrapThrough\\", \\"writingMode\\", \\"zIndex\\" ];
            var PROPERTY_THRESHOLD = 2046;
            var SET_DATA = \\"\\\\u5c0f\\\\u7a0b\\\\u5e8f setData\\";
            var PAGE_INIT = \\"\\\\u9875\\\\u9762\\\\u521d\\\\u59cb\\\\u5316\\";
            function setStyle(newVal, styleKey) {
                var old = this[styleKey];
                if (newVal) {
                    this._usedStyleProp.add(styleKey);
                }
                warn(isString(newVal) && newVal.length > PROPERTY_THRESHOLD, \\"Style \\\\u5c5e\\\\u6027 \\".concat(styleKey, \\" \\\\u7684\\\\u503c\\\\u6570\\\\u636e\\\\u91cf\\\\u8fc7\\\\u5927\\\\uff0c\\\\u53ef\\\\u80fd\\\\u4f1a\\\\u5f71\\\\u54cd\\\\u6e32\\\\u67d3\\\\u6027\\\\u80fd\\\\uff0c\\\\u8003\\\\u8651\\\\u4f7f\\\\u7528 CSS \\\\u7c7b\\\\u6216\\\\u5176\\\\u5b83\\\\u65b9\\\\u6848\\\\u66ff\\\\u4ee3\\\\u3002\\"));
                if (old !== newVal) {
                    this._value[styleKey] = newVal;
                    this._element.enqueueUpdate({
                        path: \\"\\".concat(this._element._path, \\".\\", \\"st\\"),
                        value: this.cssText
                    });
                }
            }
            function initStyle(ctor) {
                var properties = {};
                var _loop = function _loop(i) {
                    var styleKey = styleProperties[i];
                    properties[styleKey] = {
                        get: function get() {
                            return this._value[styleKey] || \\"\\";
                        },
                        set: function set(newVal) {
                            setStyle.call(this, newVal, styleKey);
                        }
                    };
                };
                for (var i = 0; i < styleProperties.length; i++) {
                    _loop(i);
                }
                Object.defineProperties(ctor.prototype, properties);
            }
            var Style = function() {
                function Style(element) {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, Style);
                    this._element = element;
                    this._usedStyleProp = new Set;
                    this._value = {};
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(Style, [ {
                    key: \\"setCssVariables\\",
                    value: function setCssVariables(styleKey) {
                        var _this5 = this;
                        this.hasOwnProperty(styleKey) || Object.defineProperty(this, styleKey, {
                            enumerable: true,
                            configurable: true,
                            get: function get() {
                                return _this5._value[styleKey] || \\"\\";
                            },
                            set: function set(newVal) {
                                setStyle.call(_this5, newVal, styleKey);
                            }
                        });
                    }
                }, {
                    key: \\"setProperty\\",
                    value: function setProperty(propertyName, value) {
                        if (propertyName[0] === \\"-\\") {
                            this.setCssVariables(propertyName);
                        } else {
                            propertyName = toCamelCase(propertyName);
                        }
                        if (isUndefined(value)) {
                            return;
                        }
                        if (value === null || value === \\"\\") {
                            this.removeProperty(propertyName);
                        } else {
                            this[propertyName] = value;
                        }
                    }
                }, {
                    key: \\"removeProperty\\",
                    value: function removeProperty(propertyName) {
                        propertyName = toCamelCase(propertyName);
                        if (!this._usedStyleProp.has(propertyName)) {
                            return \\"\\";
                        }
                        var value = this[propertyName];
                        this[propertyName] = \\"\\";
                        this._usedStyleProp.delete(propertyName);
                        return value;
                    }
                }, {
                    key: \\"getPropertyValue\\",
                    value: function getPropertyValue(propertyName) {
                        propertyName = toCamelCase(propertyName);
                        var value = this[propertyName];
                        if (!value) {
                            return \\"\\";
                        }
                        return value;
                    }
                }, {
                    key: \\"cssText\\",
                    get: function get() {
                        var _this6 = this;
                        var text = \\"\\";
                        this._usedStyleProp.forEach((function(key) {
                            var val = _this6[key];
                            if (!val) return;
                            text += \\"\\".concat(toDashed(key), \\": \\").concat(val, \\";\\");
                        }));
                        return text;
                    },
                    set: function set(str) {
                        var _this7 = this;
                        if (str == null) {
                            str = \\"\\";
                        }
                        this._usedStyleProp.forEach((function(prop) {
                            _this7.removeProperty(prop);
                        }));
                        if (str === \\"\\") {
                            return;
                        }
                        var rules = str.split(\\";\\");
                        for (var i = 0; i < rules.length; i++) {
                            var rule = rules[i].trim();
                            if (rule === \\"\\") {
                                continue;
                            }
                            var _rule$split = rule.split(\\":\\"), _rule$split2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_6__[\\"a\\"])(_rule$split, 2), propName = _rule$split2[0], val = _rule$split2[1];
                            if (isUndefined(val)) {
                                continue;
                            }
                            this.setProperty(propName.trim(), val.trim());
                        }
                    }
                } ]);
                return Style;
            }();
            initStyle(Style);
            var TaroElement = function(_TaroNode2) {
                Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(TaroElement, _TaroNode2);
                function TaroElement(nodeType, nodeName) {
                    var _this8;
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, TaroElement);
                    _this8 = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(TaroElement).call(this, nodeType || 1, nodeName));
                    _this8.props = {};
                    _this8.dataset = EMPTY_OBJ;
                    _this8.tagName = nodeName.toUpperCase();
                    _this8.style = new Style(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__[\\"a\\"])(_this8));
                    warn(_this8.tagName === \\"MAP\\" && \\"weapp\\" === \\"weapp\\", \\"\\\\u5fae\\\\u4fe1\\\\u5c0f\\\\u7a0b\\\\u5e8f map \\\\u7ec4\\\\u4ef6\\\\u7684 \`setting\` \\\\u5c5e\\\\u6027\\\\u9700\\\\u8981\\\\u4f20\\\\u9012\\\\u4e00\\\\u4e2a\\\\u9ed8\\\\u8ba4\\\\u503c\\\\u3002\\\\u8be6\\\\u60c5\\\\uff1a\\\\n https://developers.weixin.qq.com/miniprogram/dev/component/map.html\\");
                    return _this8;
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(TaroElement, [ {
                    key: \\"hasAttribute\\",
                    value: function hasAttribute(qualifiedName) {
                        return !isUndefined(this.props[qualifiedName]);
                    }
                }, {
                    key: \\"hasAttributes\\",
                    value: function hasAttributes() {
                        return this.attributes.length > 0;
                    }
                }, {
                    key: \\"focus\\",
                    value: function focus() {
                        this.setAttribute(\\"focus\\", true);
                    }
                }, {
                    key: \\"blur\\",
                    value: function blur() {
                        this.setAttribute(\\"focus\\", false);
                    }
                }, {
                    key: \\"setAttribute\\",
                    value: function setAttribute(qualifiedName, value) {
                        warn(isString(value) && value.length > PROPERTY_THRESHOLD, \\"\\\\u5143\\\\u7d20 \\".concat(this.nodeName, \\" \\\\u7684 \\\\u5c5e\\\\u6027 \\").concat(qualifiedName, \\" \\\\u7684\\\\u503c\\\\u6570\\\\u636e\\\\u91cf\\\\u8fc7\\\\u5927\\\\uff0c\\\\u53ef\\\\u80fd\\\\u4f1a\\\\u5f71\\\\u54cd\\\\u6e32\\\\u67d3\\\\u6027\\\\u80fd\\\\u3002\\\\u8003\\\\u8651\\\\u964d\\\\u4f4e\\\\u56fe\\\\u7247\\\\u8f6c\\\\u4e3a base64 \\\\u7684\\\\u9608\\\\u503c\\\\u6216\\\\u5728 CSS \\\\u4e2d\\\\u4f7f\\\\u7528 base64\\\\u3002\\"));
                        if (qualifiedName === \\"style\\") {
                            this.style.cssText = value;
                            qualifiedName = \\"st\\";
                        } else if (qualifiedName === \\"id\\") {
                            eventSource.delete(this.uid);
                            this.props[qualifiedName] = this.uid = value;
                            eventSource.set(value, this);
                            qualifiedName = \\"uid\\";
                        } else {
                            this.props[qualifiedName] = value;
                            if (qualifiedName === \\"class\\") {
                                qualifiedName = \\"cl\\";
                            }
                            if (qualifiedName.startsWith(\\"data-\\")) {
                                if (this.dataset === EMPTY_OBJ) {
                                    this.dataset = Object.create(null);
                                }
                                this.dataset[toCamelCase(qualifiedName.replace(/^data-/, \\"\\"))] = value;
                            }
                        }
                        this.enqueueUpdate({
                            path: \\"\\".concat(this._path, \\".\\").concat(true ? toCamelCase(qualifiedName) : undefined),
                            value: value
                        });
                    }
                }, {
                    key: \\"removeAttribute\\",
                    value: function removeAttribute(qualifiedName) {
                        if (qualifiedName === \\"style\\") {
                            this.style.cssText = \\"\\";
                        } else if (true) {
                            var compName = capitalize(toCamelCase(this.tagName.toLowerCase()));
                            if (compName in internalComponents && hasOwn(internalComponents[compName], qualifiedName) && isBooleanStringLiteral(internalComponents[compName][qualifiedName])) {
                                this.setAttribute(qualifiedName, false);
                            } else {
                                delete this.props[qualifiedName];
                            }
                        } else {}
                        this.enqueueUpdate({
                            path: \\"\\".concat(this._path, \\".\\").concat(true ? toCamelCase(qualifiedName) : undefined),
                            value: \\"\\"
                        });
                    }
                }, {
                    key: \\"getAttribute\\",
                    value: function getAttribute(qualifiedName) {
                        var attr = qualifiedName === \\"style\\" ? this.style.cssText : this.props[qualifiedName];
                        return attr !== null && attr !== void 0 ? attr : \\"\\";
                    }
                }, {
                    key: \\"dispatchEvent\\",
                    value: function dispatchEvent(event) {
                        var cancelable = event.cancelable;
                        var listeners = this.__handlers[event.type];
                        if (!isArray(listeners)) {
                            return;
                        }
                        for (var i = listeners.length; i--; ) {
                            var listener = listeners[i];
                            var result = void 0;
                            if (listener._stop) {
                                listener._stop = false;
                            } else {
                                result = listener.call(this, event);
                            }
                            if ((result === false || event._end) && cancelable) {
                                event.defaultPrevented = true;
                            }
                            if (event._end && event._stop) {
                                break;
                            }
                        }
                        if (event._stop) {
                            this._stopPropagation(event);
                        } else {
                            event._stop = true;
                        }
                        return listeners != null;
                    }
                }, {
                    key: \\"_stopPropagation\\",
                    value: function _stopPropagation(event) {
                        var target = this;
                        while (target = target.parentNode) {
                            var listeners = target.__handlers[event.type];
                            if (!isArray(listeners)) {
                                continue;
                            }
                            for (var i = listeners.length; i--; ) {
                                var l = listeners[i];
                                l._stop = true;
                            }
                        }
                    }
                }, {
                    key: \\"id\\",
                    get: function get() {
                        return this.getAttribute(\\"id\\");
                    },
                    set: function set(val) {
                        this.setAttribute(\\"id\\", val);
                    }
                }, {
                    key: \\"className\\",
                    get: function get() {
                        return this.getAttribute(\\"class\\") || \\"\\";
                    },
                    set: function set(val) {
                        this.setAttribute(\\"class\\", val);
                    }
                }, {
                    key: \\"cssText\\",
                    get: function get() {
                        return this.getAttribute(\\"style\\") || \\"\\";
                    }
                }, {
                    key: \\"children\\",
                    get: function get() {
                        return this.childNodes.filter(isElement);
                    }
                }, {
                    key: \\"attributes\\",
                    get: function get() {
                        var _this9 = this;
                        var propKeys = Object.keys(this.props);
                        var style = this.style.cssText;
                        var attrs = propKeys.map((function(p) {
                            return {
                                name: p,
                                value: _this9.props[p]
                            };
                        }));
                        return attrs.concat(style ? {
                            name: \\"style\\",
                            value: style
                        } : []);
                    }
                }, {
                    key: \\"parentElement\\",
                    get: function get() {
                        if (this.parentNode instanceof TaroElement) {
                            return this.parentNode;
                        }
                        return null;
                    }
                }, {
                    key: \\"textContent\\",
                    get: function get() {
                        var text = \\"\\";
                        for (var i = 0; i < this.childNodes.length; i++) {
                            var element = this.childNodes[i];
                            text += element.textContent;
                        }
                        return text;
                    },
                    set: function set(text) {
                        Object(_babel_runtime_helpers_esm_set__WEBPACK_IMPORTED_MODULE_1__[\\"a\\"])(Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(TaroElement.prototype), \\"textContent\\", text, this, true);
                    }
                } ]);
                return TaroElement;
            }(TaroNode);
            var FormElement = function(_TaroElement) {
                Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(FormElement, _TaroElement);
                function FormElement() {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, FormElement);
                    return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(FormElement).apply(this, arguments));
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(FormElement, [ {
                    key: \\"value\\",
                    get: function get() {
                        var val = this.props[\\"value\\"];
                        return val == null ? \\"\\" : val;
                    },
                    set: function set(val) {
                        this.setAttribute(\\"value\\", val);
                    }
                } ]);
                return FormElement;
            }(TaroElement);
            var Performance = function() {
                function Performance() {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, Performance);
                    this.recorder = new Map;
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(Performance, [ {
                    key: \\"start\\",
                    value: function start(id) {
                        if (!options.debug) {
                            return;
                        }
                        this.recorder.set(id, Date.now());
                    }
                }, {
                    key: \\"stop\\",
                    value: function stop(id) {
                        if (!options.debug) {
                            return;
                        }
                        var now = Date.now();
                        var prev = this.recorder.get(id);
                        var time = now - prev;
                        console.log(\\"\\".concat(id, \\" \\\\u65f6\\\\u957f\\\\uff1a \\").concat(time, \\"ms\\"));
                    }
                } ]);
                return Performance;
            }();
            var perf = new Performance;
            var TaroRootElement = function(_TaroElement2) {
                Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(TaroRootElement, _TaroElement2);
                function TaroRootElement() {
                    var _this10;
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, TaroRootElement);
                    _this10 = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(TaroRootElement).call(this, 1, \\"root\\"));
                    _this10.pendingUpdate = false;
                    _this10.updatePayloads = [];
                    _this10.pendingFlush = false;
                    _this10.updateCallbacks = [];
                    _this10.ctx = null;
                    return _this10;
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(TaroRootElement, [ {
                    key: \\"enqueueUpdate\\",
                    value: function enqueueUpdate(payload) {
                        this.updatePayloads.push(payload);
                        if (this.pendingUpdate || this.ctx === null) {
                            return;
                        }
                        this.performUpdate();
                    }
                }, {
                    key: \\"performUpdate\\",
                    value: function performUpdate() {
                        var _this11 = this;
                        var initRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        var prerender = arguments.length > 1 ? arguments[1] : undefined;
                        this.pendingUpdate = true;
                        var ctx = this.ctx;
                        setTimeout((function() {
                            perf.start(SET_DATA);
                            var data = Object.create(null);
                            var resetPaths = new Set(initRender ? [ \\"root.cn.[0]\\", \\"root.cn[0]\\" ] : []);
                            while (_this11.updatePayloads.length > 0) {
                                var _this11$updatePayload = _this11.updatePayloads.shift(), path = _this11$updatePayload.path, value = _this11$updatePayload.value;
                                if (path.endsWith(\\"cn\\")) {
                                    resetPaths.add(path);
                                }
                                data[path] = value;
                            }
                            var _loop2 = function _loop2(_path) {
                                resetPaths.forEach((function(p) {
                                    if (_path.includes(p) && _path !== p) {
                                        delete data[_path];
                                    }
                                }));
                                var value = data[_path];
                                if (isFunction(value)) {
                                    data[_path] = value();
                                }
                            };
                            for (var _path in data) {
                                _loop2(_path);
                            }
                            if (isFunction(prerender)) {
                                prerender(data);
                            } else {
                                _this11.pendingUpdate = false;
                                ctx.setData(data, (function() {
                                    perf.stop(SET_DATA);
                                    if (!_this11.pendingFlush) {
                                        _this11.flushUpdateCallback();
                                    }
                                    if (initRender) {
                                        perf.stop(PAGE_INIT);
                                    }
                                }));
                            }
                        }), 0);
                    }
                }, {
                    key: \\"enqueueUpdateCallbak\\",
                    value: function enqueueUpdateCallbak(cb, ctx) {
                        this.updateCallbacks.push((function() {
                            ctx ? cb.call(ctx) : cb();
                        }));
                    }
                }, {
                    key: \\"flushUpdateCallback\\",
                    value: function flushUpdateCallback() {
                        this.pendingFlush = false;
                        var copies = this.updateCallbacks.slice(0);
                        this.updateCallbacks.length = 0;
                        for (var i = 0; i < copies.length; i++) {
                            copies[i]();
                        }
                    }
                }, {
                    key: \\"_path\\",
                    get: function get() {
                        return \\"root\\";
                    }
                }, {
                    key: \\"_root\\",
                    get: function get() {
                        return this;
                    }
                } ]);
                return TaroRootElement;
            }(TaroElement);
            var isBrowser = typeof document !== \\"undefined\\" && !!document.scripts;
            var doc = isBrowser ? document : EMPTY_OBJ;
            var win = isBrowser ? window : EMPTY_OBJ;
            var TaroDocument = function(_TaroElement3) {
                Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(TaroDocument, _TaroElement3);
                function TaroDocument() {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, TaroDocument);
                    return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(TaroDocument).call(this, 9, \\"#document\\"));
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(TaroDocument, [ {
                    key: \\"createElement\\",
                    value: function createElement(type) {
                        if (type === \\"root\\") {
                            return new TaroRootElement;
                        }
                        if (controlledComponent.has(type)) {
                            return new FormElement(1, type);
                        }
                        return new TaroElement(1, type);
                    }
                }, {
                    key: \\"createTextNode\\",
                    value: function createTextNode(text) {
                        return new TaroText(text);
                    }
                }, {
                    key: \\"getElementById\\",
                    value: function getElementById(id) {
                        var el = eventSource.get(id);
                        return isUndefined(el) ? null : el;
                    }
                }, {
                    key: \\"createComment\\",
                    value: function createComment() {
                        return new TaroText(\\"\\");
                    }
                } ]);
                return TaroDocument;
            }(TaroElement);
            function createDocument() {
                var doc = new TaroDocument;
                doc.appendChild(doc.documentElement = doc.createElement(\\"html\\"));
                doc.documentElement.appendChild(doc.head = doc.createElement(\\"head\\"));
                doc.documentElement.appendChild(doc.createElement(\\"body\\"));
                var app = doc.createElement(\\"app\\");
                app.id = \\"app\\";
                var container = doc.createElement(\\"container\\");
                container.appendChild(app);
                doc.documentElement.lastChild.appendChild(container);
                return doc;
            }
            var document$1 = isBrowser ? doc : createDocument();
            var machine = \\"Macintosh\\";
            var arch = \\"Intel Mac OS X 10_14_5\\";
            var engine = \\"AppleWebKit/534.36 (KHTML, like Gecko) NodeJS/v4.1.0 Chrome/76.0.3809.132 Safari/534.36\\";
            var navigator = isBrowser ? win.navigator : {
                appCodeName: \\"Mozilla\\",
                appName: \\"Netscape\\",
                appVersion: \\"5.0 (\\" + machine + \\"; \\" + arch + \\") \\" + engine,
                cookieEnabled: true,
                mimeTypes: [],
                onLine: true,
                platform: \\"MacIntel\\",
                plugins: [],
                product: \\"Taro\\",
                productSub: \\"20030107\\",
                userAgent: \\"Mozilla/5.0 (\\" + machine + \\"; \\" + arch + \\") \\" + engine,
                vendor: \\"Joyent\\",
                vendorSub: \\"\\"
            };
            var now;
            (function() {
                var loadTime;
                if (typeof performance !== \\"undefined\\" && performance !== null && performance.now) {
                    now = function now() {
                        return performance.now();
                    };
                } else if (Date.now) {
                    now = function now() {
                        return Date.now() - loadTime;
                    };
                    loadTime = Date.now();
                } else {
                    now = function now() {
                        return (new Date).getTime() - loadTime;
                    };
                    loadTime = (new Date).getTime();
                }
            })();
            var lastTime = 0;
            var raf = typeof requestAnimationFrame !== \\"undefined\\" && requestAnimationFrame !== null ? requestAnimationFrame : function(callback) {
                var _now = now();
                var nextTime = Math.max(lastTime + 16, _now);
                return setTimeout((function() {
                    callback(lastTime = nextTime);
                }), nextTime - _now);
            };
            var caf = typeof cancelAnimationFrame !== \\"undefined\\" && cancelAnimationFrame !== null ? cancelAnimationFrame : clearTimeout;
            var window$1 = isBrowser ? win : {
                navigator: navigator,
                document: document$1
            };
            if (false) {}
            var Current = {
                app: null,
                router: null,
                page: null
            };
            var Events = function() {
                function Events(opts) {
                    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, Events);
                    if (typeof opts !== \\"undefined\\" && opts.callbacks) {
                        this.callbacks = opts.callbacks;
                    } else {
                        this.callbacks = {};
                    }
                }
                Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(Events, [ {
                    key: \\"on\\",
                    value: function on(eventName, callback, context) {
                        var event, node, tail, list;
                        if (!callback) {
                            return this;
                        }
                        eventName = eventName.split(Events.eventSplitter);
                        var calls = this.callbacks;
                        while (event = eventName.shift()) {
                            list = calls[event];
                            node = list ? list.tail : {};
                            node.next = tail = {};
                            node.context = context;
                            node.callback = callback;
                            calls[event] = {
                                tail: tail,
                                next: list ? list.next : node
                            };
                        }
                        return this;
                    }
                }, {
                    key: \\"once\\",
                    value: function once(events, callback, context) {
                        var _this12 = this;
                        var wrapper = function wrapper() {
                            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                                args[_key] = arguments[_key];
                            }
                            callback.apply(_this12, args);
                            _this12.off(events, wrapper, context);
                        };
                        this.on(events, wrapper, context);
                        return this;
                    }
                }, {
                    key: \\"off\\",
                    value: function off(events, callback, context) {
                        var event, calls, node, tail, cb, ctx;
                        if (!(calls = this.callbacks)) {
                            return this;
                        }
                        if (!(events || callback || context)) {
                            delete this.callbacks;
                            return this;
                        }
                        events = events ? events.split(Events.eventSplitter) : Object.keys(calls);
                        while (event = events.shift()) {
                            node = calls[event];
                            delete calls[event];
                            if (!node || !(callback || context)) {
                                continue;
                            }
                            tail = node.tail;
                            while ((node = node.next) !== tail) {
                                cb = node.callback;
                                ctx = node.context;
                                if (callback && cb !== callback || context && ctx !== context) {
                                    this.on(event, cb, ctx);
                                }
                            }
                        }
                        return this;
                    }
                }, {
                    key: \\"trigger\\",
                    value: function trigger(events) {
                        var event, node, calls, tail;
                        if (!(calls = this.callbacks)) {
                            return this;
                        }
                        events = events.split(Events.eventSplitter);
                        var rest = [].slice.call(arguments, 1);
                        while (event = events.shift()) {
                            if (node = calls[event]) {
                                tail = node.tail;
                                while ((node = node.next) !== tail) {
                                    node.callback.apply(node.context || this, rest);
                                }
                            }
                        }
                        return this;
                    }
                } ]);
                return Events;
            }();
            Events.eventSplitter = /\\\\s+/;
            var eventCenter;
            if (false) {} else {
                eventCenter = new Events;
            }
            var instances = new Map;
            function injectPageInstance(inst, id) {
                instances.set(id, inst);
            }
            function getPageInstance(id) {
                return instances.get(id);
            }
            function addLeadingSlash(path) {
                if (path == null) {
                    return \\"\\";
                }
                return path.charAt(0) === \\"/\\" ? path : \\"/\\" + path;
            }
            var pageId = incrementId();
            function safeExecute(path, lifecycle) {
                var isReact = \\"vue\\" !== \\"vue\\";
                var instance = instances.get(path);
                if (instance == null) {
                    return;
                }
                if (isReact) {
                    if (lifecycle === \\"onShow\\") {
                        lifecycle = \\"componentDidShow\\";
                    } else if (lifecycle === \\"onHide\\") {
                        lifecycle = \\"componentDidHide\\";
                    }
                }
                var func = isReact ? instance[lifecycle] : instance.$options[lifecycle];
                for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                    args[_key2 - 2] = arguments[_key2];
                }
                if (isArray(func)) {
                    for (var i = 0; i < func.length; i++) {
                        func[i].apply(instance, args);
                    }
                    return;
                }
                if (!isFunction(func)) {
                    return;
                }
                return func.apply(instance, args);
            }
            function stringify(obj) {
                if (obj == null) {
                    return \\"\\";
                }
                return \\"?\\" + Object.keys(obj).map((function(key) {
                    return key + \\"=\\" + obj[key];
                })).join(\\"&\\");
            }
            function getPath(id, options) {
                var path = id;
                if (!isBrowser) {
                    path = id + stringify(options);
                }
                return path;
            }
            function getOnReadyEventKey(path) {
                return path + \\".\\" + \\"onReady\\";
            }
            function getOnShowEventKey(path) {
                return path + \\".\\" + \\"onShow\\";
            }
            function getOnHideEventKey(path) {
                return path + \\".\\" + \\"onHide\\";
            }
            function createPageConfig(component, pageName, data) {
                var id = pageName !== null && pageName !== void 0 ? pageName : \\"taro_page_\\".concat(pageId());
                var pageElement = null;
                var config = {
                    onLoad: function onLoad(options, cb) {
                        var _this13 = this;
                        perf.start(PAGE_INIT);
                        var path = getPath(id, options);
                        Current.router = {
                            params: options,
                            path: addLeadingSlash(this.route || this.__route__),
                            onReady: getOnReadyEventKey(id),
                            onShow: getOnShowEventKey(id),
                            onHide: getOnHideEventKey(id)
                        };
                        Current.app.mount(component, path, (function() {
                            pageElement = document$1.getElementById(path);
                            ensure(pageElement !== null, \\"\\\\u6ca1\\\\u6709\\\\u627e\\\\u5230\\\\u9875\\\\u9762\\\\u5b9e\\\\u4f8b\\\\u3002\\");
                            safeExecute(path, \\"onLoad\\", options);
                            if (!isBrowser) {
                                pageElement.ctx = _this13;
                                pageElement.performUpdate(true, cb);
                            }
                        }));
                    },
                    onReady: function onReady() {
                        var path = getPath(id, this.options);
                        raf((function() {
                            eventCenter.trigger(getOnReadyEventKey(id));
                        }));
                        safeExecute(path, \\"onReady\\");
                    },
                    onUnload: function onUnload() {
                        var path = getPath(id, this.options);
                        Current.app.unmount(path, (function() {
                            instances.delete(path);
                            if (pageElement) {
                                pageElement.ctx = null;
                            }
                        }));
                    },
                    onShow: function onShow() {
                        Current.page = this;
                        var path = getPath(id, this.options);
                        Current.router = {
                            params: this.options,
                            path: addLeadingSlash(this.route || this.__route__),
                            onReady: getOnReadyEventKey(id),
                            onShow: getOnShowEventKey(id),
                            onHide: getOnHideEventKey(id)
                        };
                        raf((function() {
                            eventCenter.trigger(getOnShowEventKey(id));
                        }));
                        safeExecute(path, \\"onShow\\");
                    },
                    onHide: function onHide() {
                        Current.page = null;
                        Current.router = null;
                        var path = getPath(id, this.options);
                        raf((function() {
                            eventCenter.trigger(getOnHideEventKey(id));
                        }));
                        safeExecute(path, \\"onHide\\");
                    },
                    onPullDownRefresh: function onPullDownRefresh() {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onPullDownRefresh\\");
                    },
                    onReachBottom: function onReachBottom() {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onReachBottom\\");
                    },
                    onPageScroll: function onPageScroll(options) {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onPageScroll\\", options);
                    },
                    onShareAppMessage: function onShareAppMessage(options) {
                        var target = options.target;
                        if (target != null) {
                            var _id = target.id;
                            var element = document$1.getElementById(_id);
                            if (element != null) {
                                options.target.dataset = element.dataset;
                            }
                        }
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onShareAppMessage\\", options);
                    },
                    onResize: function onResize(options) {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onResize\\", options);
                    },
                    onTabItemTap: function onTabItemTap(options) {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onTabItemTap\\", options);
                    },
                    onTitleClick: function onTitleClick() {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onTitleClick\\");
                    },
                    onOptionMenuClick: function onOptionMenuClick() {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onOptionMenuClick\\");
                    },
                    onPopMenuClick: function onPopMenuClick() {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onPopMenuClick\\");
                    },
                    onPullIntercept: function onPullIntercept() {
                        var path = getPath(id, this.options);
                        return safeExecute(path, \\"onPullIntercept\\");
                    }
                };
                config.eh = eventHandler;
                if (!isUndefined(data)) {
                    config.data = data;
                }
                if (isBrowser) {
                    config.path = id;
                }
                return config;
            }
            function createComponentConfig(component, componentName, data) {
                var _a, _b, _c;
                var id = componentName !== null && componentName !== void 0 ? componentName : \\"taro_component_\\".concat(pageId());
                var componentElement = null;
                var config = {
                    attached: function attached() {
                        var _this14 = this;
                        perf.start(PAGE_INIT);
                        Current.app.mount(component, id, (function() {
                            componentElement = document$1.getElementById(id);
                            ensure(componentElement !== null, \\"\\\\u6ca1\\\\u6709\\\\u627e\\\\u5230\\\\u7ec4\\\\u4ef6\\\\u5b9e\\\\u4f8b\\\\u3002\\");
                            safeExecute(id, \\"onLoad\\");
                            if (!isBrowser) {
                                componentElement.ctx = _this14;
                                componentElement.performUpdate(true);
                            }
                        }));
                    },
                    detached: function detached() {
                        Current.app.unmount(id, (function() {
                            if (componentElement) {
                                componentElement.ctx = null;
                            }
                        }));
                    },
                    pageLifetimes: {
                        show: function show() {
                            safeExecute(id, \\"onShow\\");
                        },
                        hide: function hide() {
                            safeExecute(id, \\"onHide\\");
                        }
                    },
                    methods: {
                        eh: eventHandler
                    }
                };
                if (!isUndefined(data)) {
                    config.data = data;
                }
                config[\\"options\\"] = (_a = component === null || component === void 0 ? void 0 : component[\\"options\\"]) !== null && _a !== void 0 ? _a : EMPTY_OBJ;
                config[\\"externalClasses\\"] = (_b = component === null || component === void 0 ? void 0 : component[\\"externalClasses\\"]) !== null && _b !== void 0 ? _b : EMPTY_OBJ;
                config[\\"behaviors\\"] = (_c = component === null || component === void 0 ? void 0 : component[\\"behaviors\\"]) !== null && _c !== void 0 ? _c : EMPTY_OBJ;
                return config;
            }
            function createRecursiveComponentConfig() {
                return {
                    properties: {
                        i: {
                            type: Object,
                            value: Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[\\"a\\"])({}, \\"nn\\", \\"view\\")
                        }
                    },
                    observers: {
                        i: function i(val) {
                            warn(val[\\"nn\\"] === \\"#text\\", \\"\\\\u8bf7\\\\u5728\\\\u6b64\\\\u5143\\\\u7d20\\\\u5916\\\\u518d\\\\u5957\\\\u4e00\\\\u5c42\\\\u975e Text \\\\u5143\\\\u7d20\\\\uff1a<text>\\".concat(val[\\"v\\"], \\"</text>\\\\uff0c\\\\u8be6\\\\u60c5\\\\uff1ahttps://github.com/NervJS/taro/issues/6054\\"));
                        }
                    },
                    options: {
                        addGlobalClass: true
                    },
                    methods: {
                        eh: eventHandler
                    }
                };
            }
            function connectReactPage(R, id) {
                var h = R.createElement;
                return function(component) {
                    var _a;
                    var isReactComponent = isFunction(component[\\"render\\"]) || !!((_a = component.prototype) === null || _a === void 0 ? void 0 : _a.isReactComponent) || component.prototype instanceof R.Component;
                    var inject = function inject(node) {
                        return node && injectPageInstance(node, id);
                    };
                    var refs = isReactComponent ? {
                        ref: inject
                    } : {
                        forwardedRef: inject
                    };
                    if (PageContext === EMPTY_OBJ) {
                        PageContext = R.createContext(\\"\\");
                    }
                    return (function(_R$Component) {
                        Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(Page, _R$Component);
                        function Page() {
                            var _this15;
                            Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, Page);
                            _this15 = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(Page).apply(this, arguments));
                            _this15.state = {
                                hasError: false
                            };
                            return _this15;
                        }
                        Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(Page, [ {
                            key: \\"componentDidCatch\\",
                            value: function componentDidCatch(error, info) {
                                console.warn(error);
                                console.error(info.componentStack);
                            }
                        }, {
                            key: \\"render\\",
                            value: function render() {
                                var children = this.state.hasError ? [] : h(PageContext.Provider, {
                                    value: id
                                }, h(component, Object.assign(Object.assign({}, this.props), refs)));
                                if (isBrowser) {
                                    return h(\\"div\\", {
                                        id: id,
                                        className: \\"taro_page\\"
                                    }, children);
                                }
                                return h(\\"root\\", {
                                    id: id
                                }, children);
                            }
                        } ], [ {
                            key: \\"getDerivedStateFromError\\",
                            value: function getDerivedStateFromError(error) {
                                console.warn(error);
                                return {
                                    hasError: true
                                };
                            }
                        } ]);
                        return Page;
                    }(R.Component));
                };
            }
            var R = EMPTY_OBJ;
            var PageContext = EMPTY_OBJ;
            var ReactDOM;
            function createReactApp(App, react, reactdom) {
                R = react;
                ReactDOM = reactdom;
                ensure(!!ReactDOM, \\"\\\\u6784\\\\u5efa React/Nerv \\\\u9879\\\\u76ee\\\\u8bf7\\\\u628a process.env.FRAMEWORK \\\\u8bbe\\\\u7f6e\\\\u4e3a 'react'/'nerv' \\");
                var ref = R.createRef();
                var wrapper;
                var AppWrapper = function(_R$Component2) {
                    Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__[\\"a\\"])(AppWrapper, _R$Component2);
                    function AppWrapper() {
                        var _this16;
                        Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, AppWrapper);
                        _this16 = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__[\\"a\\"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__[\\"a\\"])(AppWrapper).apply(this, arguments));
                        _this16.pages = [];
                        _this16.elements = [];
                        return _this16;
                    }
                    Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(AppWrapper, [ {
                        key: \\"mount\\",
                        value: function mount(component, id, cb) {
                            var page = function page() {
                                return R.createElement(component, {
                                    key: id,
                                    tid: id
                                });
                            };
                            this.pages.push(page);
                            this.forceUpdate(cb);
                        }
                    }, {
                        key: \\"unmount\\",
                        value: function unmount(id, cb) {
                            for (var i = 0; i < this.elements.length; i++) {
                                var element = this.elements[i];
                                if (element.key === id) {
                                    this.elements.splice(i, 1);
                                    break;
                                }
                            }
                            this.forceUpdate(cb);
                        }
                    }, {
                        key: \\"render\\",
                        value: function render() {
                            while (this.pages.length > 0) {
                                var page = this.pages.pop();
                                this.elements.push(page());
                            }
                            return R.createElement(App, {
                                ref: ref
                            }, isBrowser ? R.createElement(\\"div\\", null, this.elements.slice()) : this.elements.slice());
                        }
                    } ]);
                    return AppWrapper;
                }(R.Component);
                var AppConfig = function() {
                    function AppConfig() {
                        Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, AppConfig);
                    }
                    Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(AppConfig, [ {
                        key: \\"onLaunch\\",
                        value: function onLaunch(options) {
                            wrapper = ReactDOM.render(R.createElement(AppWrapper), document$1.getElementById(\\"app\\"));
                            var app = ref.current;
                            Current.router = Object.assign({
                                params: options === null || options === void 0 ? void 0 : options.query
                            }, options);
                            if (app != null && isFunction(app.onLaunch)) {
                                app.onLaunch(options);
                            }
                        }
                    }, {
                        key: \\"onShow\\",
                        value: function onShow(options) {
                            var app = ref.current;
                            Current.router = Object.assign({
                                params: options === null || options === void 0 ? void 0 : options.query
                            }, options);
                            if (app != null && isFunction(app.componentDidShow)) {
                                app.componentDidShow(options);
                            }
                        }
                    }, {
                        key: \\"onHide\\",
                        value: function onHide(options) {
                            var app = ref.current;
                            if (app != null && isFunction(app.componentDidHide)) {
                                app.componentDidHide(options);
                            }
                        }
                    }, {
                        key: \\"render\\",
                        value: function render(cb) {
                            wrapper.forceUpdate(cb);
                        }
                    }, {
                        key: \\"mount\\",
                        value: function mount(component, id, cb) {
                            var page = connectReactPage(R, id)(component);
                            wrapper.mount(page, id, cb);
                        }
                    }, {
                        key: \\"unmount\\",
                        value: function unmount(id, cb) {
                            wrapper.unmount(id, cb);
                        }
                    } ]);
                    return AppConfig;
                }();
                Current.app = new AppConfig;
                return Current.app;
            }
            function connectVuePage(Vue, id) {
                return function(component) {
                    var injectedPage = Vue.extend({
                        props: {
                            tid: String
                        },
                        mixins: [ component, {
                            created: function created() {
                                injectPageInstance(this, id);
                            }
                        } ]
                    });
                    var options = {
                        render: function render(h) {
                            return h(isBrowser ? \\"div\\" : \\"root\\", {
                                attrs: {
                                    id: id,
                                    class: isBrowser ? \\"taro_page\\" : \\"\\"
                                }
                            }, [ h(injectedPage, {
                                props: {
                                    tid: id
                                }
                            }) ]);
                        }
                    };
                    return options;
                };
            }
            var Vue;
            function createVueApp(App, vue) {
                Vue = vue;
                ensure(!!Vue, \\"\\\\u6784\\\\u5efa Vue \\\\u9879\\\\u76ee\\\\u8bf7\\\\u628a process.env.FRAMEWORK \\\\u8bbe\\\\u7f6e\\\\u4e3a 'vue'\\");
                Vue.config.getTagNamespace = noop;
                var elements = [];
                var pages = [];
                var appInstance;
                var wrapper = new Vue({
                    render: function render(h) {
                        while (pages.length > 0) {
                            var page = pages.pop();
                            elements.push(page(h));
                        }
                        return h(App.$options, {
                            ref: \\"app\\"
                        }, elements.slice());
                    },
                    methods: {
                        mount: function mount(component, id, cb) {
                            pages.push((function(h) {
                                return h(component, {
                                    key: id
                                });
                            }));
                            this.updateSync(cb);
                        },
                        updateSync: function updateSync(cb) {
                            this._update(this._render(), false);
                            this.$children.forEach((function(child) {
                                return child._update(child._render(), false);
                            }));
                            cb();
                        },
                        unmount: function unmount(id, cb) {
                            for (var i = 0; i < elements.length; i++) {
                                var element = elements[i];
                                if (element.key === id) {
                                    elements.splice(i, 1);
                                    break;
                                }
                            }
                            this.updateSync(cb);
                        }
                    }
                });
                var AppConfig = function() {
                    function AppConfig() {
                        Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_8__[\\"a\\"])(this, AppConfig);
                    }
                    Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_9__[\\"a\\"])(AppConfig, [ {
                        key: \\"onLaunch\\",
                        value: function onLaunch(options) {
                            wrapper.$mount(document$1.getElementById(\\"app\\"));
                            appInstance = wrapper.$refs.app;
                            Current.router = Object.assign({
                                params: options === null || options === void 0 ? void 0 : options.query
                            }, options);
                            if (appInstance != null && isFunction(appInstance.$options.onLaunch)) {
                                appInstance.$options.onLaunch.call(appInstance, options);
                            }
                        }
                    }, {
                        key: \\"onShow\\",
                        value: function onShow(options) {
                            Current.router = Object.assign({
                                params: options === null || options === void 0 ? void 0 : options.query
                            }, options);
                            if (appInstance != null && isFunction(appInstance.$options.onShow)) {
                                appInstance.$options.onShow.call(appInstance, options);
                            }
                        }
                    }, {
                        key: \\"onHide\\",
                        value: function onHide(options) {
                            if (appInstance != null && isFunction(appInstance.$options.onHide)) {
                                appInstance.$options.onHide.call(appInstance, options);
                            }
                        }
                    }, {
                        key: \\"mount\\",
                        value: function mount(component, id, cb) {
                            var page = connectVuePage(Vue, id)(component);
                            wrapper.mount(page, id, cb);
                        }
                    }, {
                        key: \\"unmount\\",
                        value: function unmount(id, cb) {
                            wrapper.unmount(id, cb);
                        }
                    } ]);
                    return AppConfig;
                }();
                Current.app = new AppConfig;
                return Current.app;
            }
            var taroHooks = function taroHooks(lifecycle) {
                return function(fn) {
                    var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                    var id = R.useContext(PageContext);
                    R.useLayoutEffect((function() {
                        var inst = getPageInstance(id);
                        var first = false;
                        if (inst == null) {
                            first = true;
                            inst = Object.create(null);
                        }
                        if (lifecycle !== \\"onShareAppMessage\\") {
                            inst[lifecycle] = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(inst[lifecycle] || []), [ fn.bind(null) ]);
                        } else {
                            inst[lifecycle] = fn.bind(null);
                        }
                        if (first) {
                            injectPageInstance(inst, id);
                        }
                    }), deps);
                };
            };
            var useDidShow = taroHooks(\\"componentDidShow\\");
            var useDidHide = taroHooks(\\"componentDidHide\\");
            var usePullDownRefresh = taroHooks(\\"onPullDownRefresh\\");
            var useReachBottom = taroHooks(\\"onReachBottom\\");
            var usePageScroll = taroHooks(\\"onPageScroll\\");
            var useResize = taroHooks(\\"onResize\\");
            var useShareAppMessage = taroHooks(\\"onShareAppMessage\\");
            var useTabItemTap = taroHooks(\\"onTabItemTap\\");
            var useTitleClick = taroHooks(\\"onTitleClick\\");
            var useOptionMenuClick = taroHooks(\\"onOptionMenuClick\\");
            var usePullIntercept = taroHooks(\\"onPullIntercept\\");
            var useReady = taroHooks(\\"onReady\\");
            var useRouter = function useRouter() {
                var dynamic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                return dynamic ? Current.router : R.useMemo((function() {
                    return Current.router;
                }), []);
            };
            var useScope = function useScope() {
                return undefined;
            };
            function removeLeadingSlash(path) {
                if (path == null) {
                    return \\"\\";
                }
                return path.charAt(0) === \\"/\\" ? path.slice(1) : path;
            }
            var nextTick = function nextTick(cb, ctx) {
                var router = Current.router;
                var timerFunc = function timerFunc() {
                    setTimeout((function() {
                        ctx ? cb.call(ctx) : cb();
                    }), 1);
                };
                if (!isBrowser && router !== null) {
                    var pageElement = null;
                    var path = getPath(removeLeadingSlash(router.path), router.params);
                    pageElement = document$1.getElementById(path);
                    if (pageElement !== null) {
                        pageElement.enqueueUpdateCallbak(cb, ctx);
                    } else {
                        timerFunc();
                    }
                } else {
                    timerFunc();
                }
            };
        }).call(this, __webpack_require__(2)[\\"document\\"], __webpack_require__(2)[\\"window\\"], __webpack_require__(2)[\\"requestAnimationFrame\\"], __webpack_require__(2)[\\"cancelAnimationFrame\\"]);
    }
} ]);

/** filePath: dist/vendors.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 2 ], [ function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _classCallCheck;
    }));
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError(\\"Cannot call a class as a function\\");
        }
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _createClass;
    }));
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if (\\"value\\" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
}, , function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _getPrototypeOf;
    }));
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _typeof;
    }));
    function _typeof(obj) {
        \\"@babel/helpers - typeof\\";
        if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj;
            };
        }
        return _typeof(obj);
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _possibleConstructorReturn;
    }));
    var _helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
    var _assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
    function _possibleConstructorReturn(self, call) {
        if (call && (Object(_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(call) === \\"object\\" || typeof call === \\"function\\")) {
            return call;
        }
        return Object(_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\\"a\\"])(self);
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _inherits;
    }));
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== \\"function\\" && superClass !== null) {
            throw new TypeError(\\"Super expression must either be null or a function\\");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _defineProperty;
    }));
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _arrayLikeToArray;
    }));
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _assertThisInitialized;
    }));
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError(\\"this hasn't been initialised - super() hasn't been called\\");
        }
        return self;
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _unsupportedIterableToArray;
    }));
    var _arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
    function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === \\"string\\") return Object(_arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === \\"Object\\" && o.constructor) n = o.constructor.name;
        if (n === \\"Map\\" || n === \\"Set\\") return Array.from(o);
        if (n === \\"Arguments\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Object(_arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__[\\"a\\"])(o, minLen);
    }
}, , , function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _slicedToArray;
    }));
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }
    function _iterableToArrayLimit(arr, i) {
        if (typeof Symbol === \\"undefined\\" || !(Symbol.iterator in Object(arr))) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i[\\"return\\"] != null) _i[\\"return\\"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    var unsupportedIterableToArray = __webpack_require__(10);
    function _nonIterableRest() {
        throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\");
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || Object(unsupportedIterableToArray[\\"a\\"])(arr, i) || _nonIterableRest();
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _toConsumableArray;
    }));
    var arrayLikeToArray = __webpack_require__(8);
    function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return Object(arrayLikeToArray[\\"a\\"])(arr);
    }
    function _iterableToArray(iter) {
        if (typeof Symbol !== \\"undefined\\" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    var unsupportedIterableToArray = __webpack_require__(10);
    function _nonIterableSpread() {
        throw new TypeError(\\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\");
    }
    function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || Object(unsupportedIterableToArray[\\"a\\"])(arr) || _nonIterableSpread();
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _set;
    }));
    var getPrototypeOf = __webpack_require__(3);
    function _superPropBase(object, property) {
        while (!Object.prototype.hasOwnProperty.call(object, property)) {
            object = Object(getPrototypeOf[\\"a\\"])(object);
            if (object === null) break;
        }
        return object;
    }
    var defineProperty = __webpack_require__(7);
    function set_set(target, property, value, receiver) {
        if (typeof Reflect !== \\"undefined\\" && Reflect.set) {
            set_set = Reflect.set;
        } else {
            set_set = function set(target, property, value, receiver) {
                var base = _superPropBase(target, property);
                var desc;
                if (base) {
                    desc = Object.getOwnPropertyDescriptor(base, property);
                    if (desc.set) {
                        desc.set.call(receiver, value);
                        return true;
                    } else if (!desc.writable) {
                        return false;
                    }
                }
                desc = Object.getOwnPropertyDescriptor(receiver, property);
                if (desc) {
                    if (!desc.writable) {
                        return false;
                    }
                    desc.value = value;
                    Object.defineProperty(receiver, property, desc);
                } else {
                    Object(defineProperty[\\"a\\"])(receiver, property, value);
                }
                return true;
            };
        }
        return set_set(target, property, value, receiver);
    }
    function _set(target, property, value, receiver, isStrict) {
        var s = set_set(target, property, value, receiver || target);
        if (!s && isStrict) {
            throw new Error(\\"failed to set property\\");
        }
        return value;
    }
} ] ]);
"
`;
