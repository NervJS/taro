// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`wx-hybrid should compatible with weapp native pages and components 1`] = `26`;

exports[`wx-hybrid should compatible with weapp native pages and components 2`] = `
"
/** filePath: dist/app.js **/
require(\\"./runtime\\");

require(\\"./common\\");

require(\\"./vendors\\");

require(\\"./taro\\");

(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 4 ], {
    14: function(module, exports, __webpack_require__) {},
    24: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var mocks_taro = __webpack_require__(1);
        const needPromiseApis = new Set([ \\"authPrivateMessage\\", \\"disableAlertBeforeUnload\\", \\"enableAlertBeforeUnload\\", \\"getBackgroundFetchData\\", \\"getGroupEnterInfo\\", \\"getShareInfo\\", \\"getWeRunData\\", \\"join1v1Chat\\", \\"openVideoEditor\\", \\"saveFileToDisk\\", \\"scanItem\\", \\"setEnable1v1Chat\\", \\"setWindowSize\\", \\"sendBizRedPacket\\", \\"startFacialRecognitionVerify\\", \\"openCustomerServiceChat\\", \\"getLocalIPAddress\\", \\"getUserProfile\\" ]);
        function initNativeApi(taro) {
            Object(mocks_taro[\\"h\\"])(taro, wx, {
                needPromiseApis: needPromiseApis,
                modifyApis(apis) {
                    apis.delete(\\"lanDebug\\");
                }
            });
            taro.cloud = wx.cloud;
            taro.getTabBar = function(pageCtx) {
                var _a;
                if (typeof (pageCtx === null || pageCtx === void 0 ? void 0 : pageCtx.getTabBar) === \\"function\\") {
                    return (_a = pageCtx.getTabBar()) === null || _a === void 0 ? void 0 : _a.$taroInstances;
                }
            };
        }
        const _true = \\"true\\";
        const _false = \\"false\\";
        const _empty = \\"\\";
        const _zero = \\"0\\";
        const components = {
            Progress: {
                \\"border-radius\\": _zero,
                \\"font-size\\": \\"16\\",
                duration: \\"30\\",
                bindActiveEnd: _empty
            },
            RichText: {
                space: _empty
            },
            Text: {
                \\"user-select\\": _false
            },
            Map: {
                polygons: \\"[]\\",
                subkey: _empty,
                rotate: _zero,
                skew: _zero,
                \\"max-scale\\": \\"20\\",
                \\"min-scale\\": \\"3\\",
                \\"enable-3D\\": _false,
                \\"show-compass\\": _false,
                \\"show-scale\\": _false,
                \\"enable-overlooking\\": _false,
                \\"enable-zoom\\": _true,
                \\"enable-scroll\\": _true,
                \\"enable-rotate\\": _false,
                \\"enable-satellite\\": _false,
                \\"enable-traffic\\": _false,
                setting: \\"[]\\",
                bindLabelTap: _empty,
                bindRegionChange: _empty,
                bindPoiTap: _empty
            },
            Button: {
                lang: \\"en\\",
                \\"session-from\\": _empty,
                \\"send-message-title\\": _empty,
                \\"send-message-path\\": _empty,
                \\"send-message-img\\": _empty,
                \\"app-parameter\\": _empty,
                \\"show-message-card\\": _false,
                \\"business-id\\": _empty,
                bindGetUserInfo: _empty,
                bindContact: _empty,
                bindGetPhoneNumber: _empty,
                bindError: _empty,
                bindOpenSetting: _empty,
                bindLaunchApp: _empty
            },
            Form: {
                \\"report-submit-timeout\\": _zero
            },
            Input: {
                \\"always-embed\\": _false,
                \\"adjust-position\\": _true,
                \\"hold-keyboard\\": _false,
                bindKeyboardHeightChange: _empty
            },
            Picker: {
                \\"header-text\\": _empty
            },
            PickerView: {
                \\"immediate-change\\": _false,
                bindPickStart: _empty,
                bindPickEnd: _empty
            },
            Slider: {
                color: \\"'#e9e9e9'\\",
                \\"selected-color\\": \\"'#1aad19'\\"
            },
            Textarea: {
                \\"show-confirm-bar\\": _true,
                \\"adjust-position\\": _true,
                \\"hold-keyboard\\": _false,
                \\"disable-default-padding\\": _false,
                \\"confirm-type\\": \\"'return'\\",
                \\"confirm-hold\\": _false,
                bindKeyboardHeightChange: _empty
            },
            ScrollView: {
                \\"enable-flex\\": _false,
                \\"scroll-anchoring\\": _false,
                \\"refresher-enabled\\": _false,
                \\"refresher-threshold\\": \\"45\\",
                \\"refresher-default-style\\": \\"'black'\\",
                \\"refresher-background\\": \\"'#FFF'\\",
                \\"refresher-triggered\\": _false,
                enhanced: _false,
                bounces: _true,
                \\"show-scrollbar\\": _true,
                \\"paging-enabled\\": _false,
                \\"fast-deceleration\\": _false,
                bindDragStart: _empty,
                bindDragging: _empty,
                bindDragEnd: _empty,
                bindRefresherPulling: _empty,
                bindRefresherRefresh: _empty,
                bindRefresherRestore: _empty,
                bindRefresherAbort: _empty
            },
            Swiper: {
                \\"snap-to-edge\\": _false,
                \\"easing-function\\": \\"'default'\\"
            },
            SwiperItem: {
                \\"skip-hidden-item-layout\\": _false
            },
            Navigator: {
                target: \\"'self'\\",
                \\"app-id\\": _empty,
                path: _empty,
                \\"extra-data\\": _empty,
                version: \\"'version'\\"
            },
            Camera: {
                mode: \\"'normal'\\",
                resolution: \\"'medium'\\",
                \\"frame-size\\": \\"'medium'\\",
                bindInitDone: _empty,
                bindScanCode: _empty
            },
            Image: {
                webp: _false,
                \\"show-menu-by-longpress\\": _false
            },
            LivePlayer: {
                mode: \\"'live'\\",
                \\"sound-mode\\": \\"'speaker'\\",
                \\"auto-pause-if-navigate\\": _true,
                \\"auto-pause-if-open-native\\": _true,
                \\"picture-in-picture-mode\\": \\"[]\\",
                bindstatechange: _empty,
                bindfullscreenchange: _empty,
                bindnetstatus: _empty,
                bindAudioVolumeNotify: _empty,
                bindEnterPictureInPicture: _empty,
                bindLeavePictureInPicture: _empty
            },
            Video: {
                title: _empty,
                \\"play-btn-position\\": \\"'bottom'\\",
                \\"enable-play-gesture\\": _false,
                \\"auto-pause-if-navigate\\": _true,
                \\"auto-pause-if-open-native\\": _true,
                \\"vslide-gesture\\": _false,
                \\"vslide-gesture-in-fullscreen\\": _true,
                \\"ad-unit-id\\": _empty,
                \\"poster-for-crawler\\": _empty,
                \\"show-casting-button\\": _false,
                \\"picture-in-picture-mode\\": \\"[]\\",
                \\"enable-auto-rotation\\": _false,
                \\"show-screen-lock-button\\": _false,
                \\"show-snapshot-button\\": _false,
                \\"show-background-playback-button\\": _false,
                \\"background-poster\\": _empty,
                bindProgress: _empty,
                bindLoadedMetadata: _empty,
                bindControlsToggle: _empty,
                bindEnterPictureInPicture: _empty,
                bindLeavePictureInPicture: _empty,
                bindSeekComplete: _empty,
                bindAdLoad: _empty,
                bindAdError: _empty,
                bindAdClose: _empty,
                bindAdPlay: _empty
            },
            Canvas: {
                type: _empty
            },
            Ad: {
                \\"ad-type\\": \\"'banner'\\",
                \\"ad-theme\\": \\"'white'\\"
            },
            CoverView: {
                \\"marker-id\\": _empty,
                slot: _empty
            },
            Editor: {
                \\"read-only\\": _false,
                placeholder: _empty,
                \\"show-img-size\\": _false,
                \\"show-img-toolbar\\": _false,
                \\"show-img-resize\\": _false,
                focus: _false,
                bindReady: _empty,
                bindFocus: _empty,
                bindBlur: _empty,
                bindInput: _empty,
                bindStatusChange: _empty,
                name: _empty
            },
            MatchMedia: {
                \\"min-width\\": _empty,
                \\"max-width\\": _empty,
                width: _empty,
                \\"min-height\\": _empty,
                \\"max-height\\": _empty,
                height: _empty,
                orientation: _empty
            },
            FunctionalPageNavigator: {
                version: \\"'release'\\",
                name: _empty,
                args: _empty,
                bindSuccess: _empty,
                bindFail: _empty,
                bindCancel: _empty
            },
            LivePusher: {
                url: _empty,
                mode: \\"'RTC'\\",
                autopush: _false,
                muted: _false,
                \\"enable-camera\\": _true,
                \\"auto-focus\\": _true,
                orientation: \\"'vertical'\\",
                beauty: _zero,
                whiteness: _zero,
                aspect: \\"'9:16'\\",
                \\"min-bitrate\\": \\"200\\",
                \\"max-bitrate\\": \\"1000\\",
                \\"audio-quality\\": \\"'high'\\",
                \\"waiting-image\\": _empty,
                \\"waiting-image-hash\\": _empty,
                zoom: _false,
                \\"device-position\\": \\"'front'\\",
                \\"background-mute\\": _false,
                mirror: _false,
                \\"remote-mirror\\": _false,
                \\"local-mirror\\": _false,
                \\"audio-reverb-type\\": _zero,
                \\"enable-mic\\": _true,
                \\"enable-agc\\": _false,
                \\"enable-ans\\": _false,
                \\"audio-volume-type\\": \\"'voicecall'\\",
                \\"video-width\\": \\"360\\",
                \\"video-height\\": \\"640\\",
                \\"beauty-style\\": \\"'smooth'\\",
                filter: \\"'standard'\\",
                animation: _empty,
                bindStateChange: _empty,
                bindNetStatus: _empty,
                bindBgmStart: _empty,
                bindBgmProgress: _empty,
                bindBgmComplete: _empty,
                bindAudioVolumeNotify: _empty
            },
            OfficialAccount: {
                bindLoad: _empty,
                bindError: _empty
            },
            OpenData: {
                type: _empty,
                \\"open-gid\\": _empty,
                lang: \\"'en'\\",
                \\"default-text\\": _empty,
                \\"default-avatar\\": _empty,
                bindError: _empty
            },
            NavigationBar: {
                title: _empty,
                loading: _false,
                \\"front-color\\": _empty,
                \\"background-color\\": _empty,
                \\"color-animation-duration\\": _zero,
                \\"color-animation-timing-func\\": \\"'linear'\\"
            },
            PageMeta: {
                \\"background-text-style\\": _empty,
                \\"background-color\\": _empty,
                \\"background-color-top\\": _empty,
                \\"background-color-bottom\\": _empty,
                \\"scroll-top\\": \\"''\\",
                \\"scroll-duration\\": \\"300\\",
                \\"page-style\\": \\"''\\",
                \\"root-font-size\\": \\"''\\",
                bindResize: _empty,
                bindScroll: _empty,
                bindScrollDone: _empty
            },
            VoipRoom: {
                openid: _empty,
                mode: \\"'camera'\\",
                \\"device-position\\": \\"'front'\\",
                bindError: _empty
            },
            AdCustom: {
                \\"unit-id\\": _empty,
                \\"ad-intervals\\": _empty,
                bindLoad: _empty,
                bindError: _empty
            },
            PageContainer: {
                show: _false,
                duration: \\"300\\",
                \\"z-index\\": \\"100\\",
                overlay: _true,
                position: \\"'bottom'\\",
                round: _false,
                \\"close-on-slideDown\\": _false,
                \\"overlay-style\\": _empty,
                \\"custom-style\\": _empty,
                bindBeforeEnter: _empty,
                bindEnter: _empty,
                bindAfterEnter: _empty,
                bindBeforeLeave: _empty,
                bindLeave: _empty,
                bindAfterLeave: _empty,
                bindClickOverlay: _empty
            },
            KeyboardAccessory: {}
        };
        const hostConfig = {
            initNativeApi: initNativeApi
        };
        Object(mocks_taro[\\"g\\"])(hostConfig);
        Object(mocks_taro[\\"f\\"])(components);
        var taro_runtime = __webpack_require__(0);
        const HOOKS_APP_ID = \\"taro-app\\";
        function isClassComponent(R, component) {
            var _a;
            const prototype = component.prototype;
            if ((_a = component.displayName) === null || _a === void 0 ? void 0 : _a.includes(\\"Connect\\")) return false;
            return Object(mocks_taro[\\"e\\"])(component.render) || !!(prototype === null || prototype === void 0 ? void 0 : prototype.isReactComponent) || prototype instanceof R.Component;
        }
        function ensureIsArray(item) {
            if (Object(mocks_taro[\\"d\\"])(item)) {
                return item;
            } else {
                return item ? [ item ] : [];
            }
        }
        function setDefaultDescriptor(obj) {
            obj.writable = true;
            obj.enumerable = true;
            return obj;
        }
        function setRouterParams(options) {
            taro_runtime[\\"Current\\"].router = Object.assign({
                params: options === null || options === void 0 ? void 0 : options.query
            }, options);
        }
        let PageContext = mocks_taro[\\"a\\"];
        let R$1 = mocks_taro[\\"a\\"];
        let h$1;
        let ReactDOM$1;
        const pageKeyId = Object(taro_runtime[\\"incrementId\\"])();
        const hooks$1 = taro_runtime[\\"container\\"].get(taro_runtime[\\"SERVICE_IDENTIFIER\\"].Hooks);
        function setReconciler(ReactDOM) {
            var _a;
            hooks$1.getLifecycle = function(instance, lifecycle) {
                lifecycle = lifecycle.replace(/^on(Show|Hide)$/, \\"componentDid$1\\");
                return instance[lifecycle];
            };
            (_a = hooks$1.modifyMpEventImpls) === null || _a === void 0 ? void 0 : _a.push((function(event) {
                event.type = event.type.replace(/-/g, \\"\\");
            }));
            hooks$1.batchedEventUpdates = function(cb) {
                ReactDOM.unstable_batchedUpdates(cb);
            };
            hooks$1.mergePageInstance = function(prev, next) {
                if (!prev || !next) return;
                if (\\"constructor\\" in prev) return;
                Object.keys(prev).forEach(item => {
                    const prevList = prev[item];
                    const nextList = ensureIsArray(next[item]);
                    next[item] = nextList.concat(prevList);
                });
            };
            if (false) {}
        }
        function connectReactPage(R, id) {
            return Page => {
                const isReactComponent = isClassComponent(R, Page);
                const inject = node => node && Object(taro_runtime[\\"injectPageInstance\\"])(node, id);
                const refs = isReactComponent ? {
                    ref: inject
                } : {
                    forwardedRef: inject,
                    reactReduxForwardedRef: inject
                };
                if (PageContext === mocks_taro[\\"a\\"]) {
                    PageContext = R.createContext(\\"\\");
                }
                return class PageWrapper extends R.Component {
                    constructor() {
                        super(...arguments);
                        this.state = {
                            hasError: false
                        };
                    }
                    static getDerivedStateFromError(error) {
                        false && false;
                        return {
                            hasError: true
                        };
                    }
                    componentDidCatch(error, info) {
                        if (false) {}
                    }
                    render() {
                        const children = this.state.hasError ? [] : h$1(PageContext.Provider, {
                            value: id
                        }, h$1(Page, Object.assign(Object.assign({}, this.props), refs)));
                        if (false) {} else {
                            return h$1(\\"root\\", {
                                id: id
                            }, children);
                        }
                    }
                };
            };
        }
        function createReactApp(App, react, dom, config) {
            var _a;
            if (false) {}
            R$1 = react;
            h$1 = react.createElement;
            ReactDOM$1 = dom;
            const appInstanceRef = react.createRef();
            const isReactComponent = isClassComponent(R$1, App);
            let appWrapper;
            setReconciler(ReactDOM$1);
            function getAppInstance() {
                return appInstanceRef.current;
            }
            class AppWrapper extends R$1.Component {
                constructor() {
                    super(...arguments);
                    this.pages = [];
                    this.elements = [];
                }
                mount(pageComponent, id, cb) {
                    const pageWrapper = connectReactPage(R$1, id)(pageComponent);
                    const key = id + pageKeyId();
                    const page = () => h$1(pageWrapper, {
                        key: key,
                        tid: id
                    });
                    this.pages.push(page);
                    this.forceUpdate(cb);
                }
                unmount(id, cb) {
                    const elements = this.elements;
                    const idx = elements.findIndex(item => item.props.tid === id);
                    elements.splice(idx, 1);
                    this.forceUpdate(cb);
                }
                render() {
                    const {pages: pages, elements: elements} = this;
                    while (pages.length > 0) {
                        const page = pages.pop();
                        elements.push(page());
                    }
                    let props = null;
                    if (isReactComponent) {
                        props = {
                            ref: appInstanceRef
                        };
                    }
                    return h$1(App, props, false ? undefined : elements.slice());
                }
            }
            if (true) {
                appWrapper = (_a = ReactDOM$1.render) === null || _a === void 0 ? void 0 : _a.call(ReactDOM$1, h$1(AppWrapper), taro_runtime[\\"document\\"].getElementById(\\"app\\"));
            }
            const [ONLAUNCH, ONSHOW, ONHIDE] = hooks$1.getMiniLifecycleImpl().app;
            const appObj = Object.create({
                render(cb) {
                    appWrapper.forceUpdate(cb);
                },
                mount(component, id, cb) {
                    appWrapper.mount(component, id, cb);
                },
                unmount(id, cb) {
                    appWrapper.unmount(id, cb);
                }
            }, {
                config: setDefaultDescriptor({
                    configurable: true,
                    value: config
                }),
                [ONLAUNCH]: setDefaultDescriptor({
                    value(options) {
                        var _a, _b;
                        setRouterParams(options);
                        if (false) {}
                        const app = getAppInstance();
                        this.$app = app;
                        if (app) {
                            if (app.taroGlobalData) {
                                const globalData = app.taroGlobalData;
                                const keys = Object.keys(globalData);
                                const descriptors = Object.getOwnPropertyDescriptors(globalData);
                                keys.forEach(key => {
                                    Object.defineProperty(this, key, {
                                        configurable: true,
                                        enumerable: true,
                                        get() {
                                            return globalData[key];
                                        },
                                        set(value) {
                                            globalData[key] = value;
                                        }
                                    });
                                });
                                Object.defineProperties(this, descriptors);
                            }
                            (_b = app.onLaunch) === null || _b === void 0 ? void 0 : _b.call(app, options);
                        }
                    }
                }),
                [ONSHOW]: setDefaultDescriptor({
                    value(options) {
                        var _a;
                        setRouterParams(options);
                        const app = getAppInstance();
                        (_a = app === null || app === void 0 ? void 0 : app.componentDidShow) === null || _a === void 0 ? void 0 : _a.call(app, options);
                        triggerAppHook(\\"onShow\\", options);
                    }
                }),
                [ONHIDE]: setDefaultDescriptor({
                    value() {
                        var _a;
                        const app = getAppInstance();
                        (_a = app === null || app === void 0 ? void 0 : app.componentDidHide) === null || _a === void 0 ? void 0 : _a.call(app);
                        triggerAppHook(\\"onHide\\");
                    }
                }),
                onPageNotFound: setDefaultDescriptor({
                    value(res) {
                        var _a;
                        const app = getAppInstance();
                        (_a = app === null || app === void 0 ? void 0 : app.onPageNotFound) === null || _a === void 0 ? void 0 : _a.call(app, res);
                    }
                })
            });
            function triggerAppHook(lifecycle, ...option) {
                const instance = Object(taro_runtime[\\"getPageInstance\\"])(HOOKS_APP_ID);
                if (instance) {
                    const app = getAppInstance();
                    const func = hooks$1.getLifecycle(instance, lifecycle);
                    if (Array.isArray(func)) {
                        func.forEach(cb => cb.apply(app, option));
                    }
                }
            }
            taro_runtime[\\"Current\\"].app = appObj;
            return appObj;
        }
        const taroHooks = lifecycle => fn => {
            const id = R$1.useContext(PageContext) || HOOKS_APP_ID;
            const fnRef = R$1.useRef(fn);
            if (fnRef.current !== fn) fnRef.current = fn;
            R$1.useLayoutEffect(() => {
                let inst = Object(taro_runtime[\\"getPageInstance\\"])(id);
                let first = false;
                if (inst == null) {
                    first = true;
                    inst = Object.create(null);
                }
                inst = inst;
                const callback = (...args) => fnRef.current(...args);
                if (Object(mocks_taro[\\"e\\"])(inst[lifecycle])) {
                    inst[lifecycle] = [ inst[lifecycle], callback ];
                } else {
                    inst[lifecycle] = [ ...inst[lifecycle] || [], callback ];
                }
                if (first) {
                    Object(taro_runtime[\\"injectPageInstance\\"])(inst, id);
                }
                return () => {
                    const inst = Object(taro_runtime[\\"getPageInstance\\"])(id);
                    const list = inst[lifecycle];
                    if (list === callback) {
                        inst[lifecycle] = undefined;
                    } else if (Object(mocks_taro[\\"d\\"])(list)) {
                        inst[lifecycle] = list.filter(item => item !== callback);
                    }
                };
            }, []);
        };
        const useDidShow = taroHooks(\\"componentDidShow\\");
        const useDidHide = taroHooks(\\"componentDidHide\\");
        const usePullDownRefresh = taroHooks(\\"onPullDownRefresh\\");
        const useReachBottom = taroHooks(\\"onReachBottom\\");
        const usePageScroll = taroHooks(\\"onPageScroll\\");
        const useResize = taroHooks(\\"onResize\\");
        const useShareAppMessage = taroHooks(\\"onShareAppMessage\\");
        const useTabItemTap = taroHooks(\\"onTabItemTap\\");
        const useTitleClick = taroHooks(\\"onTitleClick\\");
        const useOptionMenuClick = taroHooks(\\"onOptionMenuClick\\");
        const usePullIntercept = taroHooks(\\"onPullIntercept\\");
        const useShareTimeline = taroHooks(\\"onShareTimeline\\");
        const useAddToFavorites = taroHooks(\\"onAddToFavorites\\");
        const useReady = taroHooks(\\"onReady\\");
        const useRouter = (dynamic = false) => dynamic ? taro_runtime[\\"Current\\"].router : R$1.useMemo(() => taro_runtime[\\"Current\\"].router, []);
        const useScope = () => undefined;
        var taroHooks$1 = Object.freeze({
            __proto__: null,
            useDidShow: useDidShow,
            useDidHide: useDidHide,
            usePullDownRefresh: usePullDownRefresh,
            useReachBottom: useReachBottom,
            usePageScroll: usePageScroll,
            useResize: useResize,
            useShareAppMessage: useShareAppMessage,
            useTabItemTap: useTabItemTap,
            useTitleClick: useTitleClick,
            useOptionMenuClick: useOptionMenuClick,
            usePullIntercept: usePullIntercept,
            useShareTimeline: useShareTimeline,
            useAddToFavorites: useAddToFavorites,
            useReady: useReady,
            useRouter: useRouter,
            useScope: useScope
        });
        const getNativeCompId = Object(taro_runtime[\\"incrementId\\"])();
        let runtime_R;
        let h;
        let runtime_ReactDOM;
        function initNativeComponentEntry(R, ReactDOM) {
            class NativeComponentWrapper extends R.Component {
                constructor() {
                    super(...arguments);
                    this.root = R.createRef();
                    this.ctx = this.props.getCtx();
                }
                componentDidMount() {
                    this.ctx.component = this;
                    const rootElement = this.root.current;
                    rootElement.ctx = this.ctx;
                    rootElement.performUpdate(true);
                }
                render() {
                    return h(\\"root\\", {
                        ref: this.root
                    }, this.props.renderComponent(this.ctx));
                }
            }
            class Entry extends R.Component {
                constructor() {
                    super(...arguments);
                    this.state = {
                        components: []
                    };
                }
                componentDidMount() {
                    taro_runtime[\\"Current\\"].app = this;
                }
                mount(Component, compId, getCtx) {
                    const isReactComponent = isClassComponent(R, Component);
                    const inject = node => node && Object(taro_runtime[\\"injectPageInstance\\"])(node, compId);
                    const refs = isReactComponent ? {
                        ref: inject
                    } : {
                        forwardedRef: inject,
                        reactReduxForwardedRef: inject
                    };
                    const item = {
                        compId: compId,
                        element: h(NativeComponentWrapper, {
                            key: compId,
                            getCtx: getCtx,
                            renderComponent(ctx) {
                                return h(Component, Object.assign(Object.assign(Object.assign({}, (ctx.data || (ctx.data = {})).props), refs), {
                                    $scope: ctx
                                }));
                            }
                        })
                    };
                    this.setState({
                        components: [ ...this.state.components, item ]
                    });
                }
                unmount(compId) {
                    const components = this.state.components;
                    const index = components.findIndex(item => item.compId === compId);
                    const next = [ ...components.slice(0, index), ...components.slice(index + 1) ];
                    this.setState({
                        components: next
                    });
                }
                render() {
                    const components = this.state.components;
                    return components.map(({element: element}) => element);
                }
            }
            setReconciler(ReactDOM);
            const app = taro_runtime[\\"document\\"].getElementById(\\"app\\");
            ReactDOM.render(h(Entry, {}), app);
        }
        function createNativeComponentConfig(Component, react, reactdom, componentConfig) {
            var _a, _b;
            runtime_R = react;
            h = react.createElement;
            runtime_ReactDOM = reactdom;
            setReconciler(runtime_ReactDOM);
            const componentObj = {
                options: componentConfig,
                properties: {
                    props: {
                        type: null,
                        value: null,
                        observer(_newVal, oldVal) {
                            oldVal && this.component.forceUpdate();
                        }
                    }
                },
                created() {
                    if (!taro_runtime[\\"Current\\"].app) {
                        initNativeComponentEntry(runtime_R, runtime_ReactDOM);
                    }
                },
                attached() {
                    setCurrent();
                    this.compId = getNativeCompId();
                    this.config = componentConfig;
                    taro_runtime[\\"Current\\"].app.mount(Component, this.compId, () => this);
                },
                ready() {
                    Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onReady\\");
                },
                detached() {
                    taro_runtime[\\"Current\\"].app.unmount(this.compId);
                },
                pageLifetimes: {
                    show(options) {
                        Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onShow\\", options);
                    },
                    hide() {
                        Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onHide\\");
                    }
                },
                methods: {
                    eh: taro_runtime[\\"eventHandler\\"]
                }
            };
            function setCurrent() {
                const pages = getCurrentPages();
                const currentPage = pages[pages.length - 1];
                if (taro_runtime[\\"Current\\"].page === currentPage) return;
                taro_runtime[\\"Current\\"].page = currentPage;
                const route = currentPage.route || currentPage.__route__;
                const router = {
                    params: currentPage.options || {},
                    path: Object(taro_runtime[\\"addLeadingSlash\\"])(route),
                    onReady: \\"\\",
                    onHide: \\"\\",
                    onShow: \\"\\"
                };
                taro_runtime[\\"Current\\"].router = router;
                if (!currentPage.options) {
                    Object.defineProperty(currentPage, \\"options\\", {
                        enumerable: true,
                        configurable: true,
                        get() {
                            return this._optionsValue;
                        },
                        set(value) {
                            router.params = value;
                            this._optionsValue = value;
                        }
                    });
                }
            }
            if (Component.onShareAppMessage || ((_a = Component.prototype) === null || _a === void 0 ? void 0 : _a.onShareAppMessage) || Component.enableShareAppMessage) {
                componentObj.methods.onShareAppMessage = function(options) {
                    const target = options === null || options === void 0 ? void 0 : options.target;
                    if (target) {
                        const id = target.id;
                        const element = taro_runtime[\\"document\\"].getElementById(id);
                        if (element) {
                            target.dataset = element.dataset;
                        }
                    }
                    return Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onShareAppMessage\\", options);
                };
            }
            if (Component.onShareTimeline || ((_b = Component.prototype) === null || _b === void 0 ? void 0 : _b.onShareTimeline) || Component.enableShareTimeline) {
                componentObj.methods.onShareTimeline = function() {
                    return Object(taro_runtime[\\"safeExecute\\"])(this.compId, \\"onShareTimeline\\");
                };
            }
            return componentObj;
        }
        var runtime_a;
        const hooks = taro_runtime[\\"container\\"].get(taro_runtime[\\"SERVICE_IDENTIFIER\\"].Hooks);
        hooks.initNativeApiImpls || (hooks.initNativeApiImpls = []);
        hooks.initNativeApiImpls.push((function(taro) {
            for (const hook in taroHooks$1) {
                taro[hook] = taroHooks$1[hook];
            }
        }));
        if (false) {}
        var classCallCheck = __webpack_require__(4);
        var createClass = __webpack_require__(5);
        var inherits = __webpack_require__(7);
        var createSuper = __webpack_require__(6);
        var mocks_react = __webpack_require__(2);
        var src_app = __webpack_require__(14);
        var app_App = function(_React$Component) {
            Object(inherits[\\"a\\"])(App, _React$Component);
            var _super = Object(createSuper[\\"a\\"])(App);
            function App() {
                Object(classCallCheck[\\"a\\"])(this, App);
                return _super.apply(this, arguments);
            }
            Object(createClass[\\"a\\"])(App, [ {
                key: \\"componentDidMount\\",
                value: function componentDidMount() {}
            }, {
                key: \\"componentDidShow\\",
                value: function componentDidShow() {}
            }, {
                key: \\"componentDidHide\\",
                value: function componentDidHide() {}
            }, {
                key: \\"componentCatchError\\",
                value: function componentCatchError() {}
            }, {
                key: \\"render\\",
                value: function render() {
                    return this.props.children;
                }
            } ]);
            return App;
        }(mocks_react[\\"default\\"].Component);
        var lib_src_app = app_App;
        var taro_react = __webpack_require__(9);
        var app_config = {
            pages: [ \\"pages/index/index\\", \\"pages/native/native\\" ],
            window: {
                backgroundTextStyle: \\"light\\",
                navigationBarBackgroundColor: \\"#fff\\",
                navigationBarTitleText: \\"WeChat\\",
                navigationBarTextStyle: \\"black\\"
            }
        };
        taro_runtime[\\"window\\"].__taroAppConfig = app_config;
        var app_inst = App(createReactApp(lib_src_app, mocks_react, taro_react[\\"a\\"], app_config));
        Object(mocks_taro[\\"initPxTransform\\"])({
            designWidth: 750,
            deviceRatio: {
                640: 1.17,
                750: 1,
                828: .905
            }
        });
    }
}, [ [ 24, 0, 1, 3, 2 ] ] ]);



/** filePath: dist/app.json **/
{\\"pages\\":[\\"pages/index/index\\",\\"pages/native/native\\"],\\"window\\":{\\"backgroundTextStyle\\":\\"light\\",\\"navigationBarBackgroundColor\\":\\"#fff\\",\\"navigationBarTitleText\\":\\"WeChat\\",\\"navigationBarTextStyle\\":\\"black\\"}}

/** filePath: dist/app.wxss **/


/** filePath: dist/base.wxml **/
<wxs module=\\"xs\\" src=\\"./utils.wxs\\" />
<template name=\\"taro_tmpl\\">
  <block wx:for=\\"{{root.cn}}\\" wx:key=\\"sid\\">
    <template is=\\"tmpl_0_container\\" data=\\"{{i:item,l:''}}\\" />
  </block>
</template>

<template name=\\"tmpl_0_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_0_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_0_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_0_button\\">
  <button size=\\"{{xs.b(i.size,'default')}}\\" type=\\"{{i.type}}\\" plain=\\"{{xs.b(i.plain,false)}}\\" disabled=\\"{{i.disabled}}\\" loading=\\"{{xs.b(i.loading,false)}}\\" form-type=\\"{{i.formType}}\\" open-type=\\"{{i.openType}}\\" hover-class=\\"{{xs.b(i.hoverClass,'button-hover')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,20)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,70)}}\\" name=\\"{{i.name}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </button>
</template>

<template name=\\"tmpl_0_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_0_static-image\\">
  <image src=\\"{{i.src}}\\" mode=\\"{{xs.b(i.mode,'scaleToFill')}}\\" lazy-load=\\"{{xs.b(i.lazyLoad,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_0_image\\">
  <image src=\\"{{i.src}}\\" mode=\\"{{xs.b(i.mode,'scaleToFill')}}\\" lazy-load=\\"{{xs.b(i.lazyLoad,false)}}\\" binderror=\\"eh\\" bindload=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </image>
</template>

<template name=\\"tmpl_0_#text\\">
  <block>{{i.v}}</block>
</template>

<template name=\\"tmpl_0_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_0_container\\">
  <template is=\\"{{xs.a(0, i.nn, l)}}\\" data=\\"{{i:i,cid:0,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_1_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_1_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_1_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_1_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_1_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_1_container\\">
  <template is=\\"{{xs.a(1, i.nn, l)}}\\" data=\\"{{i:i,cid:1,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_2_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_2_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_2_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_2_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_2_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_2_container\\">
  <template is=\\"{{xs.a(2, i.nn, l)}}\\" data=\\"{{i:i,cid:2,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_3_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_3_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_3_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_3_scroll-view\\">
  <scroll-view scroll-x=\\"{{xs.b(i.scrollX,false)}}\\" scroll-y=\\"{{xs.b(i.scrollY,false)}}\\" upper-threshold=\\"{{xs.b(i.upperThreshold,50)}}\\" lower-threshold=\\"{{xs.b(i.lowerThreshold,50)}}\\" scroll-top=\\"{{i.scrollTop}}\\" scroll-left=\\"{{i.scrollLeft}}\\" scroll-into-view=\\"{{i.scrollIntoView}}\\" scroll-with-animation=\\"{{xs.b(i.scrollWithAnimation,false)}}\\" enable-back-to-top=\\"{{xs.b(i.enableBackToTop,false)}}\\" bindscrolltoupper=\\"eh\\" bindscrolltolower=\\"eh\\" bindscroll=\\"eh\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </scroll-view>
</template>

<template name=\\"tmpl_3_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_3_container\\">
  <template is=\\"{{xs.a(3, i.nn, l)}}\\" data=\\"{{i:i,cid:3,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_4_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_4_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_4_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_4_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_4_container\\">
  <template is=\\"{{xs.a(4, i.nn, l)}}\\" data=\\"{{i:i,cid:4,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_5_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_5_static-text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_5_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_5_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_5_container\\">
  <template is=\\"{{xs.a(5, i.nn, l)}}\\" data=\\"{{i:i,cid:5,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_6_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_6_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_6_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_6_container\\">
  <template is=\\"{{xs.a(6, i.nn, l)}}\\" data=\\"{{i:i,cid:6,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_7_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_7_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_7_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_7_container\\">
  <template is=\\"{{xs.a(7, i.nn, l)}}\\" data=\\"{{i:i,cid:7,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_8_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_8_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_8_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_8_container\\">
  <template is=\\"{{xs.a(8, i.nn, l)}}\\" data=\\"{{i:i,cid:8,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_9_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_9_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_9_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_9_container\\">
  <template is=\\"{{xs.a(9, i.nn, l)}}\\" data=\\"{{i:i,cid:9,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_10_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_10_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_10_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_10_container\\">
  <template is=\\"{{xs.a(10, i.nn, l)}}\\" data=\\"{{i:i,cid:10,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_11_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_11_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_11_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_11_container\\">
  <template is=\\"{{xs.a(11, i.nn, l)}}\\" data=\\"{{i:i,cid:11,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_12_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_12_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_12_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_12_container\\">
  <template is=\\"{{xs.a(12, i.nn, l)}}\\" data=\\"{{i:i,cid:12,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_13_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_13_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_13_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_13_container\\">
  <template is=\\"{{xs.a(13, i.nn, l)}}\\" data=\\"{{i:i,cid:13,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_14_catch-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\" catchtouchmove=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_static-view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" animation=\\"{{i.animation}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_pure-view\\">
  <view style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_view\\">
  <view hover-class=\\"{{xs.b(i.hoverClass,'none')}}\\" hover-stop-propagation=\\"{{xs.b(i.hoverStopPropagation,false)}}\\" hover-start-time=\\"{{xs.b(i.hoverStartTime,50)}}\\" hover-stay-time=\\"{{xs.b(i.hoverStayTime,400)}}\\" bindtouchstart=\\"eh\\" bindtouchmove=\\"eh\\" bindtouchend=\\"eh\\" bindtouchcancel=\\"eh\\" bindlongpress=\\"eh\\" animation=\\"{{i.animation}}\\" bindanimationstart=\\"eh\\" bindanimationiteration=\\"eh\\" bindanimationend=\\"eh\\" bindtransitionend=\\"eh\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </view>
</template>

<template name=\\"tmpl_14_text\\">
  <text selectable=\\"{{xs.b(i.selectable,false)}}\\" space=\\"{{i.space}}\\" decode=\\"{{xs.b(i.decode,false)}}\\" style=\\"{{i.st}}\\" class=\\"{{i.cl}}\\" bindtap=\\"eh\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </text>
</template>

<template name=\\"tmpl_14_tab\\">
  <tab bindmyevent=\\"eh\\" myProperty=\\"{{i.myProperty}}\\"  id=\\"{{i.uid||i.sid}}\\" data-sid=\\"{{i.sid}}\\">
    <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
      <template is=\\"{{xs.e(cid+1)}}\\" data=\\"{{i:item,l:l}}\\" />
    </block>
  </tab>
</template>
  
<template name=\\"tmpl_14_container\\">
  <template is=\\"{{xs.a(14, i.nn, l)}}\\" data=\\"{{i:i,cid:14,l:xs.f(l,i.nn)}}\\" />
</template>

<template name=\\"tmpl_15_container\\">
  <block wx:if=\\"{{i.nn === '#text'}}\\">
    <template is=\\"tmpl_0_#text\\" data=\\"{{i:i}}\\" />
  </block>
  <block wx:else>
    <comp i=\\"{{i}}\\" l=\\"{{l}}\\" />
  </block>
</template>


/** filePath: dist/common.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 2 ], [ , function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"g\\", (function() {
        return mergeReconciler;
    }));
    __webpack_require__.d(__webpack_exports__, \\"f\\", (function() {
        return mergeInternalComponents;
    }));
    __webpack_require__.d(__webpack_exports__, \\"e\\", (function() {
        return isFunction;
    }));
    __webpack_require__.d(__webpack_exports__, \\"d\\", (function() {
        return isArray;
    }));
    __webpack_require__.d(__webpack_exports__, \\"h\\", (function() {
        return processApis;
    }));
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return EMPTY_OBJ;
    }));
    __webpack_exports__[\\"b\\"] = \\"taro\\";
    function mergeReconciler() {}
    function mergeInternalComponents() {}
    function isFunction() {}
    function isArray() {}
    function processApis() {}
    var EMPTY_OBJ = {};
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.r(__webpack_exports__);
    __webpack_exports__[\\"default\\"] = \\"react-mock\\";
} ] ]);

/** filePath: dist/comp.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 6 ], {
    15: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
        Component(Object(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__[\\"createRecursiveComponentConfig\\"])());
    }
}, [ [ 15, 0, 1 ] ] ]);

/** filePath: dist/comp.json **/
{\\"component\\":true,\\"usingComponents\\":{\\"comp\\":\\"./comp\\",\\"custom-wrapper\\":\\"./custom-wrapper\\"}}

/** filePath: dist/comp.wxml **/
<import src=\\"./base.wxml\\" />
<template is=\\"tmpl_0_container\\" data=\\"{{i:i,l:l}}\\" />

/** filePath: dist/components/tab/tab.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 7 ], {
    22: function(module, exports) {
        Component({
            behaviors: [],
            properties: {
                myProperty: {
                    type: String,
                    value: \\"\\",
                    observer: function observer(newVal, oldVal, changedPath) {}
                },
                myProperty2: String
            },
            data: {},
            attached: function attached() {},
            moved: function moved() {},
            detached: function detached() {},
            methods: {
                onMyButtonTap: function onMyButtonTap() {
                    this.setData({});
                },
                _myPrivateMethod: function _myPrivateMethod() {
                    this.setData({
                        \\"A[0].B\\": \\"myPrivateData\\"
                    });
                },
                _propertyChange: function _propertyChange(newVal, oldVal) {},
                clickHandler: function clickHandler() {
                    console.log(\\"sdsd\\");
                    this.triggerEvent(\\"myevent\\", {
                        f: 1
                    });
                }
            }
        });
    }
}, [ [ 22, 0 ] ] ]);

/** filePath: dist/components/tab/tab.json **/
{\\"component\\":true,\\"usingComponents\\":{}}

/** filePath: dist/components/tab/tab.wxml **/
<view class=\\"tab\\" bindtap=\\"clickHandler\\">
  {{myProperty}}
</view>


/** filePath: dist/custom-wrapper.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 10 ], {
    16: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
        Component(Object(_tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__[\\"createRecursiveComponentConfig\\"])(\\"custom-wrapper\\"));
    }
}, [ [ 16, 0, 1 ] ] ]);

/** filePath: dist/custom-wrapper.json **/
{\\"component\\":true,\\"usingComponents\\":{\\"comp\\":\\"./comp\\",\\"custom-wrapper\\":\\"./custom-wrapper\\"}}

/** filePath: dist/custom-wrapper.wxml **/
<import src=\\"./base.wxml\\" />
  <block wx:for=\\"{{i.cn}}\\" wx:key=\\"sid\\">
    <template is=\\"tmpl_0_container\\" data=\\"{{i:item,l:''}}\\" />
  </block>

/** filePath: dist/pages/index/index.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 11 ], {
    17: function(module, exports, __webpack_require__) {},
    25: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        var taro_runtime = __webpack_require__(0);
        var classCallCheck = __webpack_require__(4);
        var createClass = __webpack_require__(5);
        var inherits = __webpack_require__(7);
        var createSuper = __webpack_require__(6);
        var taro = __webpack_require__(1);
        var react = __webpack_require__(2);
        var taro_components = __webpack_require__(3);
        var index = __webpack_require__(17);
        var index_Index = function(_React$Component) {
            Object(inherits[\\"a\\"])(Index, _React$Component);
            var _super = Object(createSuper[\\"a\\"])(Index);
            function Index() {
                Object(classCallCheck[\\"a\\"])(this, Index);
                return _super.apply(this, arguments);
            }
            Object(createClass[\\"a\\"])(Index, [ {
                key: \\"gotoWxParse\\",
                value: function gotoWxParse() {
                    taro[\\"b\\"].navigateTo({
                        url: \\"/pages/wxParse/wxParse\\"
                    });
                }
            }, {
                key: \\"gotoEcharts\\",
                value: function gotoEcharts() {
                    taro[\\"b\\"].navigateTo({
                        url: \\"/pages/echarts/echarts\\"
                    });
                }
            }, {
                key: \\"gotoNative\\",
                value: function gotoNative() {
                    taro[\\"b\\"].navigateTo({
                        url: \\"/pages/native/native\\"
                    });
                }
            }, {
                key: \\"tabEvent\\",
                value: function tabEvent(e) {
                    console.log(e);
                }
            }, {
                key: \\"render\\",
                value: function render() {
                    return react[\\"default\\"].createElement(taro_components[\\"View\\"], {
                        className: \\"index\\"
                    }, react[\\"default\\"].createElement(taro_components[\\"View\\"], {
                        className: \\"title\\"
                    }, \\"\\\\u4e0e\\\\u5c0f\\\\u7a0b\\\\u5e8f\\\\u539f\\\\u751f\\\\u878d\\\\u5408\\\\u7684\\\\u5404\\\\u79cd\\\\u793a\\\\u4f8b\\"), react[\\"default\\"].createElement(taro_components[\\"View\\"], {
                        className: \\"main\\"
                    }, react[\\"default\\"].createElement(taro_components[\\"View\\"], {
                        className: \\"wrapper\\"
                    }, react[\\"default\\"].createElement(\\"tab\\", {
                        onMyevent: this.tabEvent,
                        myProperty: \\"This is tab\\"
                    })), react[\\"default\\"].createElement(taro_components[\\"View\\"], {
                        className: \\"wrapper\\"
                    }, react[\\"default\\"].createElement(taro_components[\\"Button\\"], {
                        type: \\"primary\\",
                        onClick: this.gotoNative
                    }, \\"\\\\u6df7\\\\u5199\\\\u539f\\\\u751f\\\\u9875\\\\u9762\\\\u793a\\\\u4f8b\\"))));
                }
            } ]);
            return Index;
        }(react[\\"default\\"].Component);
        var config = {
            navigationBarTitleText: \\"\\\\u9996\\\\u9875\\",
            usingComponents: {
                tab: \\"../../components/tab/tab\\"
            }
        };
        var inst = Page(Object(taro_runtime[\\"createPageConfig\\"])(index_Index, \\"pages/index/index\\", {
            root: {
                cn: []
            }
        }, config || {}));
    }
}, [ [ 25, 0, 1, 3, 2 ] ] ]);

/** filePath: dist/pages/index/index.json **/
{\\"navigationBarTitleText\\":\\"首页\\",\\"usingComponents\\":{\\"custom-wrapper\\":\\"../../custom-wrapper\\",\\"tab\\":\\"../../components/tab/tab\\",\\"comp\\":\\"../../comp\\"}}

/** filePath: dist/pages/index/index.wxml **/
<import src=\\"../../base.wxml\\"/>
<template is=\\"taro_tmpl\\" data=\\"{{root:root}}\\" />

/** filePath: dist/pages/index/index.wxss **/
.title{text-align:center;line-height:80rpx;font-size:36rpx}.main{padding:0 50rpx}.wrapper{margin-bottom:24rpx}

/** filePath: dist/pages/native/native.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 13 ], {
    18: function(module, exports, __webpack_require__) {
        var _require = __webpack_require__(19), add = _require.add;
        Page({
            data: {
                text: \\"This is page data.\\",
                x: add(1, 2)
            },
            created: function created(options) {
                console.log(options);
            },
            onReady: function onReady() {},
            viewTap: function viewTap() {
                this.setData({
                    text: \\"Set some data for updating view.\\"
                }, (function() {}));
            },
            handler: function handler(e) {
                console.log(e);
            },
            customData: {
                hi: \\"MINA\\"
            }
        });
    },
    19: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, \\"add\\", (function() {
            return add;
        }));
        function add(a, b) {
            return a + b;
        }
    }
}, [ [ 18, 0 ] ] ]);

/** filePath: dist/pages/native/native.json **/
{\\"navigationBarBackgroundColor\\":\\"#ffffff\\",\\"navigationBarTextStyle\\":\\"black\\",\\"navigationBarTitleText\\":\\"混写页面示例\\",\\"backgroundColor\\":\\"#eeeeee\\",\\"backgroundTextStyle\\":\\"light\\",\\"usingComponents\\":{\\"custom-wrapper\\":\\"../../custom-wrapper\\",\\"tab\\":\\"../../components/tab/tab\\"}}

/** filePath: dist/pages/native/native.wxml **/
<view class=\\"native\\" bindtap=\\"viewTap\\">
  <text>{{text}}{{x}}</text>
  <tab myProperty=\\"kkl\\" bindmyevent=\\"handler\\" />
</view>


/** filePath: dist/pages/native/native.wxss **/
.native{color:red}

/** filePath: dist/runtime.js **/


/** filePath: dist/taro.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 1 ], {
    0: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        var _unused_webpack_default_export = \\"taro-runtime-mock\\";
    },
    3: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        var _unused_webpack_default_export = \\"taro-components-mock\\";
    },
    9: function(module, __webpack_exports__, __webpack_require__) {
        \\"use strict\\";
        __webpack_exports__[\\"a\\"] = \\"taro-react-mock\\";
    }
} ]);

/** filePath: dist/utils.wxs **/
module.exports = {
  a: function (l, n, s) {
    var a = [\\"view\\",\\"catch-view\\",\\"cover-view\\",\\"static-view\\",\\"pure-view\\",\\"block\\",\\"text\\",\\"static-text\\",\\"slot\\",\\"slot-view\\",\\"label\\",\\"form\\",\\"scroll-view\\",\\"swiper\\",\\"swiper-item\\",\\"tab\\"]
    var b = [\\"static-text\\",\\"slot\\",\\"slot-view\\",\\"label\\",\\"form\\",\\"scroll-view\\",\\"swiper\\",\\"swiper-item\\"]
    if (a.indexOf(n) === -1) {
      l = 0
    }
    if (b.indexOf(n) > -1) {
      var u = s.split(',')
      var depth = 0
      for (var i = 0; i < u.length; i++) {
        if (u[i] === n) depth++
      }
      l = depth
    }
    return 'tmpl_' + l + '_' + n
  },
  b: function (a, b) {
    return a === undefined ? b : a
  },
  c: function(i, prefix) {
    var s = i.focus !== undefined ? 'focus' : 'blur'
    return prefix + i.nn + '_' + s
  },
  d: function (i, v) {
    return i === undefined ? v : i
  },
  e: function (n) {
    return 'tmpl_' + n + '_container'
  },
  f: function (l, n) {
    var b = [\\"static-text\\",\\"slot\\",\\"slot-view\\",\\"label\\",\\"form\\",\\"scroll-view\\",\\"swiper\\",\\"swiper-item\\"]
    if (b.indexOf(n) > -1) {
      if (l) l += ','
      l += n
    }
    return l
  }
}

/** filePath: dist/vendors.js **/
(wx[\\"webpackJsonp\\"] = wx[\\"webpackJsonp\\"] || []).push([ [ 3 ], [ , , , , function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _classCallCheck;
    }));
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError(\\"Cannot call a class as a function\\");
        }
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _createClass;
    }));
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if (\\"value\\" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _createSuper;
    }));
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === \\"undefined\\" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === \\"function\\") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
            return true;
        } catch (e) {
            return false;
        }
    }
    var helpers_typeof = __webpack_require__(8);
    var typeof_default = __webpack_require__.n(helpers_typeof);
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError(\\"this hasn't been initialised - super() hasn't been called\\");
        }
        return self;
    }
    function _possibleConstructorReturn(self, call) {
        if (call && (typeof_default()(call) === \\"object\\" || typeof call === \\"function\\")) {
            return call;
        } else if (call !== void 0) {
            throw new TypeError(\\"Derived constructors may only return object or undefined\\");
        }
        return _assertThisInitialized(self);
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
        };
    }
}, function(module, __webpack_exports__, __webpack_require__) {
    \\"use strict\\";
    __webpack_require__.d(__webpack_exports__, \\"a\\", (function() {
        return _inherits;
    }));
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== \\"function\\" && superClass !== null) {
            throw new TypeError(\\"Super expression must either be null or a function\\");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
}, function(module, exports) {
    function _typeof(obj) {
        \\"@babel/helpers - typeof\\";
        if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") {
            module.exports = _typeof = function _typeof(obj) {
                return typeof obj;
            };
            module.exports[\\"default\\"] = module.exports, module.exports.__esModule = true;
        } else {
            module.exports = _typeof = function _typeof(obj) {
                return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj;
            };
            module.exports[\\"default\\"] = module.exports, module.exports.__esModule = true;
        }
        return _typeof(obj);
    }
    module.exports = _typeof;
    module.exports[\\"default\\"] = module.exports, module.exports.__esModule = true;
} ] ]);
"
`;
