// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`wx-hybrid should compatible with weapp native pages and components 1`] = `22`;

exports[`wx-hybrid should compatible with weapp native pages and components 2`] = `
"
/** filePath: dist/app.js **/
"use strict";

require("./common");

require("./vendors");

require("./runtime");

(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([ [ 143 ], {
    736: function(__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
        var taro_shared = __webpack_require__(738);
        const needPromiseApis = new Set([ "addFileToFavorites", "addVideoToFavorites", "authPrivateMessage", "checkIsAddedToMyMiniProgram", "chooseContact", "cropImage", "disableAlertBeforeUnload", "editImage", "enableAlertBeforeUnload", "getBackgroundFetchData", "getChannelsLiveInfo", "getChannelsLiveNoticeInfo", "getFuzzyLocation", "getGroupEnterInfo", "getLocalIPAddress", "getShareInfo", "getUserProfile", "getWeRunData", "join1v1Chat", "openChannelsActivity", "openChannelsEvent", "openChannelsLive", "openChannelsUserProfile", "openCustomerServiceChat", "openVideoEditor", "saveFileToDisk", "scanItem", "setEnable1v1Chat", "setWindowSize", "sendBizRedPacket", "startFacialRecognitionVerify" ]);
        function initNativeApi(taro) {
            (0, taro_shared.Ig)(taro, wx, {
                needPromiseApis: needPromiseApis,
                modifyApis(apis) {
                    apis.delete("lanDebug");
                },
                transformMeta(api, options) {
                    var _a;
                    if (api === "showShareMenu") {
                        options.menus = (_a = options.showShareItems) === null || _a === void 0 ? void 0 : _a.map((item => item === "wechatFriends" ? "shareAppMessage" : item === "wechatMoment" ? "shareTimeline" : item));
                    }
                    return {
                        key: api,
                        options: options
                    };
                }
            });
            taro.cloud = wx.cloud;
            taro.getTabBar = function(pageCtx) {
                var _a;
                if (typeof (pageCtx === null || pageCtx === void 0 ? void 0 : pageCtx.getTabBar) === "function") {
                    return (_a = pageCtx.getTabBar()) === null || _a === void 0 ? void 0 : _a.$taroInstances;
                }
            };
            taro.getRenderer = function() {
                var _a, _b, _c;
                return (_c = (_b = (_a = taro.getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.renderer) !== null && _c !== void 0 ? _c : "webview";
            };
        }
        const _true = "true";
        const _false = "false";
        const _empty = "";
        const _zero = "0";
        const components = {
            Progress: {
                "border-radius": _zero,
                "font-size": "16",
                duration: "30",
                bindActiveEnd: _empty
            },
            RichText: {
                space: _empty,
                "user-select": _false
            },
            Text: {
                "user-select": _false
            },
            Map: {
                polygons: "[]",
                subkey: _empty,
                rotate: _zero,
                skew: _zero,
                "max-scale": "20",
                "min-scale": "3",
                "enable-3D": _false,
                "show-compass": _false,
                "show-scale": _false,
                "enable-overlooking": _false,
                "enable-zoom": _true,
                "enable-scroll": _true,
                "enable-rotate": _false,
                "enable-satellite": _false,
                "enable-traffic": _false,
                "enable-poi": _true,
                "enable-building": _true,
                setting: "[]",
                bindLabelTap: _empty,
                bindRegionChange: _empty,
                bindPoiTap: _empty,
                bindAnchorPointTap: _empty
            },
            Button: {
                lang: "en",
                "session-from": _empty,
                "send-message-title": _empty,
                "send-message-path": _empty,
                "send-message-img": _empty,
                "app-parameter": _empty,
                "show-message-card": _false,
                "business-id": _empty,
                bindGetUserInfo: _empty,
                bindContact: _empty,
                bindGetPhoneNumber: _empty,
                bindChooseAvatar: _empty,
                bindError: _empty,
                bindOpenSetting: _empty,
                bindLaunchApp: _empty
            },
            Form: {
                "report-submit-timeout": _zero
            },
            Input: {
                "always-embed": _false,
                "adjust-position": _true,
                "hold-keyboard": _false,
                "safe-password-cert-path": "",
                "safe-password-length": "",
                "safe-password-time-stamp": "",
                "safe-password-nonce": "",
                "safe-password-salt": "",
                "safe-password-custom-hash": "",
                "auto-fill": _empty,
                bindKeyboardHeightChange: _empty,
                bindNicknameReview: _empty
            },
            Picker: {
                "header-text": _empty,
                level: "region"
            },
            PickerView: {
                "immediate-change": _false,
                bindPickStart: _empty,
                bindPickEnd: _empty
            },
            Slider: {
                color: "'#e9e9e9'",
                "selected-color": "'#1aad19'"
            },
            Textarea: {
                "show-confirm-bar": _true,
                "adjust-position": _true,
                "hold-keyboard": _false,
                "disable-default-padding": _false,
                "confirm-type": "'return'",
                "confirm-hold": _false,
                bindKeyboardHeightChange: _empty
            },
            ScrollView: {
                type: "'list'",
                "event-passive": _false,
                "enable-flex": _false,
                "scroll-anchoring": _false,
                "refresher-enabled": _false,
                "refresher-threshold": "45",
                "refresher-default-style": "'black'",
                "refresher-background": "'#FFF'",
                "refresher-triggered": _false,
                enhanced: _false,
                bounces: _true,
                "show-scrollbar": _true,
                "paging-enabled": _false,
                "fast-deceleration": _false,
                reverse: _false,
                "cache-extent": _zero,
                "scroll-into-view-within-extent": _false,
                "scroll-into-view-alignment": "'start'",
                bindDragStart: _empty,
                bindDragging: _empty,
                bindDragEnd: _empty,
                bindRefresherPulling: _empty,
                bindRefresherRefresh: _empty,
                bindRefresherRestore: _empty,
                bindRefresherAbort: _empty,
                bindScrollStart: _empty,
                bindScrollEnd: _empty,
                bindRefresherWillRefresh: _empty
            },
            StickySection: {
                "push-pinned-header": _true
            },
            GridView: {
                type: "'aligned'",
                "cross-axis-count": "2",
                "max-cross-axis-extent": _zero,
                "main-axis-gap": _zero,
                "cross-axis-gap": _zero
            },
            ListView: {},
            StickyHeader: {},
            Swiper: {
                "snap-to-edge": _false,
                "easing-function": "'default'"
            },
            SwiperItem: {
                "skip-hidden-item-layout": _false
            },
            Navigator: {
                target: "'self'",
                "app-id": _empty,
                path: _empty,
                "extra-data": _empty,
                version: "'version'"
            },
            Camera: {
                mode: "'normal'",
                resolution: "'medium'",
                "frame-size": "'medium'",
                bindInitDone: _empty,
                bindScanCode: _empty
            },
            Image: {
                webp: _false,
                "show-menu-by-longpress": _false
            },
            LivePlayer: {
                mode: "'live'",
                "sound-mode": "'speaker'",
                "auto-pause-if-navigate": _true,
                "auto-pause-if-open-native": _true,
                "picture-in-picture-mode": "[]",
                bindstatechange: _empty,
                bindfullscreenchange: _empty,
                bindnetstatus: _empty,
                bindAudioVolumeNotify: _empty,
                bindEnterPictureInPicture: _empty,
                bindLeavePictureInPicture: _empty
            },
            Video: {
                title: _empty,
                "play-btn-position": "'bottom'",
                "enable-play-gesture": _false,
                "auto-pause-if-navigate": _true,
                "auto-pause-if-open-native": _true,
                "vslide-gesture": _false,
                "vslide-gesture-in-fullscreen": _true,
                "ad-unit-id": _empty,
                "poster-for-crawler": _empty,
                "show-casting-button": _false,
                "picture-in-picture-mode": "[]",
                "enable-auto-rotation": _false,
                "show-screen-lock-button": _false,
                "show-snapshot-button": _false,
                "show-background-playback-button": _false,
                "background-poster": _empty,
                bindProgress: _empty,
                bindLoadedMetadata: _empty,
                bindControlsToggle: _empty,
                bindEnterPictureInPicture: _empty,
                bindLeavePictureInPicture: _empty,
                bindSeekComplete: _empty,
                bindAdLoad: _empty,
                bindAdError: _empty,
                bindAdClose: _empty,
                bindAdPlay: _empty
            },
            Canvas: {
                type: _empty
            },
            Ad: {
                "ad-type": "'banner'",
                "ad-theme": "'white'"
            },
            CoverView: {
                "marker-id": _empty,
                slot: _empty
            },
            Editor: {
                "read-only": _false,
                placeholder: _empty,
                "show-img-size": _false,
                "show-img-toolbar": _false,
                "show-img-resize": _false,
                focus: _false,
                bindReady: _empty,
                bindFocus: _empty,
                bindBlur: _empty,
                bindInput: _empty,
                bindStatusChange: _empty,
                name: _empty
            },
            MatchMedia: {
                "min-width": _empty,
                "max-width": _empty,
                width: _empty,
                "min-height": _empty,
                "max-height": _empty,
                height: _empty,
                orientation: _empty
            },
            FunctionalPageNavigator: {
                version: "'release'",
                name: _empty,
                args: _empty,
                bindSuccess: _empty,
                bindFail: _empty,
                bindCancel: _empty
            },
            LivePusher: {
                url: _empty,
                mode: "'RTC'",
                autopush: _false,
                muted: _false,
                "enable-camera": _true,
                "auto-focus": _true,
                orientation: "'vertical'",
                beauty: _zero,
                whiteness: _zero,
                aspect: "'9:16'",
                "min-bitrate": "200",
                "max-bitrate": "1000",
                "audio-quality": "'high'",
                "waiting-image": _empty,
                "waiting-image-hash": _empty,
                zoom: _false,
                "device-position": "'front'",
                "background-mute": _false,
                mirror: _false,
                "remote-mirror": _false,
                "local-mirror": _false,
                "audio-reverb-type": _zero,
                "enable-mic": _true,
                "enable-agc": _false,
                "enable-ans": _false,
                "audio-volume-type": "'voicecall'",
                "video-width": "360",
                "video-height": "640",
                "beauty-style": "'smooth'",
                filter: "'standard'",
                animation: _empty,
                bindStateChange: _empty,
                bindNetStatus: _empty,
                bindBgmStart: _empty,
                bindBgmProgress: _empty,
                bindBgmComplete: _empty,
                bindAudioVolumeNotify: _empty
            },
            OfficialAccount: {
                bindLoad: _empty,
                bindError: _empty
            },
            OpenData: {
                type: _empty,
                "open-gid": _empty,
                lang: "'en'",
                "default-text": _empty,
                "default-avatar": _empty,
                bindError: _empty
            },
            NavigationBar: {
                title: _empty,
                loading: _false,
                "front-color": _empty,
                "background-color": _empty,
                "color-animation-duration": _zero,
                "color-animation-timing-func": "'linear'"
            },
            PageMeta: {
                "background-text-style": _empty,
                "background-color": _empty,
                "background-color-top": _empty,
                "background-color-bottom": _empty,
                "scroll-top": "''",
                "scroll-duration": "300",
                "page-style": "''",
                "root-font-size": "''",
                bindResize: _empty,
                bindScroll: _empty,
                bindScrollDone: _empty
            },
            VoipRoom: {
                openid: _empty,
                mode: "'camera'",
                "device-position": "'front'",
                bindError: _empty
            },
            AdCustom: {
                "unit-id": _empty,
                "ad-intervals": _empty,
                bindLoad: _empty,
                bindError: _empty
            },
            PageContainer: {
                show: _false,
                duration: "300",
                "z-index": "100",
                overlay: _true,
                position: "'bottom'",
                round: _false,
                "close-on-slide-down": _false,
                "overlay-style": _empty,
                "custom-style": _empty,
                bindBeforeEnter: _empty,
                bindEnter: _empty,
                bindAfterEnter: _empty,
                bindBeforeLeave: _empty,
                bindLeave: _empty,
                bindAfterLeave: _empty,
                bindClickOverlay: _empty
            },
            ShareElement: {
                mapkey: _empty,
                transform: _false,
                duration: "300",
                "easing-function": "'ease-out'"
            },
            KeyboardAccessory: {},
            RootPortal: {},
            ChannelLive: {
                feedId: _empty,
                finderUserName: _empty
            },
            ChannelVideo: {
                feedId: _empty,
                finderUserName: _empty,
                autoplay: _false,
                loop: _false,
                muted: _false,
                objectFit: "'contain'",
                bindError: _empty
            }
        };
        const hostConfig = {
            initNativeApi: initNativeApi,
            getMiniLifecycle(config) {
                const methods = config.page[5];
                if (methods.indexOf("onSaveExitState") === -1) {
                    methods.push("onSaveExitState");
                }
                return config;
            }
        };
        (0, taro_shared.xi)(hostConfig);
        (0, taro_shared.ku)(components);
        var runtime_esm = __webpack_require__(555);
        var taro = __webpack_require__(357);
        var classCallCheck = __webpack_require__(517);
        var createClass = __webpack_require__(872);
        var inherits = __webpack_require__(557);
        var createSuper = __webpack_require__(361);
        var react = __webpack_require__(800);
        var app_App = function(_React$Component) {
            (0, inherits.Z)(App, _React$Component);
            var _super = (0, createSuper.Z)(App);
            function App() {
                (0, classCallCheck.Z)(this, App);
                return _super.apply(this, arguments);
            }
            (0, createClass.Z)(App, [ {
                key: "componentDidMount",
                value: function componentDidMount() {}
            }, {
                key: "componentDidShow",
                value: function componentDidShow() {}
            }, {
                key: "componentDidHide",
                value: function componentDidHide() {}
            }, {
                key: "componentCatchError",
                value: function componentCatchError() {}
            }, {
                key: "render",
                value: function render() {
                    return this.props.children;
                }
            } ]);
            return App;
        }(react["default"].Component);
        var app = app_App;
        var taro_react = "taro-react-mock";
        var config = {
            pages: [ "pages/index/index", "pages/native/native" ],
            window: {
                backgroundTextStyle: "light",
                navigationBarBackgroundColor: "#fff",
                navigationBarTitleText: "WeChat",
                navigationBarTextStyle: "black"
            }
        };
        runtime_esm.window.__taroAppConfig = config;
        var inst = App((0, taro.Ox)(app, react, taro_react, config));
        (0, taro.J1)({
            designWidth: 750,
            deviceRatio: {
                640: 1.17,
                750: 1,
                828: .905
            },
            baseFontSize: 20,
            unitPrecision: undefined,
            targetUnit: undefined
        });
    }
}, function(__webpack_require__) {
    var __webpack_exec__ = function(moduleId) {
        return __webpack_require__(__webpack_require__.s = moduleId);
    };
    __webpack_require__.O(0, [ 216, 592 ], (function() {
        return __webpack_exec__(736);
    }));
    var __webpack_exports__ = __webpack_require__.O();
} ]);



/** filePath: dist/app.json **/
{"pages":["pages/index/index","pages/native/native"],"window":{"backgroundTextStyle":"light","navigationBarBackgroundColor":"#fff","navigationBarTitleText":"WeChat","navigationBarTextStyle":"black"}}

/** filePath: dist/app.wxss **/


/** filePath: dist/base.wxml **/
<wxs module="xs" src="./utils.wxs" />
<template name="taro_tmpl">
  <block wx:for="{{root.cn}}" wx:key="sid">
    <template is="tmpl_0_container" data="{{i:item,l:''}}" />
  </block>
</template>

<template name="tmpl_0_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_0_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_0_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_0_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_0_4">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_0_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_0_12">
  <button size="{{xs.b(i.p10,'default')}}" type="{{i.p11}}" plain="{{xs.b(i.p9,!1)}}" disabled="{{i.p0}}" loading="{{xs.b(i.p6,!1)}}" form-type="{{i.p1}}" open-type="{{i.p8}}" hover-class="{{xs.b(i.p2,'button-hover')}}" hover-stop-propagation="{{xs.b(i.p5,!1)}}" hover-start-time="{{xs.b(i.p3,20)}}" hover-stay-time="{{xs.b(i.p4,70)}}" name="{{i.p7}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </button>
</template>

<template name="tmpl_0_36">
  <scroll-view scroll-x="{{xs.b(i.p7,!1)}}" scroll-y="{{xs.b(i.p8,!1)}}" upper-threshold="{{xs.b(i.p9,50)}}" lower-threshold="{{xs.b(i.p2,50)}}" scroll-top="{{i.p5}}" scroll-left="{{i.p4}}" scroll-into-view="{{i.p3}}" scroll-with-animation="{{xs.b(i.p6,!1)}}" enable-back-to-top="{{xs.b(i.p1,!1)}}" bindscrolltoupper="eh" bindscrolltolower="eh" bindscroll="eh" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </scroll-view>
</template>

<template name="tmpl_0_3">
  <image src="{{i.p2}}" mode="{{xs.b(i.p1,'scaleToFill')}}" lazy-load="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </image>
</template>

<template name="tmpl_0_1">
  <image src="{{i.p2}}" mode="{{xs.b(i.p1,'scaleToFill')}}" lazy-load="{{xs.b(i.p0,!1)}}" binderror="eh" bindload="eh" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </image>
</template>

<template name="tmpl_0_8">
  <block>{{i.v}}</block>
</template>

<template name="tmpl_0_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_0_container">
  <template is="{{xs.a(0, i.nn, l)}}" data="{{i:i,cid:0,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_1_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_1_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_1_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_1_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_1_4">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_1_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_1_36">
  <scroll-view scroll-x="{{xs.b(i.p7,!1)}}" scroll-y="{{xs.b(i.p8,!1)}}" upper-threshold="{{xs.b(i.p9,50)}}" lower-threshold="{{xs.b(i.p2,50)}}" scroll-top="{{i.p5}}" scroll-left="{{i.p4}}" scroll-into-view="{{i.p3}}" scroll-with-animation="{{xs.b(i.p6,!1)}}" enable-back-to-top="{{xs.b(i.p1,!1)}}" bindscrolltoupper="eh" bindscrolltolower="eh" bindscroll="eh" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </scroll-view>
</template>

<template name="tmpl_1_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_1_container">
  <template is="{{xs.a(1, i.nn, l)}}" data="{{i:i,cid:1,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_2_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_2_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_2_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_2_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_2_4">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_2_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_2_36">
  <scroll-view scroll-x="{{xs.b(i.p7,!1)}}" scroll-y="{{xs.b(i.p8,!1)}}" upper-threshold="{{xs.b(i.p9,50)}}" lower-threshold="{{xs.b(i.p2,50)}}" scroll-top="{{i.p5}}" scroll-left="{{i.p4}}" scroll-into-view="{{i.p3}}" scroll-with-animation="{{xs.b(i.p6,!1)}}" enable-back-to-top="{{xs.b(i.p1,!1)}}" bindscrolltoupper="eh" bindscrolltolower="eh" bindscroll="eh" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </scroll-view>
</template>

<template name="tmpl_2_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_2_container">
  <template is="{{xs.a(2, i.nn, l)}}" data="{{i:i,cid:2,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_3_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_3_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_3_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_3_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_3_4">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_3_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_3_36">
  <scroll-view scroll-x="{{xs.b(i.p7,!1)}}" scroll-y="{{xs.b(i.p8,!1)}}" upper-threshold="{{xs.b(i.p9,50)}}" lower-threshold="{{xs.b(i.p2,50)}}" scroll-top="{{i.p5}}" scroll-left="{{i.p4}}" scroll-into-view="{{i.p3}}" scroll-with-animation="{{xs.b(i.p6,!1)}}" enable-back-to-top="{{xs.b(i.p1,!1)}}" bindscrolltoupper="eh" bindscrolltolower="eh" bindscroll="eh" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </scroll-view>
</template>

<template name="tmpl_3_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_3_container">
  <template is="{{xs.a(3, i.nn, l)}}" data="{{i:i,cid:3,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_4_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_4_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_4_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_4_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_4_4">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_4_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_4_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_4_container">
  <template is="{{xs.a(4, i.nn, l)}}" data="{{i:i,cid:4,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_5_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_5_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_5_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_5_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_5_4">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_5_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_5_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_5_container">
  <template is="{{xs.a(5, i.nn, l)}}" data="{{i:i,cid:5,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_6_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_6_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_6_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_6_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_6_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_6_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_6_container">
  <template is="{{xs.a(6, i.nn, l)}}" data="{{i:i,cid:6,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_7_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_7_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_7_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_7_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_7_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_7_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_7_container">
  <template is="{{xs.a(7, i.nn, l)}}" data="{{i:i,cid:7,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_8_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_8_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_8_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_8_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_8_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_8_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_8_container">
  <template is="{{xs.a(8, i.nn, l)}}" data="{{i:i,cid:8,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_9_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_9_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_9_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_9_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_9_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_9_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_9_container">
  <template is="{{xs.a(9, i.nn, l)}}" data="{{i:i,cid:9,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_10_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_10_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_10_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_10_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_10_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_10_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_10_container">
  <template is="{{xs.a(10, i.nn, l)}}" data="{{i:i,cid:10,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_11_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_11_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_11_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_11_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_11_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_11_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_11_container">
  <template is="{{xs.a(11, i.nn, l)}}" data="{{i:i,cid:11,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_12_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_12_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_12_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_12_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_12_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_12_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_12_container">
  <template is="{{xs.a(12, i.nn, l)}}" data="{{i:i,cid:12,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_13_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_13_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_13_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_13_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_13_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_13_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_13_container">
  <template is="{{xs.a(13, i.nn, l)}}" data="{{i:i,cid:13,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_14_0">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh" catchtouchmove="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_14_5">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" animation="{{i.p0}}" style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_14_2">
  <view style="{{i.st}}" class="{{i.cl}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_14_7">
  <view hover-class="{{xs.b(i.p1,'none')}}" hover-stop-propagation="{{xs.b(i.p4,!1)}}" hover-start-time="{{xs.b(i.p2,50)}}" hover-stay-time="{{xs.b(i.p3,400)}}" bindtouchstart="eh" bindtouchmove="eh" bindtouchend="eh" bindtouchcancel="eh" bindlongpress="eh" animation="{{i.p0}}" bindanimationstart="eh" bindanimationiteration="eh" bindanimationend="eh" bindtransitionend="eh" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </view>
</template>

<template name="tmpl_14_6">
  <text selectable="{{xs.b(i.p1,!1)}}" space="{{i.p2}}" decode="{{xs.b(i.p0,!1)}}" style="{{i.st}}" class="{{i.cl}}" bindtap="eh"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </text>
</template>

<template name="tmpl_14_tab">
  <tab bindmyevent="eh" myProperty="{{i.myProperty}}"  id="{{i.uid||i.sid}}" data-sid="{{i.sid}}">
    <block wx:for="{{i.cn}}" wx:key="sid">
      <template is="{{xs.e(cid+1)}}" data="{{i:item,l:l}}" />
    </block>
  </tab>
</template>
  
<template name="tmpl_14_container">
  <template is="{{xs.a(14, i.nn, l)}}" data="{{i:i,cid:14,l:xs.f(l,i.nn)}}" />
</template>

<template name="tmpl_15_container">
  <block wx:if="{{i.nn === '#text'}}">
    <template is="tmpl_0_#text" data="{{i:i}}" />
  </block>
  <block wx:else>
    <comp i="{{i}}" l="{{l}}" />
  </block>
</template>


/** filePath: dist/common.js **/
"use strict";

(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([ [ 592 ], {
    800: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, {
            Component: function() {
                return Component;
            }
        });
        var Component = {};
        __webpack_exports__["default"] = "react-mock";
    },
    738: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            CA: function() {
                return toCamelCase;
            },
            Ft: function() {
                return isNull;
            },
            HD: function() {
                return isString;
            },
            Ig: function() {
                return processApis;
            },
            Kn: function() {
                return isObject;
            },
            PT: function() {
                return hooks;
            },
            W: function() {
                return getComponentsAlias;
            },
            ZK: function() {
                return warn;
            },
            ZT: function() {
                return noop;
            },
            _c: function() {
                return controlledComponent;
            },
            eu: function() {
                return toDashed;
            },
            gl: function() {
                return isWebPlatform;
            },
            hj: function() {
                return isNumber;
            },
            kJ: function() {
                return isArray;
            },
            kT: function() {
                return EMPTY_OBJ;
            },
            ku: function() {
                return mergeInternalComponents;
            },
            mf: function() {
                return isFunction;
            },
            o8: function() {
                return isUndefined;
            },
            rD: function() {
                return internalComponents;
            },
            xi: function() {
                return mergeReconciler;
            },
            zW: function() {
                return Events;
            },
            zx: function() {
                return ensure;
            }
        });
        function mergeReconciler() {}
        function mergeInternalComponents() {}
        function isArray() {}
        function isFunction() {}
        function isNumber() {}
        function isNull() {}
        function isObject() {}
        function isString() {}
        function isUndefined() {}
        function isWebPlatform() {}
        function getComponentsAlias() {}
        function controlledComponent() {}
        function internalComponents() {}
        function toCamelCase() {}
        function toDashed() {}
        function processApis() {}
        function singleQuote() {}
        var EMPTY_OBJ = {};
        var hooks = {};
        function Events() {}
        function ensure() {}
        function noop() {}
        function warn() {}
        var __WEBPACK_DEFAULT_EXPORT__ = "taro-shared-mock";
    },
    357: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            J1: function() {
                return initPxTransform;
            },
            Ox: function() {
                return createReactApp;
            }
        });
        function setReconciler() {}
        function connectReactPage() {}
        function createReactApp() {}
        function createNativeComponentConfig() {}
        function connectVuePage() {}
        function createVueApp() {}
        function createVue3App() {}
        var setGlobalDataPlugin = {};
        function useDidHide() {}
        function useDidShow() {}
        function useError() {}
        function useLaunch() {}
        function usePageNotFound() {}
        function useLoad() {}
        function usePageScroll() {}
        function usePullDownRefresh() {}
        function usePullIntercept() {}
        function useReachBottom() {}
        function useResize() {}
        function useUnload() {}
        function useAddToFavorites() {}
        function useOptionMenuClick() {}
        function useSaveExitState() {}
        function useShareAppMessage() {}
        function useShareTimeline() {}
        function useTitleClick() {}
        function useReady() {}
        function useRouter() {}
        function useTabItemTap() {}
        function useScope() {}
        function initPxTransform() {}
        __webpack_exports__["ZP"] = "taro";
    },
    555: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, {
            Current: function() {
                return Current;
            },
            Events: function() {
                return _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zW;
            },
            FormElement: function() {
                return FormElement;
            },
            History: function() {
                return History;
            },
            Location: function() {
                return Location;
            },
            MutationObserver: function() {
                return MutationObserver;
            },
            SVGElement: function() {
                return SVGElement;
            },
            Style: function() {
                return Style;
            },
            TaroElement: function() {
                return TaroElement;
            },
            TaroEvent: function() {
                return TaroEvent;
            },
            TaroNode: function() {
                return TaroNode;
            },
            TaroRootElement: function() {
                return TaroRootElement;
            },
            TaroText: function() {
                return TaroText;
            },
            URL: function() {
                return URL;
            },
            URLSearchParams: function() {
                return URLSearchParams;
            },
            addLeadingSlash: function() {
                return addLeadingSlash;
            },
            cancelAnimationFrame: function() {
                return _caf;
            },
            createComponentConfig: function() {
                return createComponentConfig;
            },
            createEvent: function() {
                return createEvent;
            },
            createPageConfig: function() {
                return createPageConfig;
            },
            createRecursiveComponentConfig: function() {
                return createRecursiveComponentConfig;
            },
            document: function() {
                return document$1;
            },
            eventCenter: function() {
                return eventCenter;
            },
            eventHandler: function() {
                return eventHandler;
            },
            eventSource: function() {
                return eventSource;
            },
            getComputedStyle: function() {
                return getComputedStyle;
            },
            getCurrentInstance: function() {
                return getCurrentInstance;
            },
            getPageInstance: function() {
                return getPageInstance;
            },
            getPath: function() {
                return getPath;
            },
            history: function() {
                return history;
            },
            hooks: function() {
                return _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT;
            },
            hydrate: function() {
                return hydrate;
            },
            incrementId: function() {
                return incrementId;
            },
            injectPageInstance: function() {
                return injectPageInstance;
            },
            location: function() {
                return location;
            },
            navigator: function() {
                return nav;
            },
            nextTick: function() {
                return nextTick;
            },
            now: function() {
                return now;
            },
            options: function() {
                return options;
            },
            parseUrl: function() {
                return parseUrl;
            },
            removePageInstance: function() {
                return removePageInstance;
            },
            requestAnimationFrame: function() {
                return _raf;
            },
            safeExecute: function() {
                return safeExecute;
            },
            stringify: function() {
                return stringify;
            },
            window: function() {
                return window$1;
            }
        });
        var _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(738);
        var window = __webpack_require__(555)["window"];
        var document = __webpack_require__(555)["document"];
        var requestAnimationFrame = __webpack_require__(555)["requestAnimationFrame"];
        var cancelAnimationFrame = __webpack_require__(555)["cancelAnimationFrame"];
        const PROPERTY_THRESHOLD = 2046;
        const SET_DATA = "\\u5c0f\\u7a0b\\u5e8f setData";
        const PAGE_INIT = "\\u9875\\u9762\\u521d\\u59cb\\u5316";
        const ROOT_STR = "root";
        const HTML = "html";
        const HEAD = "head";
        const BODY = "body";
        const APP = "app";
        const CONTAINER = "container";
        const DOCUMENT_ELEMENT_NAME = "#document";
        const DOCUMENT_FRAGMENT = "document-fragment";
        const ID = "id";
        const UID = "uid";
        const CLASS = "class";
        const STYLE = "style";
        const FOCUS = "focus";
        const VIEW = "view";
        const STATIC_VIEW = "static-view";
        const PURE_VIEW = "pure-view";
        const PROPS = "props";
        const DATASET = "dataset";
        const OBJECT = "object";
        const VALUE = "value";
        const INPUT = "input";
        const CHANGE = "change";
        const CUSTOM_WRAPPER = "custom-wrapper";
        const TARGET = "target";
        const CURRENT_TARGET = "currentTarget";
        const TYPE = "type";
        const CONFIRM = "confirm";
        const TIME_STAMP = "timeStamp";
        const KEY_CODE = "keyCode";
        const TOUCHMOVE = "touchmove";
        const CATCHMOVE = "catchMove";
        const CATCH_VIEW = "catch-view";
        const COMMENT = "comment";
        const ON_LOAD = "onLoad";
        const ON_READY = "onReady";
        const ON_SHOW = "onShow";
        const ON_HIDE = "onHide";
        const OPTIONS = "options";
        const EXTERNAL_CLASSES = "externalClasses";
        const EVENT_CALLBACK_RESULT = "e_result";
        const BEHAVIORS = "behaviors";
        const A = "a";
        var CONTEXT_ACTIONS;
        (function(CONTEXT_ACTIONS) {
            CONTEXT_ACTIONS["INIT"] = "0";
            CONTEXT_ACTIONS["RESTORE"] = "1";
            CONTEXT_ACTIONS["RECOVER"] = "2";
            CONTEXT_ACTIONS["DESTORY"] = "3";
        })(CONTEXT_ACTIONS || (CONTEXT_ACTIONS = {}));
        const observers = [];
        class MutationObserverImpl {
            constructor(callback) {
                this.records = [];
                this.callback = callback;
            }
            observe(target, options) {
                this.disconnect();
                this.target = target;
                this.options = options || {};
                observers.push(this);
            }
            disconnect() {
                this.target = null;
                const index = observers.indexOf(this);
                if (index >= 0) {
                    observers.splice(index, 1);
                }
            }
            takeRecords() {
                return this.records.splice(0, this.records.length);
            }
        }
        const sidMatches = (observerTarget, target) => !!observerTarget && observerTarget.sid === (target === null || target === void 0 ? void 0 : target.sid);
        const isConcerned = (record, options) => {
            const {characterData: characterData, characterDataOldValue: characterDataOldValue, attributes: attributes, attributeOldValue: attributeOldValue, childList: childList} = options;
            switch (record.type) {
              case "characterData":
                if (characterData) {
                    if (!characterDataOldValue) record.oldValue = null;
                    return true;
                }
                return false;

              case "attributes":
                if (attributes) {
                    if (!attributeOldValue) record.oldValue = null;
                    return true;
                }
                return false;

              case "childList":
                if (childList) {
                    return true;
                }
                return false;
            }
        };
        let pendingMuatations = false;
        function logMutation(observer, record) {
            observer.records.push(record);
            if (!pendingMuatations) {
                pendingMuatations = true;
                Promise.resolve().then((() => {
                    pendingMuatations = false;
                    observers.forEach((observer => observer.callback(observer.takeRecords())));
                }));
            }
        }
        function recordMutation(record) {
            observers.forEach((observer => {
                const {options: options} = observer;
                for (let t = record.target; t; t = t.parentNode) {
                    if (sidMatches(observer.target, t) && isConcerned(record, options)) {
                        logMutation(observer, record);
                        break;
                    }
                    if (!options.subtree) break;
                }
            }));
        }
        class MutationObserver {
            constructor(callback) {
                if (false) {} else {
                    if (false) {}
                    this.core = {
                        observe: _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.ZT,
                        disconnect: _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.ZT,
                        takeRecords: _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.ZT
                    };
                }
            }
            observe(...args) {
                this.core.observe(...args);
            }
            disconnect() {
                this.core.disconnect();
            }
            takeRecords() {
                return this.core.takeRecords();
            }
            static record(record) {
                recordMutation(record);
            }
        }
        const incrementId = () => {
            const chatCodes = [];
            for (let i = 65; i <= 90; i++) {
                chatCodes.push(i);
            }
            for (let i = 97; i <= 122; i++) {
                chatCodes.push(i);
            }
            const chatCodesLen = chatCodes.length - 1;
            const list = [ 0, 0 ];
            return () => {
                const target = list.map((item => chatCodes[item]));
                const res = String.fromCharCode(...target);
                let tailIdx = list.length - 1;
                list[tailIdx]++;
                while (list[tailIdx] > chatCodesLen) {
                    list[tailIdx] = 0;
                    tailIdx = tailIdx - 1;
                    if (tailIdx < 0) {
                        list.push(0);
                        break;
                    }
                    list[tailIdx]++;
                }
                return res;
            };
        };
        function isElement(node) {
            return node.nodeType === 1;
        }
        function isText(node) {
            return node.nodeType === 3;
        }
        function isComment(node) {
            return node.nodeName === COMMENT;
        }
        function isHasExtractProp(el) {
            const res = Object.keys(el.props).find((prop => !(/^(class|style|id)$/.test(prop) || prop.startsWith("data-"))));
            return Boolean(res);
        }
        function isParentBinded(node, type) {
            var _a;
            let res = false;
            while ((node === null || node === void 0 ? void 0 : node.parentElement) && node.parentElement._path !== ROOT_STR) {
                if ((_a = node.parentElement.__handlers[type]) === null || _a === void 0 ? void 0 : _a.length) {
                    res = true;
                    break;
                }
                node = node.parentElement;
            }
            return res;
        }
        function shortcutAttr(key) {
            switch (key) {
              case STYLE:
                return "st";

              case ID:
                return UID;

              case CLASS:
                return "cl";

              default:
                return key;
            }
        }
        const customWrapperCache = new Map;
        function extend(ctor, methodName, options) {
            if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(options)) {
                options = {
                    value: options
                };
            }
            Object.defineProperty(ctor.prototype, methodName, Object.assign({
                configurable: true,
                enumerable: true
            }, options));
        }
        let componentsAlias$1;
        function getComponentsAlias() {
            if (!componentsAlias$1) {
                componentsAlias$1 = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.W)(_tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.rD);
            }
            return componentsAlias$1;
        }
        class ClassList {
            constructor(className, el) {
                this.tokenList = [];
                this.el = el;
                className.trim().split(/\\s+/).forEach((token => this.tokenList.push(token)));
            }
            get value() {
                return this.toString();
            }
            get length() {
                return this.tokenList.length;
            }
            add() {
                let index = 0;
                let updated = false;
                const tokens = arguments;
                const length = tokens.length;
                const tokenList = this.tokenList;
                do {
                    const token = tokens[index];
                    if (this.checkTokenIsValid(token) && !~tokenList.indexOf(token)) {
                        tokenList.push(token);
                        updated = true;
                    }
                } while (++index < length);
                if (updated) {
                    this._update();
                }
            }
            remove() {
                let i = 0;
                let updated = false;
                const tokens = arguments;
                const length = tokens.length;
                const tokenList = this.tokenList;
                do {
                    const token = tokens[i] + "";
                    if (!this.checkTokenIsValid(token)) continue;
                    const index = tokenList.indexOf(token);
                    if (~tokenList.indexOf(token)) {
                        tokenList.splice(index, 1);
                        updated = true;
                    }
                } while (++i < length);
                if (updated) {
                    this._update();
                }
            }
            contains(token) {
                if (!this.checkTokenIsValid(token)) return false;
                return !!~this.tokenList.indexOf(token);
            }
            toggle(token, force) {
                const result = this.contains(token);
                const method = result ? force !== true && "remove" : force !== false && "add";
                if (method) {
                    this[method](token);
                }
                if (force === true || force === false) {
                    return force;
                } else {
                    return !result;
                }
            }
            replace(token, replacement_token) {
                if (!this.checkTokenIsValid(token) || !this.checkTokenIsValid(replacement_token)) return;
                const index = this.tokenList.indexOf(token);
                if (~index) {
                    this.tokenList.splice(index, 1, replacement_token);
                    this._update();
                }
            }
            toString() {
                return this.tokenList.filter((v => v !== "")).join(" ");
            }
            checkTokenIsValid(token) {
                if (token === "" || /\\s/.test(token)) return false;
                return true;
            }
            _update() {
                this.el.className = this.value;
            }
        }
        class EventSource extends Map {
            removeNode(child) {
                const {sid: sid, uid: uid} = child;
                this.delete(sid);
                if (uid !== sid && uid) this.delete(uid);
            }
            removeNodeTree(child) {
                this.removeNode(child);
                const {childNodes: childNodes} = child;
                childNodes.forEach((node => this.removeNodeTree(node)));
            }
        }
        const eventSource = new EventSource;
        const isWeb$1 = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.gl)();
        const env = {
            window: isWeb$1 ? window : _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kT,
            document: isWeb$1 ? document : _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kT
        };
        let SPECIAL_NODES;
        let componentsAlias;
        function hydrate(node) {
            if (!componentsAlias) {
                componentsAlias = getComponentsAlias();
            }
            if (!SPECIAL_NODES) {
                SPECIAL_NODES = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getSpecialNodes");
            }
            const nodeName = node.nodeName;
            if (isText(node)) {
                return {
                    ["v"]: node.nodeValue,
                    ["nn"]: componentsAlias[nodeName]._num
                };
            }
            const data = {
                ["nn"]: nodeName,
                sid: node.sid
            };
            if (node.uid !== node.sid) {
                data.uid = node.uid;
            }
            if (!node.isAnyEventBinded() && SPECIAL_NODES.indexOf(nodeName) > -1) {
                data["nn"] = \`static-\${nodeName}\`;
                if (nodeName === VIEW && !isHasExtractProp(node)) {
                    data["nn"] = PURE_VIEW;
                }
            }
            const {props: props} = node;
            for (const prop in props) {
                const propInCamelCase = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(prop);
                if (!prop.startsWith("data-") && prop !== CLASS && prop !== STYLE && prop !== ID && propInCamelCase !== CATCHMOVE) {
                    data[propInCamelCase] = props[prop];
                }
                if (nodeName === VIEW && propInCamelCase === CATCHMOVE && props[prop] !== false) {
                    data["nn"] = CATCH_VIEW;
                }
            }
            let {childNodes: childNodes} = node;
            childNodes = childNodes.filter((node => !isComment(node)));
            if (childNodes.length > 0) {
                data["cn"] = childNodes.map(hydrate);
            } else {
                data["cn"] = [];
            }
            if (node.className !== "") {
                data["cl"] = node.className;
            }
            const cssText = node.cssText;
            if (cssText !== "" && nodeName !== "swiper-item") {
                data["st"] = cssText;
            }
            _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("modifyHydrateData", data);
            const nn = data["nn"];
            const componentAlias = componentsAlias[nn];
            if (componentAlias) {
                data["nn"] = componentAlias._num;
                for (const prop in data) {
                    if (prop in componentAlias) {
                        data[componentAlias[prop]] = data[prop];
                        delete data[prop];
                    }
                }
            }
            return data;
        }
        class TaroEventTarget {
            constructor() {
                this.__handlers = {};
            }
            addEventListener(type, handler, options) {
                type = type.toLowerCase();
                _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("onAddEvent", type, handler, options, this);
                if (type === "regionchange") {
                    this.addEventListener("begin", handler, options);
                    this.addEventListener("end", handler, options);
                    return;
                }
                let isCapture = Boolean(options);
                let isOnce = false;
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.Kn)(options)) {
                    isCapture = Boolean(options.capture);
                    isOnce = Boolean(options.once);
                }
                if (isOnce) {
                    const wrapper = function() {
                        handler.apply(this, arguments);
                        this.removeEventListener(type, wrapper);
                    };
                    this.addEventListener(type, wrapper, Object.assign(Object.assign({}, options), {
                        once: false
                    }));
                    return;
                }
                false && 0;
                const oldHandler = handler;
                handler = function() {
                    return oldHandler.apply(this, arguments);
                };
                handler.oldHandler = oldHandler;
                const handlers = this.__handlers[type];
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(handlers)) {
                    handlers.push(handler);
                } else {
                    this.__handlers[type] = [ handler ];
                }
            }
            removeEventListener(type, handler) {
                type = type.toLowerCase();
                if (type === "regionchange") {
                    this.removeEventListener("begin", handler);
                    this.removeEventListener("end", handler);
                    return;
                }
                if (!handler) {
                    return;
                }
                const handlers = this.__handlers[type];
                if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(handlers)) {
                    return;
                }
                const index = handlers.findIndex((item => {
                    if (item === handler || item.oldHandler === handler) return true;
                }));
                false && 0;
                handlers.splice(index, 1);
            }
            isAnyEventBinded() {
                const handlers = this.__handlers;
                const isAnyEventBinded = Object.keys(handlers).find((key => handlers[key].length));
                return Boolean(isAnyEventBinded);
            }
        }
        const CHILDNODES = "cn";
        const nodeId = incrementId();
        class TaroNode extends TaroEventTarget {
            constructor() {
                super();
                this.parentNode = null;
                this.childNodes = [];
                this.hydrate = node => () => hydrate(node);
                this.uid = "_" + nodeId();
                this.sid = this.uid;
                eventSource.set(this.sid, this);
            }
            updateChildNodes(isClean) {
                const cleanChildNodes = () => [];
                const rerenderChildNodes = () => {
                    const childNodes = this.childNodes.filter((node => !isComment(node)));
                    return childNodes.map(hydrate);
                };
                this.enqueueUpdate({
                    path: \`\${this._path}.\${CHILDNODES}\`,
                    value: isClean ? cleanChildNodes : rerenderChildNodes
                });
            }
            get _root() {
                var _a;
                return ((_a = this.parentNode) === null || _a === void 0 ? void 0 : _a._root) || null;
            }
            findIndex(refChild) {
                const index = this.childNodes.indexOf(refChild);
                (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zx)(index !== -1, "The node to be replaced is not a child of this node.");
                return index;
            }
            get _path() {
                const parentNode = this.parentNode;
                if (parentNode) {
                    const list = parentNode.childNodes.filter((node => !isComment(node)));
                    const indexOfNode = list.indexOf(this);
                    const index = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getPathIndex", indexOfNode);
                    return \`\${parentNode._path}.\${CHILDNODES}.\${index}\`;
                }
                return "";
            }
            get nextSibling() {
                const parentNode = this.parentNode;
                return (parentNode === null || parentNode === void 0 ? void 0 : parentNode.childNodes[parentNode.findIndex(this) + 1]) || null;
            }
            get previousSibling() {
                const parentNode = this.parentNode;
                return (parentNode === null || parentNode === void 0 ? void 0 : parentNode.childNodes[parentNode.findIndex(this) - 1]) || null;
            }
            get parentElement() {
                const parentNode = this.parentNode;
                if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.nodeType) === 1) {
                    return parentNode;
                }
                return null;
            }
            get firstChild() {
                return this.childNodes[0] || null;
            }
            get lastChild() {
                const childNodes = this.childNodes;
                return childNodes[childNodes.length - 1] || null;
            }
            set textContent(text) {
                const removedNodes = this.childNodes.slice();
                const addedNodes = [];
                while (this.firstChild) {
                    this.removeChild(this.firstChild, {
                        doUpdate: false
                    });
                }
                if (text === "") {
                    this.updateChildNodes(true);
                } else {
                    const newText = env.document.createTextNode(text);
                    addedNodes.push(newText);
                    this.appendChild(newText);
                    this.updateChildNodes();
                }
                MutationObserver.record({
                    type: "childList",
                    target: this,
                    removedNodes: removedNodes,
                    addedNodes: addedNodes
                });
            }
            insertBefore(newChild, refChild, isReplace) {
                if (newChild.nodeName === DOCUMENT_FRAGMENT) {
                    newChild.childNodes.reduceRight(((previousValue, currentValue) => {
                        this.insertBefore(currentValue, previousValue);
                        return currentValue;
                    }), refChild);
                    return newChild;
                }
                newChild.remove({
                    cleanRef: false
                });
                newChild.parentNode = this;
                if (refChild) {
                    const index = this.findIndex(refChild);
                    this.childNodes.splice(index, 0, newChild);
                } else {
                    this.childNodes.push(newChild);
                }
                if (this._root) {
                    if (!refChild) {
                        const isOnlyChild = this.childNodes.length === 1;
                        if (isOnlyChild) {
                            this.updateChildNodes();
                        } else {
                            this.enqueueUpdate({
                                path: newChild._path,
                                value: this.hydrate(newChild)
                            });
                        }
                    } else if (isReplace) {
                        this.enqueueUpdate({
                            path: newChild._path,
                            value: this.hydrate(newChild)
                        });
                    } else {
                        this.updateChildNodes();
                    }
                }
                MutationObserver.record({
                    type: "childList",
                    target: this,
                    addedNodes: [ newChild ],
                    removedNodes: isReplace ? [ refChild ] : [],
                    nextSibling: isReplace ? refChild.nextSibling : refChild || null,
                    previousSibling: newChild.previousSibling
                });
                return newChild;
            }
            appendChild(newChild) {
                return this.insertBefore(newChild);
            }
            replaceChild(newChild, oldChild) {
                if (oldChild.parentNode !== this) return;
                this.insertBefore(newChild, oldChild, true);
                oldChild.remove({
                    doUpdate: false
                });
                return oldChild;
            }
            removeChild(child, options = {}) {
                const {cleanRef: cleanRef, doUpdate: doUpdate} = options;
                if (cleanRef !== false && doUpdate !== false) {
                    MutationObserver.record({
                        type: "childList",
                        target: this,
                        removedNodes: [ child ],
                        nextSibling: child.nextSibling,
                        previousSibling: child.previousSibling
                    });
                }
                const index = this.findIndex(child);
                this.childNodes.splice(index, 1);
                child.parentNode = null;
                if (cleanRef !== false) {
                    eventSource.removeNodeTree(child);
                }
                if (this._root && doUpdate !== false) {
                    this.updateChildNodes();
                }
                return child;
            }
            remove(options) {
                var _a;
                (_a = this.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this, options);
            }
            hasChildNodes() {
                return this.childNodes.length > 0;
            }
            enqueueUpdate(payload) {
                var _a;
                (_a = this._root) === null || _a === void 0 ? void 0 : _a.enqueueUpdate(payload);
            }
            get ownerDocument() {
                return env.document;
            }
            static extend(methodName, options) {
                extend(TaroNode, methodName, options);
            }
        }
        const WEBKIT = "webkit";
        const styleProperties = [ "all", "appearance", "blockOverflow", "blockSize", "bottom", "clear", "contain", "content", "continue", "cursor", "direction", "display", "filter", "float", "gap", "height", "inset", "isolation", "left", "letterSpacing", "lightingColor", "markerSide", "mixBlendMode", "opacity", "order", "position", "quotes", "resize", "right", "rowGap", "tabSize", "tableLayout", "top", "userSelect", "verticalAlign", "visibility", "voiceFamily", "volume", "whiteSpace", "widows", "width", "zIndex", "pointerEvents", "aspectRatio" ];
        function combine(prefix, list, excludeSelf) {
            !excludeSelf && styleProperties.push(prefix);
            list.forEach((item => {
                styleProperties.push(prefix + item);
                if (prefix === WEBKIT) {
                    styleProperties.push("Webkit" + item);
                }
            }));
        }
        const color = "Color";
        const style = "Style";
        const width = "Width";
        const image = "Image";
        const size = "Size";
        const color_style_width = [ color, style, width ];
        const fitlength_fitwidth_image = [ "FitLength", "FitWidth", image ];
        const fitlength_fitwidth_image_radius = [ ...fitlength_fitwidth_image, "Radius" ];
        const color_style_width_fitlength_fitwidth_image = [ ...color_style_width, ...fitlength_fitwidth_image ];
        const endRadius_startRadius = [ "EndRadius", "StartRadius" ];
        const bottom_left_right_top = [ "Bottom", "Left", "Right", "Top" ];
        const end_start = [ "End", "Start" ];
        const content_items_self = [ "Content", "Items", "Self" ];
        const blockSize_height_inlineSize_width = [ "BlockSize", "Height", "InlineSize", width ];
        const after_before = [ "After", "Before" ];
        combine("borderBlock", color_style_width);
        combine("borderBlockEnd", color_style_width);
        combine("borderBlockStart", color_style_width);
        combine("outline", [ ...color_style_width, "Offset" ]);
        combine("border", [ ...color_style_width, "Boundary", "Break", "Collapse", "Radius", "Spacing" ]);
        combine("borderFit", [ "Length", width ]);
        combine("borderInline", color_style_width);
        combine("borderInlineEnd", color_style_width);
        combine("borderInlineStart", color_style_width);
        combine("borderLeft", color_style_width_fitlength_fitwidth_image);
        combine("borderRight", color_style_width_fitlength_fitwidth_image);
        combine("borderTop", color_style_width_fitlength_fitwidth_image);
        combine("borderBottom", color_style_width_fitlength_fitwidth_image);
        combine("textDecoration", [ color, style, "Line" ]);
        combine("textEmphasis", [ color, style, "Position" ]);
        combine("scrollMargin", bottom_left_right_top);
        combine("scrollPadding", bottom_left_right_top);
        combine("padding", bottom_left_right_top);
        combine("margin", [ ...bottom_left_right_top, "Trim" ]);
        combine("scrollMarginBlock", end_start);
        combine("scrollMarginInline", end_start);
        combine("scrollPaddingBlock", end_start);
        combine("scrollPaddingInline", end_start);
        combine("gridColumn", end_start);
        combine("gridRow", end_start);
        combine("insetBlock", end_start);
        combine("insetInline", end_start);
        combine("marginBlock", end_start);
        combine("marginInline", end_start);
        combine("paddingBlock", end_start);
        combine("paddingInline", end_start);
        combine("pause", after_before);
        combine("cue", after_before);
        combine("mask", [ "Clip", "Composite", image, "Mode", "Origin", "Position", "Repeat", size, "Type" ]);
        combine("borderImage", [ "Outset", "Repeat", "Slice", "Source", "Transform", width ]);
        combine("maskBorder", [ "Mode", "Outset", "Repeat", "Slice", "Source", width ]);
        combine("font", [ "Family", "FeatureSettings", "Kerning", "LanguageOverride", "MaxSize", "MinSize", "OpticalSizing", "Palette", size, "SizeAdjust", "Stretch", style, "Weight", "VariationSettings" ]);
        combine("transform", [ "Box", "Origin", style ]);
        combine("background", [ color, image, "Attachment", "BlendMode", "Clip", "Origin", "Position", "Repeat", size ]);
        combine("listStyle", [ image, "Position", "Type" ]);
        combine("scrollSnap", [ "Align", "Stop", "Type" ]);
        combine("grid", [ "Area", "AutoColumns", "AutoFlow", "AutoRows" ]);
        combine("gridTemplate", [ "Areas", "Columns", "Rows" ]);
        combine("overflow", [ "Block", "Inline", "Wrap", "X", "Y" ]);
        combine("transition", [ "Delay", "Duration", "Property", "TimingFunction" ]);
        combine("color", [ "Adjust", "InterpolationFilters", "Scheme" ]);
        combine("textAlign", [ "All", "Last" ]);
        combine("page", [ "BreakAfter", "BreakBefore", "BreakInside" ]);
        combine("animation", [ "Delay", "Direction", "Duration", "FillMode", "IterationCount", "Name", "PlayState", "TimingFunction" ]);
        combine("flex", [ "Basis", "Direction", "Flow", "Grow", "Shrink", "Wrap" ]);
        combine("offset", [ ...after_before, ...end_start, "Anchor", "Distance", "Path", "Position", "Rotate" ]);
        combine("perspective", [ "Origin" ]);
        combine("clip", [ "Path", "Rule" ]);
        combine("flow", [ "From", "Into" ]);
        combine("align", [ "Content", "Items", "Self" ], true);
        combine("alignment", [ "Adjust", "Baseline" ], true);
        combine("borderStart", endRadius_startRadius, true);
        combine("borderEnd", endRadius_startRadius, true);
        combine("borderCorner", [ "Fit", image, "ImageTransform" ], true);
        combine("borderTopLeft", fitlength_fitwidth_image_radius, true);
        combine("borderTopRight", fitlength_fitwidth_image_radius, true);
        combine("borderBottomLeft", fitlength_fitwidth_image_radius, true);
        combine("borderBottomRight", fitlength_fitwidth_image_radius, true);
        combine("column", [ "s", "Count", "Fill", "Gap", "Rule", "RuleColor", "RuleStyle", "RuleWidth", "Span", width ], true);
        combine("break", [ ...after_before, "Inside" ], true);
        combine("wrap", [ ...after_before, "Flow", "Inside", "Through" ], true);
        combine("justify", content_items_self, true);
        combine("place", content_items_self, true);
        combine("max", [ ...blockSize_height_inlineSize_width, "Lines" ], true);
        combine("min", blockSize_height_inlineSize_width, true);
        combine("line", [ "Break", "Clamp", "Grid", "Height", "Padding", "Snap" ], true);
        combine("inline", [ "BoxAlign", size, "Sizing" ], true);
        combine("text", [ "CombineUpright", "GroupAlign", "Height", "Indent", "Justify", "Orientation", "Overflow", "Shadow", "SpaceCollapse", "SpaceTrim", "Spacing", "Transform", "UnderlinePosition", "Wrap" ], true);
        combine("shape", [ "ImageThreshold", "Inside", "Margin", "Outside" ], true);
        combine("word", [ "Break", "Spacing", "Wrap" ], true);
        combine("object", [ "Fit", "Position" ], true);
        combine("box", [ "DecorationBreak", "Shadow", "Sizing", "Snap" ], true);
        combine(WEBKIT, [ "LineClamp", "BoxOrient", "TextFillColor", "TextStroke", "TextStrokeColor", "TextStrokeWidth" ], true);
        function recordCss(obj) {
            MutationObserver.record({
                type: "attributes",
                target: obj._element,
                attributeName: "style",
                oldValue: obj.cssText
            });
        }
        function enqueueUpdate(obj) {
            const element = obj._element;
            if (element._root) {
                element.enqueueUpdate({
                    path: \`\${element._path}.\${"st"}\`,
                    value: obj.cssText
                });
            }
        }
        function setStyle(newVal, styleKey) {
            false && 0;
            const old = this[styleKey];
            if (old === newVal) return;
            !this._pending && recordCss(this);
            if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.Ft)(newVal) || (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(newVal)) {
                this._usedStyleProp.delete(styleKey);
                delete this._value[styleKey];
            } else {
                this._usedStyleProp.add(styleKey);
                this._value[styleKey] = newVal;
            }
            !this._pending && enqueueUpdate(this);
        }
        function initStyle(ctor, styleProperties) {
            const properties = {};
            for (let i = 0; i < styleProperties.length; i++) {
                const styleKey = styleProperties[i];
                if (ctor[styleKey]) return;
                properties[styleKey] = {
                    get() {
                        const val = this._value[styleKey];
                        return (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.Ft)(val) || (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(val) ? "" : val;
                    },
                    set(newVal) {
                        setStyle.call(this, newVal, styleKey);
                    }
                };
            }
            Object.defineProperties(ctor.prototype, properties);
        }
        function isCssVariable(propertyName) {
            return /^--/.test(propertyName);
        }
        class Style {
            constructor(element) {
                this._element = element;
                this._usedStyleProp = new Set;
                this._value = {};
            }
            setCssVariables(styleKey) {
                this.hasOwnProperty(styleKey) || Object.defineProperty(this, styleKey, {
                    enumerable: true,
                    configurable: true,
                    get: () => this._value[styleKey] || "",
                    set: newVal => {
                        setStyle.call(this, newVal, styleKey);
                    }
                });
            }
            get cssText() {
                if (!this._usedStyleProp.size) return "";
                const texts = [];
                this._usedStyleProp.forEach((key => {
                    const val = this[key];
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.Ft)(val) || (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(val)) return;
                    let styleName = isCssVariable(key) ? key : (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.eu)(key);
                    if (styleName.indexOf("webkit") === 0 || styleName.indexOf("Webkit") === 0) {
                        styleName = \`-\${styleName}\`;
                    }
                    texts.push(\`\${styleName}: \${val};\`);
                }));
                return texts.join(" ");
            }
            set cssText(str) {
                this._pending = true;
                recordCss(this);
                this._usedStyleProp.forEach((prop => {
                    this.removeProperty(prop);
                }));
                if (str === "" || (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(str) || (0, 
                _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.Ft)(str)) {
                    this._pending = false;
                    enqueueUpdate(this);
                    return;
                }
                const rules = str.split(";");
                for (let i = 0; i < rules.length; i++) {
                    const rule = rules[i].trim();
                    if (rule === "") {
                        continue;
                    }
                    const [propName, ...valList] = rule.split(":");
                    const val = valList.join(":");
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(val)) {
                        continue;
                    }
                    this.setProperty(propName.trim(), val.trim());
                }
                this._pending = false;
                enqueueUpdate(this);
            }
            setProperty(propertyName, value) {
                if (propertyName[0] === "-") {
                    this.setCssVariables(propertyName);
                } else {
                    propertyName = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(propertyName);
                }
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.Ft)(value) || (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(value)) {
                    this.removeProperty(propertyName);
                } else {
                    this[propertyName] = value;
                }
            }
            removeProperty(propertyName) {
                propertyName = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(propertyName);
                if (!this._usedStyleProp.has(propertyName)) {
                    return "";
                }
                const value = this[propertyName];
                this[propertyName] = undefined;
                return value;
            }
            getPropertyValue(propertyName) {
                propertyName = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(propertyName);
                const value = this[propertyName];
                if (!value) {
                    return "";
                }
                return value;
            }
        }
        initStyle(Style, styleProperties);
        _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.tap("injectNewStyleProperties", (newStyleProperties => {
            if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(newStyleProperties)) {
                initStyle(Style, newStyleProperties);
            } else {
                if (typeof newStyleProperties !== "string") return;
                initStyle(Style, [ newStyleProperties ]);
            }
        }));
        function returnTrue() {
            return true;
        }
        function treeToArray(root, predict) {
            const array = [];
            const filter = predict !== null && predict !== void 0 ? predict : returnTrue;
            let object = root;
            while (object) {
                if (object.nodeType === 1 && filter(object)) {
                    array.push(object);
                }
                object = following(object, root);
            }
            return array;
        }
        function following(el, root) {
            const firstChild = el.firstChild;
            const isElmentTypeValid = el.nodeType === 1 || el.nodeType === 9;
            if (firstChild && isElmentTypeValid) {
                return firstChild;
            }
            let current = el;
            do {
                if (current === root) {
                    return null;
                }
                const nextSibling = current.nextSibling;
                if (nextSibling) {
                    return nextSibling;
                }
                current = current.parentElement;
            } while (current);
            return null;
        }
        class TaroElement extends TaroNode {
            constructor() {
                super();
                this.props = {};
                this.dataset = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kT;
                this.nodeType = 1;
                this.style = new Style(this);
                _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("patchElement", this);
            }
            _stopPropagation(event) {
                let target = this;
                while (target = target.parentNode) {
                    const listeners = target.__handlers[event.type];
                    if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(listeners)) {
                        continue;
                    }
                    for (let i = listeners.length; i--; ) {
                        const l = listeners[i];
                        l._stop = true;
                    }
                }
            }
            get id() {
                return this.getAttribute(ID);
            }
            set id(val) {
                this.setAttribute(ID, val);
            }
            get className() {
                return this.getAttribute(CLASS) || "";
            }
            set className(val) {
                this.setAttribute(CLASS, val);
            }
            get cssText() {
                return this.getAttribute(STYLE) || "";
            }
            get classList() {
                return new ClassList(this.className, this);
            }
            get children() {
                return this.childNodes.filter(isElement);
            }
            get attributes() {
                const props = this.props;
                const propKeys = Object.keys(props);
                const style = this.style.cssText;
                const attrs = propKeys.map((key => ({
                    name: key,
                    value: props[key]
                })));
                return attrs.concat(style ? {
                    name: STYLE,
                    value: style
                } : []);
            }
            get textContent() {
                let text = "";
                const childNodes = this.childNodes;
                for (let i = 0; i < childNodes.length; i++) {
                    text += childNodes[i].textContent;
                }
                return text;
            }
            set textContent(text) {
                super.textContent = text;
            }
            hasAttribute(qualifiedName) {
                return !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(this.props[qualifiedName]);
            }
            hasAttributes() {
                return this.attributes.length > 0;
            }
            get focus() {
                return function() {
                    this.setAttribute(FOCUS, true);
                };
            }
            set focus(value) {
                this.setAttribute(FOCUS, value);
            }
            blur() {
                this.setAttribute(FOCUS, false);
            }
            setAttribute(qualifiedName, value) {
                false && 0;
                const isPureView = this.nodeName === VIEW && !isHasExtractProp(this) && !this.isAnyEventBinded();
                if (qualifiedName !== STYLE) {
                    MutationObserver.record({
                        target: this,
                        type: "attributes",
                        attributeName: qualifiedName,
                        oldValue: this.getAttribute(qualifiedName)
                    });
                }
                switch (qualifiedName) {
                  case STYLE:
                    this.style.cssText = value;
                    break;

                  case ID:
                    if (this.uid !== this.sid) {
                        eventSource.delete(this.uid);
                    }
                    value = String(value);
                    this.props[qualifiedName] = this.uid = value;
                    eventSource.set(value, this);
                    break;

                  default:
                    this.props[qualifiedName] = value;
                    if (qualifiedName.startsWith("data-")) {
                        if (this.dataset === _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kT) {
                            this.dataset = Object.create(null);
                        }
                        this.dataset[(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(qualifiedName.replace(/^data-/, ""))] = value;
                    }
                    break;
                }
                if (!this._root) return;
                const componentsAlias = getComponentsAlias();
                const _alias = componentsAlias[this.nodeName];
                const viewAlias = componentsAlias[VIEW]._num;
                const staticViewAlias = componentsAlias[STATIC_VIEW]._num;
                const catchViewAlias = componentsAlias[CATCH_VIEW]._num;
                const _path = this._path;
                qualifiedName = shortcutAttr(qualifiedName);
                const qualifiedNameInCamelCase = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(qualifiedName);
                const payload = {
                    path: \`\${_path}.\${qualifiedNameInCamelCase}\`,
                    value: (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(value) ? () => value : value
                };
                _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("modifySetAttrPayload", this, qualifiedName, payload, componentsAlias);
                if (_alias) {
                    const qualifiedNameAlias = _alias[qualifiedNameInCamelCase] || qualifiedName;
                    payload.path = \`\${_path}.\${(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(qualifiedNameAlias)}\`;
                }
                this.enqueueUpdate(payload);
                if (this.nodeName === VIEW) {
                    if (qualifiedNameInCamelCase === CATCHMOVE) {
                        this.enqueueUpdate({
                            path: \`\${_path}.\${"nn"}\`,
                            value: value ? catchViewAlias : this.isAnyEventBinded() ? viewAlias : staticViewAlias
                        });
                    } else if (isPureView && isHasExtractProp(this)) {
                        this.enqueueUpdate({
                            path: \`\${_path}.\${"nn"}\`,
                            value: staticViewAlias
                        });
                    }
                }
            }
            removeAttribute(qualifiedName) {
                const isStaticView = this.nodeName === VIEW && isHasExtractProp(this) && !this.isAnyEventBinded();
                MutationObserver.record({
                    target: this,
                    type: "attributes",
                    attributeName: qualifiedName,
                    oldValue: this.getAttribute(qualifiedName)
                });
                if (qualifiedName === STYLE) {
                    this.style.cssText = "";
                } else {
                    const isInterrupt = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("onRemoveAttribute", this, qualifiedName);
                    if (isInterrupt) {
                        return;
                    }
                    if (!this.props.hasOwnProperty(qualifiedName)) {
                        return;
                    }
                    delete this.props[qualifiedName];
                }
                if (!this._root) return;
                const componentsAlias = getComponentsAlias();
                const _alias = componentsAlias[this.nodeName];
                const viewAlias = componentsAlias[VIEW]._num;
                const staticViewAlias = componentsAlias[STATIC_VIEW]._num;
                const pureViewAlias = componentsAlias[PURE_VIEW]._num;
                const _path = this._path;
                qualifiedName = shortcutAttr(qualifiedName);
                const qualifiedNameInCamelCase = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(qualifiedName);
                const payload = {
                    path: \`\${_path}.\${qualifiedNameInCamelCase}\`,
                    value: ""
                };
                _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("modifyRmAttrPayload", this, qualifiedName, payload, componentsAlias);
                if (_alias) {
                    const qualifiedNameAlias = _alias[qualifiedNameInCamelCase] || qualifiedName;
                    payload.path = \`\${_path}.\${(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.CA)(qualifiedNameAlias)}\`;
                }
                this.enqueueUpdate(payload);
                if (this.nodeName === VIEW) {
                    if (qualifiedNameInCamelCase === CATCHMOVE) {
                        this.enqueueUpdate({
                            path: \`\${_path}.\${"nn"}\`,
                            value: this.isAnyEventBinded() ? viewAlias : isHasExtractProp(this) ? staticViewAlias : pureViewAlias
                        });
                    } else if (isStaticView && !isHasExtractProp(this)) {
                        this.enqueueUpdate({
                            path: \`\${_path}.\${"nn"}\`,
                            value: pureViewAlias
                        });
                    }
                }
            }
            getAttribute(qualifiedName) {
                const attr = qualifiedName === STYLE ? this.style.cssText : this.props[qualifiedName];
                return attr !== null && attr !== void 0 ? attr : "";
            }
            getElementsByTagName(tagName) {
                return treeToArray(this, (el => el.nodeName === tagName || tagName === "*" && this !== el));
            }
            getElementsByClassName(className) {
                const classNames = className.trim().split(/\\s+/);
                return treeToArray(this, (el => {
                    const classList = el.classList;
                    return classNames.every((c => classList.contains(c)));
                }));
            }
            dispatchEvent(event) {
                const cancelable = event.cancelable;
                const listeners = this.__handlers[event.type];
                if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(listeners)) {
                    return false;
                }
                for (let i = listeners.length; i--; ) {
                    const listener = listeners[i];
                    let result;
                    if (listener._stop) {
                        listener._stop = false;
                    } else {
                        _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("modifyDispatchEvent", event, this);
                        result = listener.call(this, event);
                    }
                    if ((result === false || event._end) && cancelable) {
                        event.defaultPrevented = true;
                    }
                    if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(result) && event.mpEvent) {
                        event.mpEvent[EVENT_CALLBACK_RESULT] = result;
                    }
                    if (event._end && event._stop) {
                        break;
                    }
                }
                if (event._stop) {
                    this._stopPropagation(event);
                } else {
                    event._stop = true;
                }
                return listeners != null;
            }
            addEventListener(type, handler, options) {
                const name = this.nodeName;
                const SPECIAL_NODES = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getSpecialNodes");
                let sideEffect = true;
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.Kn)(options) && options.sideEffect === false) {
                    sideEffect = false;
                    delete options.sideEffect;
                }
                if (sideEffect !== false && !this.isAnyEventBinded() && SPECIAL_NODES.indexOf(name) > -1) {
                    const componentsAlias = getComponentsAlias();
                    const alias = componentsAlias[name]._num;
                    this.enqueueUpdate({
                        path: \`\${this._path}.\${"nn"}\`,
                        value: alias
                    });
                }
                super.addEventListener(type, handler, options);
            }
            removeEventListener(type, handler, sideEffect = true) {
                super.removeEventListener(type, handler);
                const name = this.nodeName;
                const SPECIAL_NODES = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getSpecialNodes");
                if (sideEffect !== false && !this.isAnyEventBinded() && SPECIAL_NODES.indexOf(name) > -1) {
                    const componentsAlias = getComponentsAlias();
                    const value = isHasExtractProp(this) ? \`static-\${name}\` : \`pure-\${name}\`;
                    const valueAlias = componentsAlias[value]._num;
                    this.enqueueUpdate({
                        path: \`\${this._path}.\${"nn"}\`,
                        value: valueAlias
                    });
                }
            }
            static extend(methodName, options) {
                extend(TaroElement, methodName, options);
            }
        }
        const options = {
            prerender: true,
            debug: false
        };
        function initPosition() {
            return {
                index: 0,
                column: 0,
                line: 0
            };
        }
        function feedPosition(position, str, len) {
            const start = position.index;
            const end = position.index = start + len;
            for (let i = start; i < end; i++) {
                const char = str.charAt(i);
                if (char === "\\n") {
                    position.line++;
                    position.column = 0;
                } else {
                    position.column++;
                }
            }
        }
        function jumpPosition(position, str, end) {
            const len = end - position.index;
            return feedPosition(position, str, len);
        }
        function copyPosition(position) {
            return {
                index: position.index,
                line: position.line,
                column: position.column
            };
        }
        const whitespace = /\\s/;
        function isWhitespaceChar(char) {
            return whitespace.test(char);
        }
        const equalSign = /=/;
        function isEqualSignChar(char) {
            return equalSign.test(char);
        }
        function shouldBeIgnore(tagName) {
            const name = tagName.toLowerCase();
            if (options.html.skipElements.has(name)) {
                return true;
            }
            return false;
        }
        const alphanumeric = /[A-Za-z0-9]/;
        function findTextEnd(str, index) {
            while (true) {
                const textEnd = str.indexOf("<", index);
                if (textEnd === -1) {
                    return textEnd;
                }
                const char = str.charAt(textEnd + 1);
                if (char === "/" || char === "!" || alphanumeric.test(char)) {
                    return textEnd;
                }
                index = textEnd + 1;
            }
        }
        function isWordEnd(cursor, wordBegin, html) {
            if (!isWhitespaceChar(html.charAt(cursor))) return false;
            const len = html.length;
            for (let i = cursor - 1; i > wordBegin; i--) {
                const char = html.charAt(i);
                if (!isWhitespaceChar(char)) {
                    if (isEqualSignChar(char)) return false;
                    break;
                }
            }
            for (let i = cursor + 1; i < len; i++) {
                const char = html.charAt(i);
                if (!isWhitespaceChar(char)) {
                    if (isEqualSignChar(char)) return false;
                    return true;
                }
            }
        }
        class Scaner {
            constructor(html) {
                this.tokens = [];
                this.position = initPosition();
                this.html = html;
            }
            scan() {
                const {html: html, position: position} = this;
                const len = html.length;
                while (position.index < len) {
                    const start = position.index;
                    this.scanText();
                    if (position.index === start) {
                        const isComment = html.startsWith("!--", start + 1);
                        if (isComment) {
                            this.scanComment();
                        } else {
                            const tagName = this.scanTag();
                            if (shouldBeIgnore(tagName)) {
                                this.scanSkipTag(tagName);
                            }
                        }
                    }
                }
                return this.tokens;
            }
            scanText() {
                const type = "text";
                const {html: html, position: position} = this;
                let textEnd = findTextEnd(html, position.index);
                if (textEnd === position.index) {
                    return;
                }
                if (textEnd === -1) {
                    textEnd = html.length;
                }
                const start = copyPosition(position);
                const content = html.slice(position.index, textEnd);
                jumpPosition(position, html, textEnd);
                const end = copyPosition(position);
                this.tokens.push({
                    type: type,
                    content: content,
                    position: {
                        start: start,
                        end: end
                    }
                });
            }
            scanComment() {
                const type = "comment";
                const {html: html, position: position} = this;
                const start = copyPosition(position);
                feedPosition(position, html, 4);
                let contentEnd = html.indexOf("--\\x3e", position.index);
                let commentEnd = contentEnd + 3;
                if (contentEnd === -1) {
                    contentEnd = commentEnd = html.length;
                }
                const content = html.slice(position.index, contentEnd);
                jumpPosition(position, html, commentEnd);
                this.tokens.push({
                    type: type,
                    content: content,
                    position: {
                        start: start,
                        end: copyPosition(position)
                    }
                });
            }
            scanTag() {
                this.scanTagStart();
                const tagName = this.scanTagName();
                this.scanAttrs();
                this.scanTagEnd();
                return tagName;
            }
            scanTagStart() {
                const type = "tag-start";
                const {html: html, position: position} = this;
                const secondChar = html.charAt(position.index + 1);
                const close = secondChar === "/";
                const start = copyPosition(position);
                feedPosition(position, html, close ? 2 : 1);
                this.tokens.push({
                    type: type,
                    close: close,
                    position: {
                        start: start
                    }
                });
            }
            scanTagEnd() {
                const type = "tag-end";
                const {html: html, position: position} = this;
                const firstChar = html.charAt(position.index);
                const close = firstChar === "/";
                feedPosition(position, html, close ? 2 : 1);
                const end = copyPosition(position);
                this.tokens.push({
                    type: type,
                    close: close,
                    position: {
                        end: end
                    }
                });
            }
            scanTagName() {
                const type = "tag";
                const {html: html, position: position} = this;
                const len = html.length;
                let start = position.index;
                while (start < len) {
                    const char = html.charAt(start);
                    const isTagChar = !(isWhitespaceChar(char) || char === "/" || char === ">");
                    if (isTagChar) break;
                    start++;
                }
                let end = start + 1;
                while (end < len) {
                    const char = html.charAt(end);
                    const isTagChar = !(isWhitespaceChar(char) || char === "/" || char === ">");
                    if (!isTagChar) break;
                    end++;
                }
                jumpPosition(position, html, end);
                const tagName = html.slice(start, end);
                this.tokens.push({
                    type: type,
                    content: tagName
                });
                return tagName;
            }
            scanAttrs() {
                const {html: html, position: position, tokens: tokens} = this;
                let cursor = position.index;
                let quote = null;
                let wordBegin = cursor;
                const words = [];
                const len = html.length;
                while (cursor < len) {
                    const char = html.charAt(cursor);
                    if (quote) {
                        const isQuoteEnd = char === quote;
                        if (isQuoteEnd) {
                            quote = null;
                        }
                        cursor++;
                        continue;
                    }
                    const isTagEnd = char === "/" || char === ">";
                    if (isTagEnd) {
                        if (cursor !== wordBegin) {
                            words.push(html.slice(wordBegin, cursor));
                        }
                        break;
                    }
                    if (isWordEnd(cursor, wordBegin, html)) {
                        if (cursor !== wordBegin) {
                            words.push(html.slice(wordBegin, cursor));
                        }
                        wordBegin = cursor + 1;
                        cursor++;
                        continue;
                    }
                    const isQuoteStart = char === "'" || char === '"';
                    if (isQuoteStart) {
                        quote = char;
                        cursor++;
                        continue;
                    }
                    cursor++;
                }
                jumpPosition(position, html, cursor);
                const wLen = words.length;
                const type = "attribute";
                for (let i = 0; i < wLen; i++) {
                    const word = words[i];
                    const isNotPair = word.includes("=");
                    if (isNotPair) {
                        const secondWord = words[i + 1];
                        if (secondWord && secondWord.startsWith("=")) {
                            if (secondWord.length > 1) {
                                const newWord = word + secondWord;
                                tokens.push({
                                    type: type,
                                    content: newWord
                                });
                                i += 1;
                                continue;
                            }
                            const thirdWord = words[i + 2];
                            i += 1;
                            if (thirdWord) {
                                const newWord = word + "=" + thirdWord;
                                tokens.push({
                                    type: type,
                                    content: newWord
                                });
                                i += 1;
                                continue;
                            }
                        }
                    }
                    if (word.endsWith("=")) {
                        const secondWord = words[i + 1];
                        if (secondWord && !secondWord.includes("=")) {
                            const newWord = word + secondWord;
                            tokens.push({
                                type: type,
                                content: newWord
                            });
                            i += 1;
                            continue;
                        }
                        const newWord = word.slice(0, -1);
                        tokens.push({
                            type: type,
                            content: newWord
                        });
                        continue;
                    }
                    tokens.push({
                        type: type,
                        content: word
                    });
                }
            }
            scanSkipTag(tagName) {
                const {html: html, position: position} = this;
                const safeTagName = tagName.toLowerCase();
                const len = html.length;
                while (position.index < len) {
                    const nextTag = html.indexOf("</", position.index);
                    if (nextTag === -1) {
                        this.scanText();
                        break;
                    }
                    jumpPosition(position, html, nextTag);
                    const name = this.scanTag();
                    if (safeTagName === name.toLowerCase()) {
                        break;
                    }
                }
            }
        }
        function unquote(str) {
            const car = str.charAt(0);
            const end = str.length - 1;
            const isQuoteStart = car === '"' || car === "'";
            if (isQuoteStart && car === str.charAt(end)) {
                return str.slice(1, end);
            }
            return str;
        }
        const LEFT_BRACKET = "{";
        const RIGHT_BRACKET = "}";
        const CLASS_SELECTOR = ".";
        const ID_SELECTOR = "#";
        const CHILD_COMBINATOR = ">";
        const GENERAL_SIBLING_COMBINATOR = "~";
        const ADJACENT_SIBLING_COMBINATOR = "+";
        class StyleTagParser {
            constructor() {
                this.styles = [];
            }
            extractStyle(src) {
                const REG_STYLE = /<style\\s?[^>]*>((.|\\n|\\s)+?)<\\/style>/g;
                let html = src;
                html = html.replace(REG_STYLE, ((_, $1) => {
                    const style = $1.trim();
                    this.stringToSelector(style);
                    return "";
                }));
                return html.trim();
            }
            stringToSelector(style) {
                let lb = style.indexOf(LEFT_BRACKET);
                while (lb > -1) {
                    const rb = style.indexOf(RIGHT_BRACKET);
                    const selectors = style.slice(0, lb).trim();
                    let content = style.slice(lb + 1, rb);
                    content = content.replace(/:(.*);/g, (function(_, $1) {
                        const t = $1.trim().replace(/ +/g, "+++");
                        return \`:\${t};\`;
                    }));
                    content = content.replace(/ /g, "");
                    content = content.replace(/\\+\\+\\+/g, " ");
                    if (!/;$/.test(content)) {
                        content += ";";
                    }
                    selectors.split(",").forEach((src => {
                        const selectorList = this.parseSelector(src);
                        this.styles.push({
                            content: content,
                            selectorList: selectorList
                        });
                    }));
                    style = style.slice(rb + 1);
                    lb = style.indexOf(LEFT_BRACKET);
                }
            }
            parseSelector(src) {
                const list = src.trim().replace(/ *([>~+]) */g, " $1").replace(/ +/g, " ").replace(/\\[\\s*([^[\\]=\\s]+)\\s*=\\s*([^[\\]=\\s]+)\\s*\\]/g, "[$1=$2]").split(" ");
                const selectors = list.map((item => {
                    const firstChar = item.charAt(0);
                    const selector = {
                        isChild: firstChar === CHILD_COMBINATOR,
                        isGeneralSibling: firstChar === GENERAL_SIBLING_COMBINATOR,
                        isAdjacentSibling: firstChar === ADJACENT_SIBLING_COMBINATOR,
                        tag: null,
                        id: null,
                        class: [],
                        attrs: []
                    };
                    item = item.replace(/^[>~+]/, "");
                    item = item.replace(/\\[(.+?)\\]/g, (function(_, $1) {
                        const [key, value] = $1.split("=");
                        const all = $1.indexOf("=") === -1;
                        const attr = {
                            all: all,
                            key: key,
                            value: all ? null : value
                        };
                        selector.attrs.push(attr);
                        return "";
                    }));
                    item = item.replace(/([.#][A-Za-z0-9-_]+)/g, (function(_, $1) {
                        if ($1[0] === ID_SELECTOR) {
                            selector.id = $1.substr(1);
                        } else if ($1[0] === CLASS_SELECTOR) {
                            selector.class.push($1.substr(1));
                        }
                        return "";
                    }));
                    if (item !== "") {
                        selector.tag = item;
                    }
                    return selector;
                }));
                return selectors;
            }
            matchStyle(tagName, el, list) {
                const res = sortStyles(this.styles).reduce(((str, {content: content, selectorList: selectorList}, i) => {
                    let idx = list[i];
                    let selector = selectorList[idx];
                    const nextSelector = selectorList[idx + 1];
                    if ((nextSelector === null || nextSelector === void 0 ? void 0 : nextSelector.isGeneralSibling) || (nextSelector === null || nextSelector === void 0 ? void 0 : nextSelector.isAdjacentSibling)) {
                        selector = nextSelector;
                        idx += 1;
                        list[i] += 1;
                    }
                    let isMatch = this.matchCurrent(tagName, el, selector);
                    if (isMatch && selector.isGeneralSibling) {
                        let prev = getPreviousElement(el);
                        while (prev) {
                            if (prev.h5tagName && this.matchCurrent(prev.h5tagName, prev, selectorList[idx - 1])) {
                                isMatch = true;
                                break;
                            }
                            prev = getPreviousElement(prev);
                            isMatch = false;
                        }
                    }
                    if (isMatch && selector.isAdjacentSibling) {
                        const prev = getPreviousElement(el);
                        if (!prev || !prev.h5tagName) {
                            isMatch = false;
                        } else {
                            const isSiblingMatch = this.matchCurrent(prev.h5tagName, prev, selectorList[idx - 1]);
                            if (!isSiblingMatch) {
                                isMatch = false;
                            }
                        }
                    }
                    if (isMatch) {
                        if (idx === selectorList.length - 1) {
                            return str + content;
                        } else if (idx < selectorList.length - 1) {
                            list[i] += 1;
                        }
                    } else {
                        if (selector.isChild && idx > 0) {
                            list[i] -= 1;
                            if (this.matchCurrent(tagName, el, selectorList[list[i]])) {
                                list[i] += 1;
                            }
                        }
                    }
                    return str;
                }), "");
                return res;
            }
            matchCurrent(tagName, el, selector) {
                if (selector.tag && selector.tag !== tagName) return false;
                if (selector.id && selector.id !== el.id) return false;
                if (selector.class.length) {
                    const classList = el.className.split(" ");
                    for (let i = 0; i < selector.class.length; i++) {
                        const cls = selector.class[i];
                        if (classList.indexOf(cls) === -1) {
                            return false;
                        }
                    }
                }
                if (selector.attrs.length) {
                    for (let i = 0; i < selector.attrs.length; i++) {
                        const {all: all, key: key, value: value} = selector.attrs[i];
                        if (all && !el.hasAttribute(key)) {
                            return false;
                        } else {
                            const attr = el.getAttribute(key);
                            if (attr !== unquote(value || "")) {
                                return false;
                            }
                        }
                    }
                }
                return true;
            }
        }
        function getPreviousElement(el) {
            const parent = el.parentElement;
            if (!parent) return null;
            const prev = el.previousSibling;
            if (!prev) return null;
            if (prev.nodeType === 1) {
                return prev;
            } else {
                return getPreviousElement(prev);
            }
        }
        function sortStyles(styles) {
            return styles.sort(((s1, s2) => {
                const hundreds1 = getHundredsWeight(s1.selectorList);
                const hundreds2 = getHundredsWeight(s2.selectorList);
                if (hundreds1 !== hundreds2) return hundreds1 - hundreds2;
                const tens1 = getTensWeight(s1.selectorList);
                const tens2 = getTensWeight(s2.selectorList);
                if (tens1 !== tens2) return tens1 - tens2;
                const ones1 = getOnesWeight(s1.selectorList);
                const ones2 = getOnesWeight(s2.selectorList);
                return ones1 - ones2;
            }));
        }
        function getHundredsWeight(selectors) {
            return selectors.reduce(((pre, cur) => pre + (cur.id ? 1 : 0)), 0);
        }
        function getTensWeight(selectors) {
            return selectors.reduce(((pre, cur) => pre + cur.class.length + cur.attrs.length), 0);
        }
        function getOnesWeight(selectors) {
            return selectors.reduce(((pre, cur) => pre + (cur.tag ? 1 : 0)), 0);
        }
        function makeMap(str, expectsLowerCase) {
            const map = Object.create(null);
            const list = str.split(",");
            for (let i = 0; i < list.length; i++) {
                map[list[i]] = true;
            }
            return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];
        }
        const specialMiniElements = {
            img: "image",
            iframe: "web-view"
        };
        const internalCompsList = Object.keys(_tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.rD).map((i => i.toLowerCase())).join(",");
        const isMiniElements = makeMap(internalCompsList, true);
        const isInlineElements = makeMap("a,i,abbr,iframe,select,acronym,slot,small,span,bdi,kbd,strong,big,map,sub,sup,br,mark,mark,meter,template,canvas,textarea,cite,object,time,code,output,u,data,picture,tt,datalist,var,dfn,del,q,em,s,embed,samp,b", true);
        const isBlockElements = makeMap("address,fieldset,li,article,figcaption,main,aside,figure,nav,blockquote,footer,ol,details,form,p,dialog,h1,h2,h3,h4,h5,h6,pre,dd,header,section,div,hgroup,table,dl,hr,ul,dt", true);
        const closingTagAncestorBreakers = {
            li: [ "ul", "ol", "menu" ],
            dt: [ "dl" ],
            dd: [ "dl" ],
            tbody: [ "table" ],
            thead: [ "table" ],
            tfoot: [ "table" ],
            tr: [ "table" ],
            td: [ "table" ]
        };
        function hasTerminalParent(tagName, stack) {
            const tagParents = closingTagAncestorBreakers[tagName];
            if (tagParents) {
                let currentIndex = stack.length - 1;
                while (currentIndex >= 0) {
                    const parentTagName = stack[currentIndex].tagName;
                    if (parentTagName === tagName) {
                        break;
                    }
                    if (tagParents && tagParents.includes(parentTagName)) {
                        return true;
                    }
                    currentIndex--;
                }
            }
            return false;
        }
        function getTagName(tag) {
            if (options.html.renderHTMLTag) {
                return tag;
            }
            if (specialMiniElements[tag]) {
                return specialMiniElements[tag];
            } else if (isMiniElements(tag)) {
                return tag;
            } else if (isBlockElements(tag)) {
                return "view";
            } else if (isInlineElements(tag)) {
                return "text";
            }
            return "view";
        }
        function splitEqual(str) {
            const sep = "=";
            const idx = str.indexOf(sep);
            if (idx === -1) return [ str ];
            const key = str.slice(0, idx).trim();
            const value = str.slice(idx + sep.length).trim();
            return [ key, value ];
        }
        function format(children, document, styleOptions, parent) {
            return children.filter((child => {
                if (child.type === "comment") {
                    return false;
                } else if (child.type === "text") {
                    return child.content !== "";
                }
                return true;
            })).map((child => {
                if (child.type === "text") {
                    let text = document.createTextNode(child.content);
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(options.html.transformText)) {
                        text = options.html.transformText(text, child);
                    }
                    parent === null || parent === void 0 ? void 0 : parent.appendChild(text);
                    return text;
                }
                const el = document.createElement(getTagName(child.tagName));
                el.h5tagName = child.tagName;
                parent === null || parent === void 0 ? void 0 : parent.appendChild(el);
                if (!options.html.renderHTMLTag) {
                    el.className = \`h5-\${child.tagName}\`;
                }
                for (let i = 0; i < child.attributes.length; i++) {
                    const attr = child.attributes[i];
                    const [key, value] = splitEqual(attr);
                    if (key === "class") {
                        el.className += " " + unquote(value);
                    } else if (key[0] === "o" && key[1] === "n") {
                        continue;
                    } else {
                        el.setAttribute(key, value == null ? true : unquote(value));
                    }
                }
                const {styleTagParser: styleTagParser, descendantList: descendantList} = styleOptions;
                const list = descendantList.slice();
                const style = styleTagParser.matchStyle(child.tagName, el, list);
                el.setAttribute("style", style + el.style.cssText);
                format(child.children, document, {
                    styleTagParser: styleTagParser,
                    descendantList: list
                }, el);
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(options.html.transformElement)) {
                    return options.html.transformElement(el, child);
                }
                return el;
            }));
        }
        function parser(html, document) {
            const styleTagParser = new StyleTagParser;
            html = styleTagParser.extractStyle(html);
            const tokens = new Scaner(html).scan();
            const root = {
                tagName: "",
                children: [],
                type: "element",
                attributes: []
            };
            const state = {
                tokens: tokens,
                options: options,
                cursor: 0,
                stack: [ root ]
            };
            parse(state);
            return format(root.children, document, {
                styleTagParser: styleTagParser,
                descendantList: Array(styleTagParser.styles.length).fill(0)
            });
        }
        function parse(state) {
            const {tokens: tokens, stack: stack} = state;
            let {cursor: cursor} = state;
            const len = tokens.length;
            let nodes = stack[stack.length - 1].children;
            while (cursor < len) {
                const token = tokens[cursor];
                if (token.type !== "tag-start") {
                    nodes.push(token);
                    cursor++;
                    continue;
                }
                const tagToken = tokens[++cursor];
                cursor++;
                const tagName = tagToken.content.toLowerCase();
                if (token.close) {
                    let index = stack.length;
                    let shouldRewind = false;
                    while (--index > -1) {
                        if (stack[index].tagName === tagName) {
                            shouldRewind = true;
                            break;
                        }
                    }
                    while (cursor < len) {
                        const endToken = tokens[cursor];
                        if (endToken.type !== "tag-end") break;
                        cursor++;
                    }
                    if (shouldRewind) {
                        stack.splice(index);
                        break;
                    } else {
                        continue;
                    }
                }
                const isClosingTag = options.html.closingElements.has(tagName);
                let shouldRewindToAutoClose = isClosingTag;
                if (shouldRewindToAutoClose) {
                    shouldRewindToAutoClose = !hasTerminalParent(tagName, stack);
                }
                if (shouldRewindToAutoClose) {
                    let currentIndex = stack.length - 1;
                    while (currentIndex > 0) {
                        if (tagName === stack[currentIndex].tagName) {
                            stack.splice(currentIndex);
                            const previousIndex = currentIndex - 1;
                            nodes = stack[previousIndex].children;
                            break;
                        }
                        currentIndex = currentIndex - 1;
                    }
                }
                const attributes = [];
                let attrToken;
                while (cursor < len) {
                    attrToken = tokens[cursor];
                    if (attrToken.type === "tag-end") break;
                    attributes.push(attrToken.content);
                    cursor++;
                }
                cursor++;
                const children = [];
                const element = {
                    type: "element",
                    tagName: tagToken.content,
                    attributes: attributes,
                    children: children
                };
                nodes.push(element);
                const hasChildren = !(attrToken.close || options.html.voidElements.has(tagName));
                if (hasChildren) {
                    stack.push({
                        tagName: tagName,
                        children: children
                    });
                    const innerState = {
                        tokens: tokens,
                        cursor: cursor,
                        stack: stack
                    };
                    parse(innerState);
                    cursor = innerState.cursor;
                }
            }
            state.cursor = cursor;
        }
        options.html = {
            skipElements: new Set([ "style", "script" ]),
            voidElements: new Set([ "!doctype", "area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr" ]),
            closingElements: new Set([ "html", "head", "body", "p", "dt", "dd", "li", "option", "thead", "th", "tbody", "tr", "td", "tfoot", "colgroup" ]),
            renderHTMLTag: false
        };
        function setInnerHTML(element, html) {
            while (element.firstChild) {
                element.removeChild(element.firstChild);
            }
            const children = parser(html, element.ownerDocument);
            for (let i = 0; i < children.length; i++) {
                element.appendChild(children[i]);
            }
        }
        function getBoundingClientRectImpl() {
            if (!options.miniGlobal) return Promise.resolve(null);
            return new Promise((resolve => {
                const query = options.miniGlobal.createSelectorQuery();
                query.select(\`#\${this.uid}\`).boundingClientRect((res => {
                    resolve(res);
                })).exec();
            }));
        }
        function getTemplateContent(ctx) {
            if (ctx.nodeName === "template") {
                const document = ctx.ownerDocument;
                const content = document.createElement(DOCUMENT_FRAGMENT);
                content.childNodes = ctx.childNodes;
                ctx.childNodes = [ content ];
                content.parentNode = ctx;
                content.childNodes.forEach((nodes => {
                    nodes.parentNode = content;
                }));
                return content;
            }
        }
        function insertAdjacentHTML(position, html) {
            var _a, _b;
            const parsedNodes = parser(html, this.ownerDocument);
            for (let i = 0; i < parsedNodes.length; i++) {
                const n = parsedNodes[i];
                switch (position) {
                  case "beforebegin":
                    (_a = this.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(n, this);
                    break;

                  case "afterbegin":
                    if (this.hasChildNodes()) {
                        this.insertBefore(n, this.childNodes[0]);
                    } else {
                        this.appendChild(n);
                    }
                    break;

                  case "beforeend":
                    this.appendChild(n);
                    break;

                  case "afterend":
                    (_b = this.parentNode) === null || _b === void 0 ? void 0 : _b.appendChild(n);
                    break;
                }
            }
        }
        function cloneNode(isDeep = false) {
            const document = this.ownerDocument;
            let newNode;
            if (this.nodeType === 1) {
                newNode = document.createElement(this.nodeName);
            } else if (this.nodeType === 3) {
                newNode = document.createTextNode("");
            }
            for (const key in this) {
                const value = this[key];
                if ([ PROPS, DATASET ].includes(key) && typeof value === OBJECT) {
                    newNode[key] = Object.assign({}, value);
                } else if (key === "_value") {
                    newNode[key] = value;
                } else if (key === STYLE) {
                    newNode.style._value = Object.assign({}, value._value);
                    newNode.style._usedStyleProp = new Set(Array.from(value._usedStyleProp));
                }
            }
            if (isDeep) {
                newNode.childNodes = this.childNodes.map((node => node.cloneNode(true)));
            }
            return newNode;
        }
        function contains(node) {
            let isContains = false;
            this.childNodes.some((childNode => {
                const {uid: uid} = childNode;
                if (uid === node.uid || uid === node.id || childNode.contains(node)) {
                    isContains = true;
                    return true;
                }
            }));
            return isContains;
        }
        if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.gl)()) {
            if (true) {
                TaroNode.extend("innerHTML", {
                    set(html) {
                        setInnerHTML.call(this, this, html);
                    },
                    get() {
                        return "";
                    }
                });
                if (false) {}
            }
            if (false) {}
            if (false) {}
            if (false) {}
            if (false) {}
        }
        class TaroEvent {
            constructor(type, opts, event) {
                this._stop = false;
                this._end = false;
                this.defaultPrevented = false;
                this.button = 0;
                this.timeStamp = Date.now();
                this.type = type.toLowerCase();
                this.mpEvent = event;
                this.bubbles = Boolean(opts && opts.bubbles);
                this.cancelable = Boolean(opts && opts.cancelable);
            }
            stopPropagation() {
                this._stop = true;
            }
            stopImmediatePropagation() {
                this._end = this._stop = true;
            }
            preventDefault() {
                this.defaultPrevented = true;
            }
            get target() {
                var _a, _b;
                const cacheTarget = this.cacheTarget;
                if (!cacheTarget) {
                    const target = Object.create(((_a = this.mpEvent) === null || _a === void 0 ? void 0 : _a.target) || null);
                    const element = env.document.getElementById(target.id);
                    target.dataset = element !== null ? element.dataset : _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kT;
                    for (const key in (_b = this.mpEvent) === null || _b === void 0 ? void 0 : _b.detail) {
                        target[key] = this.mpEvent.detail[key];
                    }
                    this.cacheTarget = target;
                    return target;
                } else {
                    return cacheTarget;
                }
            }
            get currentTarget() {
                var _a, _b, _c, _d;
                const cacheCurrentTarget = this.cacheCurrentTarget;
                if (!cacheCurrentTarget) {
                    const doc = env.document;
                    const currentTarget = Object.create(((_a = this.mpEvent) === null || _a === void 0 ? void 0 : _a.currentTarget) || null);
                    const element = doc.getElementById(currentTarget.id);
                    const targetElement = doc.getElementById(((_c = (_b = this.mpEvent) === null || _b === void 0 ? void 0 : _b.target) === null || _c === void 0 ? void 0 : _c.id) || null);
                    if (element === null || element && element === targetElement) {
                        this.cacheCurrentTarget = this.target;
                        return this.target;
                    }
                    currentTarget.dataset = element.dataset;
                    for (const key in (_d = this.mpEvent) === null || _d === void 0 ? void 0 : _d.detail) {
                        currentTarget[key] = this.mpEvent.detail[key];
                    }
                    this.cacheCurrentTarget = currentTarget;
                    return currentTarget;
                } else {
                    return cacheCurrentTarget;
                }
            }
        }
        function createEvent(event, node) {
            if (typeof event === "string") {
                return new TaroEvent(event, {
                    bubbles: true,
                    cancelable: true
                });
            }
            const domEv = new TaroEvent(event.type, {
                bubbles: true,
                cancelable: true
            }, event);
            for (const key in event) {
                if (key === CURRENT_TARGET || key === TARGET || key === TYPE || key === TIME_STAMP) {
                    continue;
                } else {
                    domEv[key] = event[key];
                }
            }
            if (domEv.type === CONFIRM && (node === null || node === void 0 ? void 0 : node.nodeName) === INPUT) {
                domEv[KEY_CODE] = 13;
            }
            return domEv;
        }
        const eventsBatch = {};
        function getEventCBResult(event) {
            const result = event[EVENT_CALLBACK_RESULT];
            if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(result)) {
                delete event[EVENT_CALLBACK_RESULT];
            }
            return result;
        }
        function eventHandler(event) {
            var _a, _b;
            event.type === undefined && Object.defineProperty(event, "type", {
                value: event._type
            });
            event.detail === undefined && Object.defineProperty(event, "detail", {
                value: event._detail || Object.assign({}, event)
            });
            event.currentTarget = event.currentTarget || event.target || Object.assign({}, event);
            _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("modifyMpEventImpl", event);
            const currentTarget = event.currentTarget;
            const id = ((_a = currentTarget.dataset) === null || _a === void 0 ? void 0 : _a.sid) || currentTarget.id || ((_b = event.detail) === null || _b === void 0 ? void 0 : _b.id) || "";
            const node = env.document.getElementById(id);
            if (node) {
                const dispatch = () => {
                    const e = createEvent(event, node);
                    _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("modifyTaroEvent", e, node);
                    _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("dispatchTaroEvent", e, node);
                    _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("dispatchTaroEventFinish", e, node);
                };
                if (_tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.isExist("batchedEventUpdates")) {
                    const type = event.type;
                    if (!_tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("isBubbleEvents", type) || !isParentBinded(node, type) || type === TOUCHMOVE && !!node.props.catchMove) {
                        _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("batchedEventUpdates", (() => {
                            if (eventsBatch[type]) {
                                eventsBatch[type].forEach((fn => fn()));
                                delete eventsBatch[type];
                            }
                            dispatch();
                        }));
                        return getEventCBResult(event);
                    } else {
                        (eventsBatch[type] || (eventsBatch[type] = [])).push(dispatch);
                    }
                } else {
                    dispatch();
                    return getEventCBResult(event);
                }
            }
        }
        class FormElement extends TaroElement {
            get type() {
                var _a;
                return (_a = this.props[TYPE]) !== null && _a !== void 0 ? _a : "";
            }
            set type(val) {
                this.setAttribute(TYPE, val);
            }
            get value() {
                const val = this.props[VALUE];
                return val == null ? "" : val;
            }
            set value(val) {
                this.setAttribute(VALUE, val);
            }
            dispatchEvent(event) {
                if (event.mpEvent) {
                    const val = event.mpEvent.detail.value;
                    if (event.type === CHANGE) {
                        this.props.value = val;
                    } else if (event.type === INPUT) {
                        this.value = val;
                    }
                }
                return super.dispatchEvent(event);
            }
        }
        class Performance {
            constructor() {
                this.recorder = new Map;
            }
            start(id) {
                if (!options.debug) {
                    return;
                }
                this.recorder.set(id, Date.now());
            }
            stop(id) {
                if (!options.debug) {
                    return;
                }
                const now = Date.now();
                const prev = this.recorder.get(id);
                this.recorder.delete(id);
                const time = now - prev;
                console.log(\`\${id} \\u65f6\\u957f\\uff1a \${time}ms\`);
            }
        }
        const perf = new Performance;
        function findCustomWrapper(root, dataPathArr) {
            const list = dataPathArr.slice(1);
            let currentData = root;
            let customWrapper;
            let splitedPath = "";
            list.some(((item, i) => {
                const key = item.replace(/^\\[(.+)\\]$/, "$1").replace(/\\bcn\\b/g, "childNodes");
                currentData = currentData[key];
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(currentData)) {
                    currentData = currentData.filter((el => !isComment(el)));
                }
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(currentData)) return true;
                if (currentData.nodeName === CUSTOM_WRAPPER) {
                    const res = customWrapperCache.get(currentData.sid);
                    if (res) {
                        customWrapper = res;
                        splitedPath = dataPathArr.slice(i + 2).join(".");
                    }
                }
            }));
            if (customWrapper) {
                return {
                    customWrapper: customWrapper,
                    splitedPath: splitedPath
                };
            }
        }
        class TaroRootElement extends TaroElement {
            constructor() {
                super();
                this.updatePayloads = [];
                this.updateCallbacks = [];
                this.pendingUpdate = false;
                this.ctx = null;
                this.nodeName = ROOT_STR;
                this.tagName = ROOT_STR.toUpperCase();
            }
            get _path() {
                return ROOT_STR;
            }
            get _root() {
                return this;
            }
            enqueueUpdate(payload) {
                this.updatePayloads.push(payload);
                if (!this.pendingUpdate && this.ctx) {
                    this.performUpdate();
                }
            }
            performUpdate(initRender = false, prerender) {
                this.pendingUpdate = true;
                const ctx = this.ctx;
                setTimeout((() => {
                    const setDataMark = \`\${SET_DATA} \\u5f00\\u59cb\\u65f6\\u95f4\\u6233 \${Date.now()}\`;
                    perf.start(setDataMark);
                    const data = Object.create(null);
                    const resetPaths = new Set(initRender ? [ "root.cn.[0]", "root.cn[0]" ] : []);
                    while (this.updatePayloads.length > 0) {
                        const {path: path, value: value} = this.updatePayloads.shift();
                        if (path.endsWith("cn")) {
                            resetPaths.add(path);
                        }
                        data[path] = value;
                    }
                    for (const path in data) {
                        resetPaths.forEach((p => {
                            if (path.includes(p) && path !== p) {
                                delete data[path];
                            }
                        }));
                        const value = data[path];
                        if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(value)) {
                            data[path] = value();
                        }
                    }
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(prerender)) return prerender(data);
                    this.pendingUpdate = false;
                    let normalUpdate = {};
                    const customWrapperMap = new Map;
                    if (initRender) {
                        normalUpdate = data;
                    } else {
                        for (const p in data) {
                            const dataPathArr = p.split(".");
                            const found = findCustomWrapper(this, dataPathArr);
                            if (found) {
                                const {customWrapper: customWrapper, splitedPath: splitedPath} = found;
                                customWrapperMap.set(customWrapper, Object.assign(Object.assign({}, customWrapperMap.get(customWrapper) || {}), {
                                    [\`i.\${splitedPath}\`]: data[p]
                                }));
                            } else {
                                normalUpdate[p] = data[p];
                            }
                        }
                    }
                    const customWrapperCount = customWrapperMap.size;
                    const isNeedNormalUpdate = Object.keys(normalUpdate).length > 0;
                    const updateArrLen = customWrapperCount + (isNeedNormalUpdate ? 1 : 0);
                    let executeTime = 0;
                    const cb = () => {
                        if (++executeTime === updateArrLen) {
                            perf.stop(setDataMark);
                            this.flushUpdateCallback();
                            initRender && perf.stop(PAGE_INIT);
                        }
                    };
                    if (customWrapperCount) {
                        customWrapperMap.forEach(((data, ctx) => {
                            if (false) {}
                            ctx.setData(data, cb);
                        }));
                    }
                    if (isNeedNormalUpdate) {
                        if (false) {}
                        ctx.setData(normalUpdate, cb);
                    }
                }), 0);
            }
            enqueueUpdateCallback(cb, ctx) {
                this.updateCallbacks.push((() => {
                    ctx ? cb.call(ctx) : cb();
                }));
            }
            flushUpdateCallback() {
                const updateCallbacks = this.updateCallbacks;
                if (!updateCallbacks.length) return;
                const copies = updateCallbacks.slice(0);
                this.updateCallbacks.length = 0;
                for (let i = 0; i < copies.length; i++) {
                    copies[i]();
                }
            }
        }
        class TaroText extends TaroNode {
            constructor(value) {
                super();
                this.nodeType = 3;
                this.nodeName = "#text";
                this._value = value;
            }
            set textContent(text) {
                MutationObserver.record({
                    target: this,
                    type: "characterData",
                    oldValue: this._value
                });
                this._value = text;
                this.enqueueUpdate({
                    path: \`\${this._path}.\${"v"}\`,
                    value: text
                });
            }
            get textContent() {
                return this._value;
            }
            set nodeValue(text) {
                this.textContent = text;
            }
            get nodeValue() {
                return this._value;
            }
            set data(text) {
                this.textContent = text;
            }
            get data() {
                return this._value;
            }
        }
        function __classPrivateFieldGet(receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        }
        function __classPrivateFieldSet(receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), 
            value;
        }
        var _URLSearchParams_dict;
        const findReg = /[!'()~]|%20|%00/g;
        const plusReg = /\\+/g;
        const replaceCharMap = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+",
            "%00": "\\0"
        };
        function replacer(match) {
            return replaceCharMap[match];
        }
        function appendTo(dict, name, value) {
            const res = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(value) ? value.join(",") : value;
            if (name in dict) dict[name].push(res); else dict[name] = [ res ];
        }
        function addEach(value, key) {
            appendTo(this, key, value);
        }
        function decode(str) {
            return decodeURIComponent(str.replace(plusReg, " "));
        }
        function encode(str) {
            return encodeURIComponent(str).replace(findReg, replacer);
        }
        class URLSearchParams {
            constructor(query) {
                _URLSearchParams_dict.set(this, Object.create(null));
                query !== null && query !== void 0 ? query : query = "";
                const dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                if (typeof query === "string") {
                    if (query.charAt(0) === "?") {
                        query = query.slice(1);
                    }
                    for (let pairs = query.split("&"), i = 0, length = pairs.length; i < length; i++) {
                        const value = pairs[i];
                        const index = value.indexOf("=");
                        if (index > -1) {
                            appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));
                        } else if (value.length) {
                            appendTo(dict, decode(value), "");
                        }
                    }
                } else {
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(query)) {
                        for (let i = 0, length = query.length; i < length; i++) {
                            const value = query[i];
                            appendTo(dict, value[0], value[1]);
                        }
                    } else if (query.forEach) {
                        query.forEach(addEach, dict);
                    } else {
                        for (const key in query) {
                            appendTo(dict, key, query[key]);
                        }
                    }
                }
            }
            append(name, value) {
                appendTo(__classPrivateFieldGet(this, _URLSearchParams_dict, "f"), name, value);
            }
            delete(name) {
                delete __classPrivateFieldGet(this, _URLSearchParams_dict, "f")[name];
            }
            get(name) {
                const dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                return name in dict ? dict[name][0] : null;
            }
            getAll(name) {
                const dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                return name in dict ? dict[name].slice(0) : [];
            }
            has(name) {
                return name in __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
            }
            keys() {
                return Object.keys(__classPrivateFieldGet(this, _URLSearchParams_dict, "f"));
            }
            set(name, value) {
                __classPrivateFieldGet(this, _URLSearchParams_dict, "f")[name] = [ "" + value ];
            }
            forEach(callback, thisArg) {
                const dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                Object.getOwnPropertyNames(dict).forEach((function(name) {
                    dict[name].forEach((function(value) {
                        callback.call(thisArg, value, name, this);
                    }), this);
                }), this);
            }
            toJSON() {
                return {};
            }
            toString() {
                const dict = __classPrivateFieldGet(this, _URLSearchParams_dict, "f");
                const query = [];
                for (const key in dict) {
                    const name = encode(key);
                    for (let i = 0, value = dict[key]; i < value.length; i++) {
                        query.push(name + "=" + encode(value[i]));
                    }
                }
                return query.join("&");
            }
        }
        _URLSearchParams_dict = new WeakMap;
        var _URL_hash, _URL_hostname, _URL_pathname, _URL_port, _URL_protocol, _URL_search;
        class URL {
            static createObjectURL() {
                throw new Error("Oops, not support URL.createObjectURL() in miniprogram.");
            }
            static revokeObjectURL() {
                throw new Error("Oops, not support URL.revokeObjectURL() in miniprogram.");
            }
            constructor(url, base) {
                _URL_hash.set(this, "");
                _URL_hostname.set(this, "");
                _URL_pathname.set(this, "");
                _URL_port.set(this, "");
                _URL_protocol.set(this, "");
                _URL_search.set(this, void 0);
                if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(url)) url = String(url);
                const parseResult = parseUrlBase(url, base);
                const {hash: hash, hostname: hostname, pathname: pathname, port: port, protocol: protocol, search: search} = parseResult;
                __classPrivateFieldSet(this, _URL_hash, hash, "f");
                __classPrivateFieldSet(this, _URL_hostname, hostname, "f");
                __classPrivateFieldSet(this, _URL_pathname, pathname || "/", "f");
                __classPrivateFieldSet(this, _URL_port, port, "f");
                __classPrivateFieldSet(this, _URL_protocol, protocol, "f");
                __classPrivateFieldSet(this, _URL_search, new URLSearchParams(search), "f");
            }
            get protocol() {
                return __classPrivateFieldGet(this, _URL_protocol, "f");
            }
            set protocol(val) {
                (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val) && __classPrivateFieldSet(this, _URL_protocol, val.trim(), "f");
            }
            get host() {
                return this.hostname + (this.port ? ":" + this.port : "");
            }
            set host(val) {
                if (val && (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) {
                    val = val.trim();
                    const {hostname: hostname, port: port} = parseUrl(\`//\${val}\`);
                    this.hostname = hostname;
                    this.port = port;
                }
            }
            get hostname() {
                return __classPrivateFieldGet(this, _URL_hostname, "f");
            }
            set hostname(val) {
                val && (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val) && __classPrivateFieldSet(this, _URL_hostname, val.trim(), "f");
            }
            get port() {
                return __classPrivateFieldGet(this, _URL_port, "f");
            }
            set port(val) {
                (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val) && __classPrivateFieldSet(this, _URL_port, val.trim(), "f");
            }
            get pathname() {
                return __classPrivateFieldGet(this, _URL_pathname, "f");
            }
            set pathname(val) {
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) {
                    val = val.trim();
                    const HEAD_REG = /^(\\/|\\.\\/|\\.\\.\\/)/;
                    let temp = val;
                    while (HEAD_REG.test(temp)) {
                        temp = temp.replace(HEAD_REG, "");
                    }
                    if (temp) __classPrivateFieldSet(this, _URL_pathname, "/" + temp, "f"); else __classPrivateFieldSet(this, _URL_pathname, "/", "f");
                }
            }
            get search() {
                const val = __classPrivateFieldGet(this, _URL_search, "f").toString();
                return val.length === 0 || val.startsWith("?") ? val : \`?\${val}\`;
            }
            set search(val) {
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) {
                    val = val.trim();
                    __classPrivateFieldSet(this, _URL_search, new URLSearchParams(val), "f");
                }
            }
            get hash() {
                return __classPrivateFieldGet(this, _URL_hash, "f");
            }
            set hash(val) {
                if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) {
                    val = val.trim();
                    if (val) __classPrivateFieldSet(this, _URL_hash, val.startsWith("#") ? val : \`#\${val}\`, "f"); else __classPrivateFieldSet(this, _URL_hash, "", "f");
                }
            }
            get href() {
                return \`\${this.protocol}//\${this.host}\${this.pathname}\${this.search}\${this.hash}\`;
            }
            set href(val) {
                if (val && (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) {
                    val = val.trim();
                    const {protocol: protocol, hostname: hostname, port: port, hash: hash, search: search, pathname: pathname} = parseUrl(val);
                    this.protocol = protocol;
                    this.hostname = hostname;
                    this.pathname = pathname;
                    this.port = port;
                    this.hash = hash;
                    this.search = search;
                }
            }
            get origin() {
                return \`\${this.protocol}//\${this.host}\`;
            }
            set origin(val) {
                if (val && (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) {
                    val = val.trim();
                    const {protocol: protocol, hostname: hostname, port: port} = parseUrl(val);
                    this.protocol = protocol;
                    this.hostname = hostname;
                    this.port = port;
                }
            }
            get searchParams() {
                return __classPrivateFieldGet(this, _URL_search, "f");
            }
            toString() {
                return this.href;
            }
            toJSON() {
                return this.toString();
            }
            _toRaw() {
                return {
                    protocol: this.protocol,
                    port: this.port,
                    host: this.host,
                    hostname: this.hostname,
                    pathname: this.pathname,
                    hash: this.hash,
                    search: this.search,
                    origin: this.origin,
                    href: this.href
                };
            }
        }
        _URL_hash = new WeakMap, _URL_hostname = new WeakMap, _URL_pathname = new WeakMap, 
        _URL_port = new WeakMap, _URL_protocol = new WeakMap, _URL_search = new WeakMap;
        function parseUrl(url = "") {
            const result = {
                href: "",
                origin: "",
                protocol: "",
                hostname: "",
                host: "",
                port: "",
                pathname: "",
                search: "",
                hash: ""
            };
            if (!url || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(url)) return result;
            url = url.trim();
            const PATTERN = /^(([^:/?#]+):)?\\/\\/(([^/?#]+):(.+)@)?([^/?#:]*)(:(\\d+))?([^?#]*)(\\?([^#]*))?(#(.*))?/;
            const matches = url.match(PATTERN);
            if (!matches) return result;
            result.protocol = matches[1] || "https:";
            result.hostname = matches[6] || "taro.com";
            result.port = matches[8] || "";
            result.pathname = matches[9] || "/";
            result.search = matches[10] || "";
            result.hash = matches[12] || "";
            result.href = url;
            result.origin = result.protocol + "//" + result.hostname;
            result.host = result.hostname + (result.port ? \`:\${result.port}\` : "");
            return result;
        }
        function parseUrlBase(url, base) {
            const VALID_URL = /^(https?:)\\/\\//i;
            let fullUrl = "";
            let parsedBase = null;
            if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(base)) {
                base = String(base).trim();
                if (!VALID_URL.test(base)) throw new TypeError(\`Failed to construct 'URL': Invalid base URL\`);
                parsedBase = parseUrl(base);
            }
            url = String(url).trim();
            if (VALID_URL.test(url)) {
                fullUrl = url;
            } else if (parsedBase) {
                if (url) {
                    if (url.startsWith("//")) {
                        fullUrl = parsedBase.protocol + url;
                    } else {
                        fullUrl = parsedBase.origin + (url.startsWith("/") ? url : \`/\${url}\`);
                    }
                } else {
                    fullUrl = parsedBase.href;
                }
            } else {
                throw new TypeError(\`Failed to construct 'URL': Invalid URL\`);
            }
            return parseUrl(fullUrl);
        }
        class AnchorElement extends TaroElement {
            get href() {
                var _a;
                return (_a = this.props["href"]) !== null && _a !== void 0 ? _a : "";
            }
            set href(val) {
                this.setAttribute("href", val);
            }
            get protocol() {
                var _a;
                return (_a = this.props["protocol"]) !== null && _a !== void 0 ? _a : "";
            }
            get host() {
                var _a;
                return (_a = this.props["host"]) !== null && _a !== void 0 ? _a : "";
            }
            get search() {
                var _a;
                return (_a = this.props["search"]) !== null && _a !== void 0 ? _a : "";
            }
            get hash() {
                var _a;
                return (_a = this.props["hash"]) !== null && _a !== void 0 ? _a : "";
            }
            get hostname() {
                var _a;
                return (_a = this.props["hostname"]) !== null && _a !== void 0 ? _a : "";
            }
            get port() {
                var _a;
                return (_a = this.props["port"]) !== null && _a !== void 0 ? _a : "";
            }
            get pathname() {
                var _a;
                return (_a = this.props["pathname"]) !== null && _a !== void 0 ? _a : "";
            }
            setAttribute(qualifiedName, value) {
                if (qualifiedName === "href") {
                    const willSetAttr = parseUrl(value);
                    for (const k in willSetAttr) {
                        super.setAttribute(k, willSetAttr[k]);
                    }
                } else {
                    super.setAttribute(qualifiedName, value);
                }
            }
        }
        class CustomWrapperElement extends TaroElement {}
        class TaroDocument extends TaroElement {
            constructor() {
                super();
                this.createEvent = createEvent;
                this.nodeType = 9;
                this.nodeName = DOCUMENT_ELEMENT_NAME;
            }
            createElement(type) {
                const nodeName = type.toLowerCase();
                let element;
                switch (true) {
                  case nodeName === ROOT_STR:
                    element = new TaroRootElement;
                    return element;

                  case _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__._c.has(nodeName):
                    element = new FormElement;
                    break;

                  case nodeName === A:
                    element = new AnchorElement;
                    break;

                  case nodeName === CUSTOM_WRAPPER:
                    element = new CustomWrapperElement;
                    break;

                  default:
                    element = new TaroElement;
                    break;
                }
                element.nodeName = nodeName;
                element.tagName = type.toUpperCase();
                return element;
            }
            createElementNS(_svgNS, type) {
                return this.createElement(type);
            }
            createTextNode(text) {
                return new TaroText(text);
            }
            getElementById(id) {
                const el = eventSource.get(id);
                return (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(el) ? null : el;
            }
            querySelector(query) {
                if (/^#/.test(query)) {
                    return this.getElementById(query.slice(1));
                }
                return null;
            }
            querySelectorAll() {
                return [];
            }
            createComment() {
                const textnode = new TaroText("");
                textnode.nodeName = COMMENT;
                return textnode;
            }
            get defaultView() {
                return env.window;
            }
        }
        let document$1;
        if (true && !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.gl)()) {
            function createDocument() {
                const doc = new TaroDocument;
                const documentCreateElement = doc.createElement.bind(doc);
                const html = documentCreateElement(HTML);
                const head = documentCreateElement(HEAD);
                const body = documentCreateElement(BODY);
                const app = documentCreateElement(APP);
                app.id = APP;
                const container = documentCreateElement(CONTAINER);
                doc.appendChild(html);
                html.appendChild(head);
                html.appendChild(body);
                body.appendChild(container);
                container.appendChild(app);
                doc.documentElement = html;
                doc.head = head;
                doc.body = body;
                return doc;
            }
            document$1 = env.document = createDocument();
        } else {
            document$1 = env.document;
        }
        function getComputedStyle(element) {
            return element.style;
        }
        const eventCenter = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getEventCenter", _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zW);
        class RuntimeCache {
            constructor(name) {
                this.cache = new Map;
                this.name = name;
            }
            has(identifier) {
                return this.cache.has(identifier);
            }
            set(identifier, ctx) {
                if (identifier && ctx) {
                    this.cache.set(identifier, ctx);
                }
            }
            get(identifier) {
                if (this.has(identifier)) return this.cache.get(identifier);
            }
            delete(identifier) {
                this.cache.delete(identifier);
            }
        }
        var _History_instances, _History_location, _History_stack, _History_cur, _History_window, _History_reset;
        const cache$1 = new RuntimeCache("history");
        class History extends _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zW {
            constructor(location, options) {
                super();
                _History_instances.add(this);
                _History_location.set(this, void 0);
                _History_stack.set(this, []);
                _History_cur.set(this, 0);
                _History_window.set(this, void 0);
                __classPrivateFieldSet(this, _History_window, options.window, "f");
                __classPrivateFieldSet(this, _History_location, location, "f");
                __classPrivateFieldGet(this, _History_location, "f").on("__record_history__", (href => {
                    var _a;
                    __classPrivateFieldSet(this, _History_cur, (_a = __classPrivateFieldGet(this, _History_cur, "f"), 
                    _a++, _a), "f");
                    __classPrivateFieldSet(this, _History_stack, __classPrivateFieldGet(this, _History_stack, "f").slice(0, __classPrivateFieldGet(this, _History_cur, "f")), "f");
                    __classPrivateFieldGet(this, _History_stack, "f").push({
                        state: null,
                        title: "",
                        url: href
                    });
                }), null);
                __classPrivateFieldGet(this, _History_location, "f").on("__reset_history__", (href => {
                    __classPrivateFieldGet(this, _History_instances, "m", _History_reset).call(this, href);
                }), null);
                this.on(CONTEXT_ACTIONS.INIT, (() => {
                    __classPrivateFieldGet(this, _History_instances, "m", _History_reset).call(this);
                }), null);
                this.on(CONTEXT_ACTIONS.RESTORE, (pageId => {
                    cache$1.set(pageId, {
                        location: __classPrivateFieldGet(this, _History_location, "f"),
                        stack: __classPrivateFieldGet(this, _History_stack, "f").slice(),
                        cur: __classPrivateFieldGet(this, _History_cur, "f")
                    });
                }), null);
                this.on(CONTEXT_ACTIONS.RECOVER, (pageId => {
                    if (cache$1.has(pageId)) {
                        const ctx = cache$1.get(pageId);
                        __classPrivateFieldSet(this, _History_location, ctx.location, "f");
                        __classPrivateFieldSet(this, _History_stack, ctx.stack, "f");
                        __classPrivateFieldSet(this, _History_cur, ctx.cur, "f");
                    }
                }), null);
                this.on(CONTEXT_ACTIONS.DESTORY, (pageId => {
                    cache$1.delete(pageId);
                }), null);
                __classPrivateFieldGet(this, _History_instances, "m", _History_reset).call(this);
            }
            get length() {
                return __classPrivateFieldGet(this, _History_stack, "f").length;
            }
            get state() {
                return __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")].state;
            }
            go(delta) {
                if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.hj)(delta) || isNaN(delta)) return;
                let targetIdx = __classPrivateFieldGet(this, _History_cur, "f") + delta;
                targetIdx = Math.min(Math.max(targetIdx, 0), this.length - 1);
                __classPrivateFieldSet(this, _History_cur, targetIdx, "f");
                __classPrivateFieldGet(this, _History_location, "f").trigger("__set_href_without_history__", __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")].url);
                __classPrivateFieldGet(this, _History_window, "f").trigger("popstate", __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")]);
            }
            back() {
                this.go(-1);
            }
            forward() {
                this.go(1);
            }
            pushState(state, title, url) {
                if (!url || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(url)) return;
                __classPrivateFieldSet(this, _History_stack, __classPrivateFieldGet(this, _History_stack, "f").slice(0, __classPrivateFieldGet(this, _History_cur, "f") + 1), "f");
                __classPrivateFieldGet(this, _History_stack, "f").push({
                    state: state,
                    title: title,
                    url: url
                });
                __classPrivateFieldSet(this, _History_cur, this.length - 1, "f");
                __classPrivateFieldGet(this, _History_location, "f").trigger("__set_href_without_history__", url);
            }
            replaceState(state, title, url) {
                if (!url || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(url)) return;
                __classPrivateFieldGet(this, _History_stack, "f")[__classPrivateFieldGet(this, _History_cur, "f")] = {
                    state: state,
                    title: title,
                    url: url
                };
                __classPrivateFieldGet(this, _History_location, "f").trigger("__set_href_without_history__", url);
            }
            get cache() {
                return cache$1;
            }
        }
        _History_location = new WeakMap, _History_stack = new WeakMap, _History_cur = new WeakMap, 
        _History_window = new WeakMap, _History_instances = new WeakSet, _History_reset = function _History_reset(href = "") {
            __classPrivateFieldSet(this, _History_stack, [ {
                state: null,
                title: "",
                url: href || __classPrivateFieldGet(this, _History_location, "f").href
            } ], "f");
            __classPrivateFieldSet(this, _History_cur, 0, "f");
        };
        const Current = {
            app: null,
            router: null,
            page: null
        };
        const getCurrentInstance = () => Current;
        var _Location_instances, _Location_url, _Location_noCheckUrl, _Location_window, _Location_reset, _Location_getPreValue, _Location_rollBack, _Location_recordHistory, _Location_checkUrlChange;
        const INIT_URL = "https://taro.com";
        const cache = new RuntimeCache("location");
        class Location extends _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zW {
            constructor(options) {
                super();
                _Location_instances.add(this);
                _Location_url.set(this, new URL(INIT_URL));
                _Location_noCheckUrl.set(this, false);
                _Location_window.set(this, void 0);
                __classPrivateFieldSet(this, _Location_window, options.window, "f");
                __classPrivateFieldGet(this, _Location_instances, "m", _Location_reset).call(this);
                this.on("__set_href_without_history__", (href => {
                    __classPrivateFieldSet(this, _Location_noCheckUrl, true, "f");
                    const lastHash = __classPrivateFieldGet(this, _Location_url, "f").hash;
                    __classPrivateFieldGet(this, _Location_url, "f").href = generateFullUrl(href);
                    if (lastHash !== __classPrivateFieldGet(this, _Location_url, "f").hash) {
                        __classPrivateFieldGet(this, _Location_window, "f").trigger("hashchange");
                    }
                    __classPrivateFieldSet(this, _Location_noCheckUrl, false, "f");
                }), null);
                this.on(CONTEXT_ACTIONS.INIT, (() => {
                    __classPrivateFieldGet(this, _Location_instances, "m", _Location_reset).call(this);
                }), null);
                this.on(CONTEXT_ACTIONS.RESTORE, (pageId => {
                    cache.set(pageId, {
                        lastHref: this.href
                    });
                }), null);
                this.on(CONTEXT_ACTIONS.RECOVER, (pageId => {
                    if (cache.has(pageId)) {
                        const ctx = cache.get(pageId);
                        __classPrivateFieldSet(this, _Location_noCheckUrl, true, "f");
                        __classPrivateFieldGet(this, _Location_url, "f").href = ctx.lastHref;
                        __classPrivateFieldSet(this, _Location_noCheckUrl, false, "f");
                    }
                }), null);
                this.on(CONTEXT_ACTIONS.DESTORY, (pageId => {
                    cache.delete(pageId);
                }), null);
            }
            get protocol() {
                return __classPrivateFieldGet(this, _Location_url, "f").protocol;
            }
            set protocol(val) {
                const REG = /^(http|https):$/i;
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val) || !REG.test(val.trim())) return;
                val = val.trim();
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").protocol = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get host() {
                return __classPrivateFieldGet(this, _Location_url, "f").host;
            }
            set host(val) {
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) return;
                val = val.trim();
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").host = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get hostname() {
                return __classPrivateFieldGet(this, _Location_url, "f").hostname;
            }
            set hostname(val) {
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) return;
                val = val.trim();
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").hostname = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get port() {
                return __classPrivateFieldGet(this, _Location_url, "f").port;
            }
            set port(val) {
                const xVal = Number(val = val.trim());
                if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.hj)(xVal) || xVal <= 0) return;
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").port = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get pathname() {
                return __classPrivateFieldGet(this, _Location_url, "f").pathname;
            }
            set pathname(val) {
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) return;
                val = val.trim();
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").pathname = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get search() {
                return __classPrivateFieldGet(this, _Location_url, "f").search;
            }
            set search(val) {
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) return;
                val = val.trim();
                val = val.startsWith("?") ? val : \`?\${val}\`;
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").search = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get hash() {
                return __classPrivateFieldGet(this, _Location_url, "f").hash;
            }
            set hash(val) {
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val)) return;
                val = val.trim();
                val = val.startsWith("#") ? val : \`#\${val}\`;
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").hash = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get href() {
                return __classPrivateFieldGet(this, _Location_url, "f").href;
            }
            set href(val) {
                const REG = /^(http:|https:)?\\/\\/.+/;
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val) || !REG.test(val = val.trim())) return;
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").href = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            get origin() {
                return __classPrivateFieldGet(this, _Location_url, "f").origin;
            }
            set origin(val) {
                const REG = /^(http:|https:)?\\/\\/.+/;
                if (!val || !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(val) || !REG.test(val = val.trim())) return;
                const preValue = __classPrivateFieldGet(this, _Location_instances, "m", _Location_getPreValue).call(this);
                __classPrivateFieldGet(this, _Location_url, "f").origin = val;
                if (__classPrivateFieldGet(this, _Location_instances, "m", _Location_checkUrlChange).call(this, preValue)) __classPrivateFieldGet(this, _Location_instances, "m", _Location_recordHistory).call(this);
            }
            assign() {
                (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.ZK)(true, "\\u5c0f\\u7a0b\\u5e8f\\u73af\\u5883\\u4e2d\\u8c03\\u7528location.assign()\\u65e0\\u6548.");
            }
            reload() {
                (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.ZK)(true, "\\u5c0f\\u7a0b\\u5e8f\\u73af\\u5883\\u4e2d\\u8c03\\u7528location.reload()\\u65e0\\u6548.");
            }
            replace(url) {
                this.trigger("__set_href_without_history__", url);
            }
            toString() {
                return this.href;
            }
            get cache() {
                return cache;
            }
        }
        _Location_url = new WeakMap, _Location_noCheckUrl = new WeakMap, _Location_window = new WeakMap, 
        _Location_instances = new WeakSet, _Location_reset = function _Location_reset() {
            const Current = getCurrentInstance();
            const router = Current.router;
            if (router) {
                const {path: path, params: params} = router;
                const searchArr = Object.keys(params).map((key => \`\${key}=\${params[key]}\`));
                const searchStr = searchArr.length > 0 ? "?" + searchArr.join("&") : "";
                const url = \`\${INIT_URL}\${path.startsWith("/") ? path : "/" + path}\${searchStr}\`;
                __classPrivateFieldSet(this, _Location_url, new URL(url), "f");
                this.trigger("__reset_history__", this.href);
            }
        }, _Location_getPreValue = function _Location_getPreValue() {
            return __classPrivateFieldGet(this, _Location_url, "f")._toRaw();
        }, _Location_rollBack = function _Location_rollBack(href) {
            __classPrivateFieldGet(this, _Location_url, "f").href = href;
        }, _Location_recordHistory = function _Location_recordHistory() {
            this.trigger("__record_history__", this.href);
        }, _Location_checkUrlChange = function _Location_checkUrlChange(preValue) {
            if (__classPrivateFieldGet(this, _Location_noCheckUrl, "f")) {
                return false;
            }
            const {protocol: protocol, hostname: hostname, port: port, pathname: pathname, search: search, hash: hash} = __classPrivateFieldGet(this, _Location_url, "f")._toRaw();
            if (protocol !== preValue.protocol || hostname !== preValue.hostname || port !== preValue.port) {
                __classPrivateFieldGet(this, _Location_instances, "m", _Location_rollBack).call(this, preValue.href);
                return false;
            }
            if (pathname !== preValue.pathname) {
                return true;
            }
            if (search !== preValue.search) {
                return true;
            }
            if (hash !== preValue.hash) {
                __classPrivateFieldGet(this, _Location_window, "f").trigger("hashchange");
                return true;
            }
            __classPrivateFieldGet(this, _Location_instances, "m", _Location_rollBack).call(this, preValue.href);
            return false;
        };
        function generateFullUrl(val = "") {
            const origin = INIT_URL;
            if (/^[/?#]/.test(val)) {
                return origin + val;
            }
            return val;
        }
        const machine = "Macintosh";
        const arch = "Intel Mac OS X 10_14_5";
        const engine = "AppleWebKit/534.36 (KHTML, like Gecko) NodeJS/v4.1.0 Chrome/76.0.3809.132 Safari/534.36";
        const msg = "(" + machine + "; " + arch + ") " + engine;
        const nav = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.gl)() ? env.window.navigator : {
            appCodeName: "Mozilla",
            appName: "Netscape",
            appVersion: "5.0 " + msg,
            cookieEnabled: true,
            mimeTypes: [],
            onLine: true,
            platform: "MacIntel",
            plugins: [],
            product: "Taro",
            productSub: "20030107",
            userAgent: "Mozilla/5.0 " + msg,
            vendor: "Joyent",
            vendorSub: ""
        };
        let now;
        (function() {
            let loadTime;
            if (typeof performance !== "undefined" && performance !== null && performance.now) {
                now = () => performance.now();
            } else if (Date.now) {
                loadTime = Date.now();
                now = () => Date.now() - loadTime;
            } else {
                loadTime = (new Date).getTime();
                now = () => (new Date).getTime() - loadTime;
            }
        })();
        let lastTime = 0;
        const _raf = typeof requestAnimationFrame !== "undefined" && requestAnimationFrame !== null ? requestAnimationFrame : function(callback) {
            const _now = now();
            const nextTime = Math.max(lastTime + 16, _now);
            return setTimeout((function() {
                callback(lastTime = nextTime);
            }), nextTime - _now);
        };
        const _caf = typeof cancelAnimationFrame !== "undefined" && cancelAnimationFrame !== null ? cancelAnimationFrame : function(seed) {
            clearTimeout(seed);
        };
        let window$1;
        if (true && !(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.gl)()) {
            class Window extends _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zW {
                constructor() {
                    super();
                    this.navigator = nav;
                    this.requestAnimationFrame = _raf;
                    this.cancelAnimationFrame = _caf;
                    this.getComputedStyle = getComputedStyle;
                    const globalProperties = [ ...Object.getOwnPropertyNames(__webpack_require__.g || {}), ...Object.getOwnPropertySymbols(__webpack_require__.g || {}) ];
                    globalProperties.forEach((property => {
                        if (property === "atob" || property === "document") return;
                        if (!Object.prototype.hasOwnProperty.call(this, property)) {
                            try {
                                this[property] = __webpack_require__.g[property];
                            } catch (e) {
                                if (false) {}
                            }
                        }
                    }));
                    this.Date || (this.Date = Date);
                    this.location = new Location({
                        window: this
                    });
                    this.history = new History(this.location, {
                        window: this
                    });
                    this.initEvent();
                }
                initEvent() {
                    const _location = this.location;
                    const _history = this.history;
                    this.on(CONTEXT_ACTIONS.INIT, (pageId => {
                        _location.trigger(CONTEXT_ACTIONS.INIT, pageId);
                    }), null);
                    this.on(CONTEXT_ACTIONS.RECOVER, (pageId => {
                        _location.trigger(CONTEXT_ACTIONS.RECOVER, pageId);
                        _history.trigger(CONTEXT_ACTIONS.RECOVER, pageId);
                    }), null);
                    this.on(CONTEXT_ACTIONS.RESTORE, (pageId => {
                        _location.trigger(CONTEXT_ACTIONS.RESTORE, pageId);
                        _history.trigger(CONTEXT_ACTIONS.RESTORE, pageId);
                    }), null);
                    this.on(CONTEXT_ACTIONS.DESTORY, (pageId => {
                        _location.trigger(CONTEXT_ACTIONS.DESTORY, pageId);
                        _history.trigger(CONTEXT_ACTIONS.DESTORY, pageId);
                    }), null);
                }
                get document() {
                    return env.document;
                }
                addEventListener(event, callback) {
                    if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(event)) return;
                    this.on(event, callback, null);
                }
                removeEventListener(event, callback) {
                    if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(event)) return;
                    this.off(event, callback, null);
                }
                setTimeout(...args) {
                    return setTimeout(...args);
                }
                clearTimeout(...args) {
                    return clearTimeout(...args);
                }
            }
            window$1 = env.window = new Window;
        } else {
            window$1 = env.window;
        }
        const location = window$1.location;
        const history = window$1.history;
        class SVGElement extends TaroElement {}
        const instances = new Map;
        const pageId = incrementId();
        const isWeb = (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.gl)();
        function injectPageInstance(inst, id) {
            _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("mergePageInstance", instances.get(id), inst);
            instances.set(id, inst);
        }
        function getPageInstance(id) {
            return instances.get(id);
        }
        function removePageInstance(id) {
            instances.delete(id);
        }
        function addLeadingSlash(path) {
            if (path == null) {
                return "";
            }
            return path.charAt(0) === "/" ? path : "/" + path;
        }
        function safeExecute(path, lifecycle, ...args) {
            const instance = instances.get(path);
            if (instance == null) {
                return;
            }
            const func = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getLifecycle", instance, lifecycle);
            if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kJ)(func)) {
                const res = func.map((fn => fn.apply(instance, args)));
                return res[0];
            }
            if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(func)) {
                return;
            }
            return func.apply(instance, args);
        }
        function stringify(obj) {
            if (obj == null) {
                return "";
            }
            const path = Object.keys(obj).map((key => key + "=" + obj[key])).join("&");
            return path === "" ? path : "?" + path;
        }
        function getPath(id, options) {
            const idx = id.indexOf("?");
            if (isWeb) {
                return \`\${idx > -1 ? id.substring(0, idx) : id}\${stringify((options === null || options === void 0 ? void 0 : options.stamp) ? {
                    stamp: options.stamp
                } : {})}\`;
            } else {
                return \`\${idx > -1 ? id.substring(0, idx) : id}\${stringify(options)}\`;
            }
        }
        function getOnReadyEventKey(path) {
            return path + "." + ON_READY;
        }
        function getOnShowEventKey(path) {
            return path + "." + ON_SHOW;
        }
        function getOnHideEventKey(path) {
            return path + "." + ON_HIDE;
        }
        function createPageConfig(component, pageName, data, pageConfig) {
            const id = pageName !== null && pageName !== void 0 ? pageName : \`taro_page_\${pageId()}\`;
            const [ONLOAD, ONUNLOAD, ONREADY, ONSHOW, ONHIDE, LIFECYCLES, SIDE_EFFECT_LIFECYCLES] = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getMiniLifecycleImpl").page;
            let pageElement = null;
            let unmounting = false;
            let prepareMountList = [];
            function setCurrentRouter(page) {
                const router = isWeb ? page.$taroPath : page.route || page.__route__ || page.$taroPath;
                Current.router = {
                    params: page.$taroParams,
                    path: addLeadingSlash(router),
                    $taroPath: page.$taroPath,
                    onReady: getOnReadyEventKey(id),
                    onShow: getOnShowEventKey(id),
                    onHide: getOnHideEventKey(id)
                };
                if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(page.exitState)) {
                    Current.router.exitState = page.exitState;
                }
            }
            let loadResolver;
            let hasLoaded;
            const config = {
                [ONLOAD](options = {}, cb) {
                    hasLoaded = new Promise((resolve => {
                        loadResolver = resolve;
                    }));
                    perf.start(PAGE_INIT);
                    Current.page = this;
                    this.config = pageConfig || {};
                    const uniqueOptions = Object.assign({}, options, {
                        $taroTimestamp: Date.now()
                    });
                    const $taroPath = this.$taroPath = getPath(id, uniqueOptions);
                    if (isWeb) {
                        config.path = $taroPath;
                    }
                    if (this.$taroParams == null) {
                        this.$taroParams = uniqueOptions;
                    }
                    setCurrentRouter(this);
                    if (!isWeb) {
                        window$1.trigger(CONTEXT_ACTIONS.INIT, $taroPath);
                    }
                    const mount = () => {
                        Current.app.mount(component, $taroPath, (() => {
                            pageElement = env.document.getElementById($taroPath);
                            (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zx)(pageElement !== null, "\\u6ca1\\u6709\\u627e\\u5230\\u9875\\u9762\\u5b9e\\u4f8b\\u3002");
                            safeExecute($taroPath, ON_LOAD, this.$taroParams);
                            loadResolver();
                            if (!isWeb) {
                                pageElement.ctx = this;
                                pageElement.performUpdate(true, cb);
                            } else {
                                (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.mf)(cb) && cb();
                            }
                        }));
                    };
                    if (unmounting) {
                        prepareMountList.push(mount);
                    } else {
                        mount();
                    }
                },
                [ONUNLOAD]() {
                    const $taroPath = this.$taroPath;
                    if (!isWeb) {
                        window$1.trigger(CONTEXT_ACTIONS.DESTORY, $taroPath);
                    }
                    safeExecute($taroPath, ONUNLOAD);
                    unmounting = true;
                    Current.app.unmount($taroPath, (() => {
                        unmounting = false;
                        instances.delete($taroPath);
                        if (pageElement) {
                            pageElement.ctx = null;
                            pageElement = null;
                        }
                        if (prepareMountList.length) {
                            prepareMountList.forEach((fn => fn()));
                            prepareMountList = [];
                        }
                    }));
                },
                [ONREADY]() {
                    hasLoaded.then((() => {
                        safeExecute(this.$taroPath, ON_READY);
                        _raf((() => eventCenter.trigger(getOnReadyEventKey(id))));
                        this.onReady.called = true;
                    }));
                },
                [ONSHOW](options = {}) {
                    hasLoaded.then((() => {
                        Current.page = this;
                        setCurrentRouter(this);
                        if (!isWeb) {
                            window$1.trigger(CONTEXT_ACTIONS.RECOVER, this.$taroPath);
                        }
                        safeExecute(this.$taroPath, ON_SHOW, options);
                        _raf((() => eventCenter.trigger(getOnShowEventKey(id))));
                    }));
                },
                [ONHIDE]() {
                    if (!isWeb) {
                        window$1.trigger(CONTEXT_ACTIONS.RESTORE, this.$taroPath);
                    }
                    if (Current.page === this) {
                        Current.page = null;
                        Current.router = null;
                    }
                    safeExecute(this.$taroPath, ON_HIDE);
                    eventCenter.trigger(getOnHideEventKey(id));
                }
            };
            LIFECYCLES.forEach((lifecycle => {
                config[lifecycle] = function() {
                    return safeExecute(this.$taroPath, lifecycle, ...arguments);
                };
            }));
            SIDE_EFFECT_LIFECYCLES.forEach((lifecycle => {
                var _a;
                if (component[lifecycle] || ((_a = component.prototype) === null || _a === void 0 ? void 0 : _a[lifecycle]) || component[lifecycle.replace(/^on/, "enable")]) {
                    config[lifecycle] = function(...args) {
                        var _a;
                        const target = (_a = args[0]) === null || _a === void 0 ? void 0 : _a.target;
                        if (target === null || target === void 0 ? void 0 : target.id) {
                            const id = target.id;
                            const element = env.document.getElementById(id);
                            if (element) {
                                target.dataset = element.dataset;
                            }
                        }
                        return safeExecute(this.$taroPath, lifecycle, ...args);
                    };
                }
            }));
            config.eh = eventHandler;
            if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(data)) {
                config.data = data;
            }
            _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("modifyPageObject", config);
            return config;
        }
        function createComponentConfig(component, componentName, data) {
            const id = componentName !== null && componentName !== void 0 ? componentName : \`taro_component_\${pageId()}\`;
            let componentElement = null;
            const [ATTACHED, DETACHED] = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getMiniLifecycleImpl").component;
            const config = {
                [ATTACHED]() {
                    var _a;
                    perf.start(PAGE_INIT);
                    const path = getPath(id, {
                        id: ((_a = this.getPageId) === null || _a === void 0 ? void 0 : _a.call(this)) || pageId()
                    });
                    Current.app.mount(component, path, (() => {
                        componentElement = env.document.getElementById(path);
                        (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.zx)(componentElement !== null, "\\u6ca1\\u6709\\u627e\\u5230\\u7ec4\\u4ef6\\u5b9e\\u4f8b\\u3002");
                        this.$taroInstances = instances.get(path);
                        safeExecute(path, ON_LOAD);
                        if (!isWeb) {
                            componentElement.ctx = this;
                            componentElement.performUpdate(true);
                        }
                    }));
                },
                [DETACHED]() {
                    const path = getPath(id, {
                        id: this.getPageId()
                    });
                    Current.app.unmount(path, (() => {
                        instances.delete(path);
                        if (componentElement) {
                            componentElement.ctx = null;
                        }
                    }));
                },
                methods: {
                    eh: eventHandler
                }
            };
            if (!(0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.o8)(data)) {
                config.data = data;
            }
            [ OPTIONS, EXTERNAL_CLASSES, BEHAVIORS ].forEach((key => {
                var _a;
                config[key] = (_a = component[key]) !== null && _a !== void 0 ? _a : _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kT;
            }));
            return config;
        }
        function createRecursiveComponentConfig(componentName) {
            const isCustomWrapper = componentName === CUSTOM_WRAPPER;
            const [ATTACHED, DETACHED] = _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.PT.call("getMiniLifecycleImpl").component;
            const lifeCycles = isCustomWrapper ? {
                [ATTACHED]() {
                    var _a, _b;
                    const componentId = ((_a = this.data.i) === null || _a === void 0 ? void 0 : _a.sid) || ((_b = this.props.i) === null || _b === void 0 ? void 0 : _b.sid);
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(componentId)) {
                        customWrapperCache.set(componentId, this);
                        const el = env.document.getElementById(componentId);
                        if (el) {
                            el.ctx = this;
                        }
                    }
                },
                [DETACHED]() {
                    var _a, _b;
                    const componentId = ((_a = this.data.i) === null || _a === void 0 ? void 0 : _a.sid) || ((_b = this.props.i) === null || _b === void 0 ? void 0 : _b.sid);
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.HD)(componentId)) {
                        customWrapperCache.delete(componentId);
                        const el = env.document.getElementById(componentId);
                        if (el) {
                            el.ctx = null;
                        }
                    }
                }
            } : _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.kT;
            return Object.assign({
                properties: {
                    i: {
                        type: Object,
                        value: {
                            ["nn"]: (0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.W)(_tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.rD)[VIEW]._num
                        }
                    },
                    l: {
                        type: String,
                        value: ""
                    }
                },
                options: {
                    addGlobalClass: true,
                    virtualHost: !isCustomWrapper
                },
                methods: {
                    eh: eventHandler
                }
            }, lifeCycles);
        }
        const nextTick = (cb, ctx) => {
            var _a, _b, _c;
            const router = Current.router;
            const timerFunc = () => {
                setTimeout((function() {
                    ctx ? cb.call(ctx) : cb();
                }), 1);
            };
            if (router !== null) {
                let pageElement = null;
                const path = router.$taroPath;
                pageElement = env.document.getElementById(path);
                if (pageElement === null || pageElement === void 0 ? void 0 : pageElement.pendingUpdate) {
                    if ((0, _tarojs_shared__WEBPACK_IMPORTED_MODULE_0__.gl)()) {
                        (_c = (_b = (_a = pageElement.firstChild) === null || _a === void 0 ? void 0 : _a["componentOnReady"]) === null || _b === void 0 ? void 0 : _b.call(_a).then((() => {
                            timerFunc();
                        }))) !== null && _c !== void 0 ? _c : timerFunc();
                    } else {
                        pageElement.enqueueUpdateCallback(cb, ctx);
                    }
                } else {
                    timerFunc();
                }
            } else {
                timerFunc();
            }
        };
    }
} ]);

/** filePath: dist/comp.js **/
"use strict";

(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([ [ 367 ], {
    685: function(__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
        var _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(555);
        Component((0, _tarojs_runtime__WEBPACK_IMPORTED_MODULE_0__.createRecursiveComponentConfig)());
    }
}, function(__webpack_require__) {
    var __webpack_exec__ = function(moduleId) {
        return __webpack_require__(__webpack_require__.s = moduleId);
    };
    __webpack_require__.O(0, [ 592 ], (function() {
        return __webpack_exec__(685);
    }));
    var __webpack_exports__ = __webpack_require__.O();
} ]);

/** filePath: dist/comp.json **/
{"component":true,"usingComponents":{"comp":"./comp"}}

/** filePath: dist/comp.wxml **/
<import src="./base.wxml" />
<template is="tmpl_0_container" data="{{i:i,l:l}}" />

/** filePath: dist/components/tab/tab.js **/
(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([ [ 9 ], {
    388: function() {
        Component({
            behaviors: [],
            properties: {
                myProperty: {
                    type: String,
                    value: "",
                    observer: function observer(newVal, oldVal, changedPath) {}
                },
                myProperty2: String
            },
            data: {},
            attached: function attached() {},
            moved: function moved() {},
            detached: function detached() {},
            methods: {
                onMyButtonTap: function onMyButtonTap() {
                    this.setData({});
                },
                _myPrivateMethod: function _myPrivateMethod() {
                    this.setData({
                        "A[0].B": "myPrivateData"
                    });
                },
                _propertyChange: function _propertyChange(newVal, oldVal) {},
                clickHandler: function clickHandler() {
                    console.log("sdsd");
                    this.triggerEvent("myevent", {
                        f: 1
                    });
                }
            }
        });
    }
}, function(__webpack_require__) {
    var __webpack_exec__ = function(moduleId) {
        return __webpack_require__(__webpack_require__.s = moduleId);
    };
    var __webpack_exports__ = __webpack_exec__(388);
} ]);

/** filePath: dist/components/tab/tab.json **/
{"component":true,"usingComponents":{}}

/** filePath: dist/components/tab/tab.wxml **/
<view class="tab" bindtap="clickHandler">
  {{myProperty}}
</view>


/** filePath: dist/pages/index/index.js **/
"use strict";

(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([ [ 539 ], {
    395: function(__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
        var taro_components_namespaceObject = {};
        __webpack_require__.r(taro_components_namespaceObject);
        __webpack_require__.d(taro_components_namespaceObject, {
            G7: function() {
                return View;
            }
        });
        var runtime_esm = __webpack_require__(555);
        var classCallCheck = __webpack_require__(517);
        var createClass = __webpack_require__(872);
        var inherits = __webpack_require__(557);
        var createSuper = __webpack_require__(361);
        var taro = __webpack_require__(357);
        var react = __webpack_require__(800);
        var Canvas = {};
        var CoverView = {};
        var CoverImage = {};
        var Input = {};
        var Picker = {};
        var Swiper = {};
        var SwiperItem = {};
        var Text = {};
        var Textarea = {};
        var Video = {};
        var View = {};
        var taro_components = "taro-components-mock";
        var Index = function(_React$Component) {
            (0, inherits.Z)(Index, _React$Component);
            var _super = (0, createSuper.Z)(Index);
            function Index() {
                (0, classCallCheck.Z)(this, Index);
                return _super.apply(this, arguments);
            }
            (0, createClass.Z)(Index, [ {
                key: "gotoWxParse",
                value: function gotoWxParse() {
                    taro.ZP.navigateTo({
                        url: "/pages/wxParse/wxParse"
                    });
                }
            }, {
                key: "gotoEcharts",
                value: function gotoEcharts() {
                    taro.ZP.navigateTo({
                        url: "/pages/echarts/echarts"
                    });
                }
            }, {
                key: "gotoNative",
                value: function gotoNative() {
                    taro.ZP.navigateTo({
                        url: "/pages/native/native"
                    });
                }
            }, {
                key: "tabEvent",
                value: function tabEvent(e) {
                    console.log(e);
                }
            }, {
                key: "render",
                value: function render() {
                    return react["default"].createElement(View, {
                        className: "index"
                    }, react["default"].createElement(View, {
                        className: "title"
                    }, "\\u4e0e\\u5c0f\\u7a0b\\u5e8f\\u539f\\u751f\\u878d\\u5408\\u7684\\u5404\\u79cd\\u793a\\u4f8b"), react["default"].createElement(View, {
                        className: "main"
                    }, react["default"].createElement(View, {
                        className: "wrapper"
                    }, react["default"].createElement("tab", {
                        onMyevent: this.tabEvent,
                        myProperty: "This is tab"
                    })), react["default"].createElement(View, {
                        className: "wrapper"
                    }, react["default"].createElement(taro_components_namespaceObject.Button, {
                        type: "primary",
                        onClick: this.gotoNative
                    }, "\\u6df7\\u5199\\u539f\\u751f\\u9875\\u9762\\u793a\\u4f8b"))));
                }
            } ]);
            return Index;
        }(react["default"].Component);
        var config = {
            navigationBarTitleText: "\\u9996\\u9875",
            usingComponents: {
                tab: "../../components/tab/tab"
            }
        };
        var inst = Page((0, runtime_esm.createPageConfig)(Index, "pages/index/index", {
            root: {
                cn: []
            }
        }, config || {}));
        var index = null && component;
    }
}, function(__webpack_require__) {
    var __webpack_exec__ = function(moduleId) {
        return __webpack_require__(__webpack_require__.s = moduleId);
    };
    __webpack_require__.O(0, [ 216, 592 ], (function() {
        return __webpack_exec__(395);
    }));
    var __webpack_exports__ = __webpack_require__.O();
} ]);

/** filePath: dist/pages/index/index.json **/
{"navigationBarTitleText":"首页","usingComponents":{"tab":"../../components/tab/tab","comp":"../../comp"}}

/** filePath: dist/pages/index/index.wxml **/
<import src="../../base.wxml"/>
<template is="taro_tmpl" data="{{root:root}}" />

/** filePath: dist/pages/index/index.wxss **/
.title{font-size:36rpx;line-height:80rpx;text-align:center}.main{padding:0 50rpx}.wrapper{margin-bottom:24rpx}

/** filePath: dist/pages/native/native.js **/
(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([ [ 91 ], {
    662: function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {
        var _require = __webpack_require__(344), add = _require.add;
        Page({
            data: {
                text: "This is page data.",
                x: add(1, 2)
            },
            created: function created(options) {
                console.log(options);
            },
            onReady: function onReady() {},
            viewTap: function viewTap() {
                this.setData({
                    text: "Set some data for updating view."
                }, (function() {}));
            },
            handler: function handler(e) {
                console.log(e);
            },
            customData: {
                hi: "MINA"
            }
        });
    },
    344: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        __webpack_require__.d(__webpack_exports__, {
            add: function() {
                return add;
            }
        });
        function add(a, b) {
            return a + b;
        }
    }
}, function(__webpack_require__) {
    var __webpack_exec__ = function(moduleId) {
        return __webpack_require__(__webpack_require__.s = moduleId);
    };
    var __webpack_exports__ = __webpack_exec__(662);
} ]);

/** filePath: dist/pages/native/native.json **/
{"navigationBarBackgroundColor":"#ffffff","navigationBarTextStyle":"black","navigationBarTitleText":"混写页面示例","backgroundColor":"#eeeeee","backgroundTextStyle":"light","usingComponents":{"tab":"../../components/tab/tab"}}

/** filePath: dist/pages/native/native.wxml **/
<view class="native" bindtap="viewTap">
  <text>{{text}}{{x}}</text>
  <tab myProperty="kkl" bindmyevent="handler" />
</view>


/** filePath: dist/pages/native/native.wxss **/
.native{color:red}

/** filePath: dist/runtime.js **/


/** filePath: dist/utils.wxs **/
module.exports = {
  a: function (l, n, s) {
    var a = ["7","0","18","5","2","11","6","4","38","39","22","19","36","40","41","tab"]
    var b = ["4","38","39","22","19","36","40","41"]
    if (a.indexOf(n) === -1) {
      l = 0
    }
    if (b.indexOf(n) > -1) {
      var u = s.split(',')
      var depth = 0
      for (var i = 0; i < u.length; i++) {
        if (u[i] === n) depth++
      }
      l = depth
    }
    return 'tmpl_' + l + '_' + n
  },
  b: function (a, b) {
    return a === undefined ? b : a
  },
  c: function(i, prefix) {
    var s = i.focus !== undefined ? 'focus' : 'blur'
    return prefix + i.nn + '_' + s
  },
  d: function (i, v) {
    return i === undefined ? v : i
  },
  e: function (n) {
    return 'tmpl_' + n + '_container'
  },
  f: function (l, n) {
    var b = ["4","38","39","22","19","36","40","41"]
    if (b.indexOf(n) > -1) {
      if (l) l += ','
      l += n
    }
    return l
  }
}

/** filePath: dist/vendors.js **/
"use strict";

(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([ [ 216 ], {
    517: function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Z: function() {
                return _classCallCheck;
            }
        });
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
    },
    872: function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Z: function() {
                return _createClass;
            }
        });
        var esm_typeof = __webpack_require__(817);
        function _toPrimitive(input, hint) {
            if ((0, esm_typeof.Z)(input) !== "object" || input === null) return input;
            var prim = input[Symbol.toPrimitive];
            if (prim !== undefined) {
                var res = prim.call(input, hint || "default");
                if ((0, esm_typeof.Z)(res) !== "object") return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return (hint === "string" ? String : Number)(input);
        }
        function _toPropertyKey(arg) {
            var key = _toPrimitive(arg, "string");
            return (0, esm_typeof.Z)(key) === "symbol" ? key : String(key);
        }
        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
            }
        }
        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            Object.defineProperty(Constructor, "prototype", {
                writable: false
            });
            return Constructor;
        }
    },
    361: function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Z: function() {
                return _createSuper;
            }
        });
        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }
        function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;
            try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
                return true;
            } catch (e) {
                return false;
            }
        }
        var esm_typeof = __webpack_require__(817);
        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self;
        }
        function _possibleConstructorReturn(self, call) {
            if (call && ((0, esm_typeof.Z)(call) === "object" || typeof call === "function")) {
                return call;
            } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
            }
            return _assertThisInitialized(self);
        }
        function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function _createSuperInternal() {
                var Super = _getPrototypeOf(Derived), result;
                if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                    result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn(this, result);
            };
        }
    },
    557: function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Z: function() {
                return _inherits;
            }
        });
        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o, p);
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            Object.defineProperty(subClass, "prototype", {
                writable: false
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }
    },
    817: function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Z: function() {
                return _typeof;
            }
        });
        function _typeof(obj) {
            "@babel/helpers - typeof";
            return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                return typeof obj;
            } : function(obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            }, _typeof(obj);
        }
    }
} ]);
"
`;
